{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import axios from'axios';import{ArrowPathIcon,ExclamationCircleIcon}from'@heroicons/react/24/outline';import{useTheme}from'../contexts/ThemeContext';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const InteractiveViewer=_ref=>{let{caseId,selectedNoduleId,resultsPageView=false}=_ref;const[volumeInfo,setVolumeInfo]=useState(null);const[currentAxis,setCurrentAxis]=useState('axial');const[currentSlice,setCurrentSlice]=useState(0);const[sliceImage,setSliceImage]=useState(null);const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);const[nodulesInSlice,setNodulesInSlice]=useState([]);const imageRef=useRef(null);const containerRef=useRef(null);const{darkMode}=useTheme();// Function to go to a specific nodule slice\nconst goToNoduleSlice=noduleId=>{if(!volumeInfo||!volumeInfo.nodules)return;// Find the nodule by ID\nconst nodule=volumeInfo.nodules.find(n=>n.id===noduleId);if(!nodule)return;// Set the axis to axial (z)\nsetCurrentAxis('axial');// Set the slice to the nodule's z-coordinate\nsetCurrentSlice(Math.round(nodule.z));};// Navigate to selected nodule when selectedNoduleId or volumeInfo changes\nuseEffect(()=>{if(selectedNoduleId&&volumeInfo&&volumeInfo.nodules){goToNoduleSlice(selectedNoduleId);}},[selectedNoduleId,volumeInfo]);// Fetch volume metadata\nuseEffect(()=>{const fetchVolumeInfo=async()=>{try{setIsLoading(true);const response=await axios.get(`/api/results/${caseId}/slices`);setVolumeInfo(response.data.volume_info);// Check if we're using placeholder data\nconst usingPlaceholder=response.data.using_placeholder||false;if(usingPlaceholder){console.warn('Using placeholder data for volume');}// Set initial slice to middle of volume\nconst initialSlice=Math.floor(response.data.volume_info.dimensions.depth/2);setCurrentSlice(initialSlice);// If we're in a simplified view for the results page and there are nodules,\n// try to show a slice with a nodule if possible\nif(resultsPageView&&response.data.volume_info.nodules&&response.data.volume_info.nodules.length>0){// Find the slice with the most confident nodule\nconst mainNodule=response.data.volume_info.nodules.reduce((prev,current)=>current.confidence>prev.confidence?current:prev,response.data.volume_info.nodules[0]);// Ensure we're setting a valid number, not NaN\nconst noduleZ=Math.round(mainNodule.z);if(!isNaN(noduleZ)&&noduleZ>=0&&noduleZ<response.data.volume_info.dimensions.depth){setCurrentSlice(noduleZ);}}setIsLoading(false);}catch(error){var _error$response,_error$response$data;console.error('Error fetching volume info:',error);setError(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Failed to load volume data');setIsLoading(false);}};fetchVolumeInfo();},[caseId,resultsPageView]);// Fetch slice when axis or slice index changes\nuseEffect(()=>{const fetchSlice=async()=>{if(!volumeInfo)return;try{setIsLoading(true);const response=await axios.get(`/api/results/${caseId}/slices/${currentAxis}/${currentSlice}`);// Check if we received a placeholder image\nconst isPlaceholder=response.data.is_placeholder||false;// Get the slice data, handling whether it includes the data:image prefix or not\nlet imageData=response.data.slice_data;if(!imageData.startsWith('data:image')){imageData=`data:image/png;base64,${imageData}`;}setSliceImage({data:imageData,isPlaceholder:isPlaceholder});setIsLoading(false);}catch(error){var _error$response2,_error$response2$data;console.error('Error fetching slice:',error);setError(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Failed to load slice');setIsLoading(false);}};fetchSlice();},[caseId,currentAxis,currentSlice,volumeInfo]);// Find nodules in the current slice\nuseEffect(()=>{if(!volumeInfo||!volumeInfo.nodules)return;// Determine which nodules are visible in this slice\nconst sliceNodules=volumeInfo.nodules.filter(nodule=>{// Check if this nodule is visible in the current slice\nif(currentAxis==='axial'){// Check if the nodule's z-coordinate is close to this slice\nreturn Math.abs(nodule.z-currentSlice)<=nodule.radius;}else if(currentAxis==='coronal'){// Check if the nodule's y-coordinate is close to this slice\nreturn Math.abs(nodule.y-currentSlice)<=nodule.radius;}else{// sagittal\n// Check if the nodule's x-coordinate is close to this slice\nreturn Math.abs(nodule.x-currentSlice)<=nodule.radius;}});setNodulesInSlice(sliceNodules);},[volumeInfo,currentAxis,currentSlice]);// Draw nodule circles and center points when image loads or nodulesInSlice changes\nuseEffect(()=>{if(!sliceImage||!imageRef.current||nodulesInSlice.length===0)return;// Skip drawing nodules on placeholder images\nif(sliceImage.isPlaceholder)return;const drawNodules=()=>{const img=imageRef.current;if(!img.complete){// Wait for image to load before drawing\nimg.onload=drawNodulesOnImage;return;}drawNodulesOnImage();};const drawNodulesOnImage=()=>{const img=imageRef.current;const container=containerRef.current;// Clear any existing overlay elements\nconst existingOverlay=container.querySelector('.nodule-overlay');if(existingOverlay){container.removeChild(existingOverlay);}// Create overlay div that will contain the SVG with nodule circles\nconst overlay=document.createElement('div');overlay.className='nodule-overlay';overlay.style.position='absolute';overlay.style.top='0';overlay.style.left='0';overlay.style.width='100%';overlay.style.height='100%';overlay.style.pointerEvents='none';// Calculate image display dimensions and position\nconst imgRect=img.getBoundingClientRect();const containerRect=container.getBoundingClientRect();// Calculate aspect ratio for the current view\nlet aspectRatio=1.0;if(volumeInfo&&volumeInfo.spacing){if(currentAxis==='axial'){// Y/X aspect ratio for axial view\naspectRatio=volumeInfo.spacing[1]/volumeInfo.spacing[0];}else if(currentAxis==='coronal'){// Z/X aspect ratio for coronal view\naspectRatio=volumeInfo.spacing[2]/volumeInfo.spacing[0];}else{// sagittal\n// Z/Y aspect ratio for sagittal view\naspectRatio=volumeInfo.spacing[2]/volumeInfo.spacing[1];}}// Create SVG element for drawing\nconst svg=document.createElementNS('http://www.w3.org/2000/svg','svg');svg.setAttribute('width','100%');svg.setAttribute('height','100%');svg.style.position='absolute';svg.style.top='0';svg.style.left='0';// Get display dimensions for scaling\nconst displayWidth=imgRect.width;const displayHeight=imgRect.height;// Draw each nodule\nnodulesInSlice.forEach(nodule=>{let x,y,slicePos;// Calculate 2D coordinates based on the current viewing axis\nif(currentAxis==='axial'){x=nodule.x;y=nodule.y;slicePos=currentSlice;}else if(currentAxis==='coronal'){x=nodule.x;y=nodule.z;slicePos=currentSlice;}else{// sagittal\nx=nodule.y;y=nodule.z;slicePos=currentSlice;}// Calculate the position in normalized coordinates (0-1 range)\nlet xNorm,yNorm;if(currentAxis==='axial'){xNorm=x/volumeInfo.dimensions.width;yNorm=y/volumeInfo.dimensions.height;}else if(currentAxis==='coronal'){xNorm=x/volumeInfo.dimensions.width;yNorm=y/volumeInfo.dimensions.depth;}else{// sagittal\nxNorm=y/volumeInfo.dimensions.height;yNorm=nodule.z/volumeInfo.dimensions.depth;}// Apply proper scaling for the current view resolution\n// Convert from normalized coordinates to display pixels\nconst xPx=xNorm*displayWidth;// Apply aspect ratio correction to y-coordinate\n// This ensures that the nodule appears at the right vertical position\n// regardless of how the image is stretched or squeezed\nconst yPx=yNorm*displayHeight;// Calculate radius in pixels based on the nodule's radius in mm\n// Scale according to the current display size\nlet radiusMm=nodule.radius||5;// Default to 5mm if not specified\nlet pixelsPerMm;// Calculate pixels per mm based on the current view's spacing\nif(currentAxis==='axial'){// Use the minimum of width and height spacing for consistent sizing\nconst spacingX=volumeInfo.spacing?volumeInfo.spacing[0]:1;const spacingY=volumeInfo.spacing?volumeInfo.spacing[1]:1;const mmPerPixel=Math.min(spacingX,spacingY);// Calculate how many display pixels correspond to one mm in the CT scan\nconst widthInMm=volumeInfo.dimensions.width*spacingX;pixelsPerMm=displayWidth/widthInMm;}else if(currentAxis==='coronal'){const spacingX=volumeInfo.spacing?volumeInfo.spacing[0]:1;const spacingZ=volumeInfo.spacing?volumeInfo.spacing[2]:1;const mmPerPixel=Math.min(spacingX,spacingZ);// Calculate how many display pixels correspond to one mm in the CT scan\nconst widthInMm=volumeInfo.dimensions.width*spacingX;pixelsPerMm=displayWidth/widthInMm;}else{// sagittal\nconst spacingY=volumeInfo.spacing?volumeInfo.spacing[1]:1;const spacingZ=volumeInfo.spacing?volumeInfo.spacing[2]:1;const mmPerPixel=Math.min(spacingY,spacingZ);// Calculate how many display pixels correspond to one mm in the CT scan\nconst heightInMm=volumeInfo.dimensions.height*spacingY;pixelsPerMm=displayHeight/heightInMm;}// Calculate the radius in display pixels\nlet radiusPixels=radiusMm*pixelsPerMm;// Make circles more appropriately sized for visualization\nradiusPixels=Math.max(5,radiusPixels*0.5);// Minimum 5px radius for visibility\n// Adjust the radius based on how far the nodule is from the current slice\nlet distanceFromSlice;if(currentAxis==='axial'){distanceFromSlice=Math.abs(nodule.z-slicePos);}else if(currentAxis==='coronal'){distanceFromSlice=Math.abs(nodule.y-slicePos);}else{// sagittal\ndistanceFromSlice=Math.abs(nodule.x-slicePos);}// Calculate the nodule color based on confidence\nconst color=getNoduleColor(nodule.confidence);// Create circle element for nodule outline\nconst circle=document.createElementNS('http://www.w3.org/2000/svg','circle');circle.setAttribute('cx',xPx);circle.setAttribute('cy',yPx);circle.setAttribute('r',radiusPixels);circle.setAttribute('fill','none');circle.setAttribute('stroke',color);circle.setAttribute('stroke-width','2');// Create dot element for center point\nconst centerDot=document.createElementNS('http://www.w3.org/2000/svg','circle');centerDot.setAttribute('cx',xPx);centerDot.setAttribute('cy',yPx);centerDot.setAttribute('r','3');centerDot.setAttribute('fill',color);// Highlight selected nodule with a thicker stroke\nif(selectedNoduleId===nodule.id){circle.setAttribute('stroke-width','3');circle.setAttribute('stroke-dasharray','5,3');}svg.appendChild(circle);svg.appendChild(centerDot);});overlay.appendChild(svg);container.appendChild(overlay);};drawNodules();// Cleanup function\nreturn()=>{const container=containerRef.current;if(container){const overlay=container.querySelector('.nodule-overlay');if(overlay){container.removeChild(overlay);}}};},[sliceImage,nodulesInSlice,currentAxis,selectedNoduleId,volumeInfo]);// Get max slice index for current axis\nconst getMaxSliceIndex=()=>{if(!volumeInfo)return 0;if(currentAxis==='axial'){return volumeInfo.dimensions.depth-1;}else if(currentAxis==='coronal'){return volumeInfo.dimensions.height-1;}else{// sagittal\nreturn volumeInfo.dimensions.width-1;}};const handleAxisChange=axis=>{setCurrentAxis(axis);// Reset to middle slice when changing axis\nif(!volumeInfo)return;let middle;if(axis==='axial'){middle=Math.floor(volumeInfo.dimensions.depth/2);}else if(axis==='coronal'){middle=Math.floor(volumeInfo.dimensions.height/2);}else{// sagittal\nmiddle=Math.floor(volumeInfo.dimensions.width/2);}// Ensure we're setting a valid number, not NaN\nif(!isNaN(middle)&&middle>=0){setCurrentSlice(middle);}};const handleSliceChange=e=>{const value=parseInt(e.target.value,10);// Validate before setting\nif(!isNaN(value)&&value>=0&&value<=getMaxSliceIndex()){setCurrentSlice(value);}};// Track which slices have nodules to highlight them on the slider\nconst slicesWithNodules=()=>{if(!volumeInfo||!volumeInfo.nodules)return[];const noduleSlices=new Set();volumeInfo.nodules.forEach(nodule=>{if(currentAxis==='axial'){// Mark all slices within the nodule's radius\nconst start=Math.max(0,Math.floor(nodule.z-nodule.radius));const end=Math.min(volumeInfo.dimensions.depth-1,Math.ceil(nodule.z+nodule.radius));for(let i=start;i<=end;i++){noduleSlices.add(i);}}else if(currentAxis==='coronal'){const start=Math.max(0,Math.floor(nodule.y-nodule.radius));const end=Math.min(volumeInfo.dimensions.height-1,Math.ceil(nodule.y+nodule.radius));for(let i=start;i<=end;i++){noduleSlices.add(i);}}else{// sagittal\nconst start=Math.max(0,Math.floor(nodule.x-nodule.radius));const end=Math.min(volumeInfo.dimensions.width-1,Math.ceil(nodule.x+nodule.radius));for(let i=start;i<=end;i++){noduleSlices.add(i);}}});return Array.from(noduleSlices);};// Nodule colors for different confidence levels\nconst getNoduleColor=confidence=>{if(confidence>=0.8)return'rgba(220, 38, 38, 0.8)';// Red for high confidence\nif(confidence>=0.6)return'rgba(234, 88, 12, 0.8)';// Orange for medium confidence\nreturn'rgba(234, 179, 8, 0.8)';// Yellow for lower confidence\n};return/*#__PURE__*/_jsx(\"div\",{className:`relative w-full h-full ${resultsPageView?'results-page-view':''}`,ref:containerRef,children:resultsPageView?/*#__PURE__*/_jsx(_Fragment,{children:isLoading?/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center justify-center w-full h-full bg-gray-200\",children:/*#__PURE__*/_jsx(ArrowPathIcon,{className:\"h-8 w-8 animate-spin text-gray-400\"})}):error?/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center justify-center w-full h-full bg-gray-200\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center p-4\",children:[/*#__PURE__*/_jsx(ExclamationCircleIcon,{className:\"h-8 w-8 mx-auto mb-2 text-red-500\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-sm text-gray-600\",children:\"Error loading scan\"})]})}):sliceImage?/*#__PURE__*/_jsxs(\"div\",{className:\"w-full h-full overflow-hidden relative\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center justify-center h-full\",children:/*#__PURE__*/_jsx(\"img\",{ref:imageRef,src:sliceImage.data,alt:`Axial view of scan ${caseId}`,className:\"object-contain max-h-full max-w-full\",style:{objectPosition:'center center',maxHeight:'260px'}})}),sliceImage.isPlaceholder&&/*#__PURE__*/_jsx(\"div\",{className:\"absolute bottom-0 left-0 right-0 bg-red-500 bg-opacity-70 text-white text-center py-1 text-sm\",children:\"Placeholder Image - Scan Data Unavailable\"})]}):/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center justify-center w-full h-full bg-gray-200\",children:/*#__PURE__*/_jsx(\"p\",{className:\"text-sm text-gray-500\",children:\"No image available\"})})}):/*#__PURE__*/// Original interactive viewer with all controls for the detail page\n_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:`absolute top-2 left-2 z-10 rounded-lg shadow-md ${darkMode?'bg-gray-800':'bg-white'}`,children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex p-1 space-x-1\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleAxisChange('axial'),className:`px-3 py-1.5 text-xs font-medium rounded-md ${currentAxis==='axial'?darkMode?'bg-indigo-600 text-white':'bg-indigo-100 text-indigo-700':darkMode?'text-gray-300 hover:bg-gray-700':'text-gray-700 hover:bg-gray-100'}`,children:\"Axial\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleAxisChange('coronal'),className:`px-3 py-1.5 text-xs font-medium rounded-md ${currentAxis==='coronal'?darkMode?'bg-indigo-600 text-white':'bg-indigo-100 text-indigo-700':darkMode?'text-gray-300 hover:bg-gray-700':'text-gray-700 hover:bg-gray-100'}`,children:\"Coronal\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleAxisChange('sagittal'),className:`px-3 py-1.5 text-xs font-medium rounded-md ${currentAxis==='sagittal'?darkMode?'bg-indigo-600 text-white':'bg-indigo-100 text-indigo-700':darkMode?'text-gray-300 hover:bg-gray-700':'text-gray-700 hover:bg-gray-100'}`,children:\"Sagittal\"})]})}),/*#__PURE__*/_jsxs(\"div\",{className:`absolute bottom-2 left-1/2 transform -translate-x-1/2 z-10 p-2 rounded-lg shadow-md ${darkMode?'bg-gray-800':'bg-white'}`,style:{width:'90%',maxWidth:'400px'},children:[/*#__PURE__*/_jsx(\"input\",{type:\"range\",min:\"0\",max:getMaxSliceIndex(),value:currentSlice,onChange:handleSliceChange,className:\"w-full h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between text-xs mt-1\",children:[/*#__PURE__*/_jsxs(\"span\",{className:darkMode?'text-gray-400':'text-gray-500',children:[\"Slice: \",currentSlice+1,\"/\",getMaxSliceIndex()+1]}),/*#__PURE__*/_jsxs(\"span\",{className:darkMode?'text-gray-400':'text-gray-500',children:[slicesWithNodules().includes(currentSlice)?'🔴 Nodule present':'',sliceImage&&sliceImage.isPlaceholder?'⚠️ Placeholder':'']})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"w-full h-full relative\",children:sliceImage?/*#__PURE__*/_jsxs(\"div\",{className:\"relative w-full h-full\",children:[/*#__PURE__*/_jsx(\"img\",{ref:imageRef,src:sliceImage.data,alt:`${currentAxis.charAt(0).toUpperCase()+currentAxis.slice(1)} slice of CT scan`,className:\"w-full h-full object-contain\"}),sliceImage.isPlaceholder&&/*#__PURE__*/_jsx(\"div\",{className:\"absolute bottom-0 left-0 right-0 bg-red-500 bg-opacity-70 text-white text-center py-1 text-sm\",children:\"Placeholder Image - Scan Data Unavailable\"})]}):/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center justify-center w-full h-full bg-gray-200\",children:/*#__PURE__*/_jsx(\"p\",{className:\"text-sm text-gray-500\",children:\"No image available\"})})})]})});};export default InteractiveViewer;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","ArrowPathIcon","ExclamationCircleIcon","useTheme","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","InteractiveViewer","_ref","caseId","selectedNoduleId","resultsPageView","volumeInfo","setVolumeInfo","currentAxis","setCurrentAxis","currentSlice","setCurrentSlice","sliceImage","setSliceImage","isLoading","setIsLoading","error","setError","nodulesInSlice","setNodulesInSlice","imageRef","containerRef","darkMode","goToNoduleSlice","noduleId","nodules","nodule","find","n","id","Math","round","z","fetchVolumeInfo","response","get","data","volume_info","usingPlaceholder","using_placeholder","console","warn","initialSlice","floor","dimensions","depth","length","mainNodule","reduce","prev","current","confidence","noduleZ","isNaN","_error$response","_error$response$data","message","fetchSlice","isPlaceholder","is_placeholder","imageData","slice_data","startsWith","_error$response2","_error$response2$data","sliceNodules","filter","abs","radius","y","x","drawNodules","img","complete","onload","drawNodulesOnImage","container","existingOverlay","querySelector","removeChild","overlay","document","createElement","className","style","position","top","left","width","height","pointerEvents","imgRect","getBoundingClientRect","containerRect","aspectRatio","spacing","svg","createElementNS","setAttribute","displayWidth","displayHeight","forEach","slicePos","xNorm","yNorm","xPx","yPx","radiusMm","pixelsPerMm","spacingX","spacingY","mmPerPixel","min","widthInMm","spacingZ","heightInMm","radiusPixels","max","distanceFromSlice","color","getNoduleColor","circle","centerDot","appendChild","getMaxSliceIndex","handleAxisChange","axis","middle","handleSliceChange","e","value","parseInt","target","slicesWithNodules","noduleSlices","Set","start","end","ceil","i","add","Array","from","ref","children","src","alt","objectPosition","maxHeight","onClick","maxWidth","type","onChange","includes","charAt","toUpperCase","slice"],"sources":["C:/Users/kouss/Desktop/Cursor/Segmentation/pipeline/webapp/static/src/components/InteractiveViewer.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { ArrowPathIcon, ExclamationCircleIcon } from '@heroicons/react/24/outline';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\n\r\nconst InteractiveViewer = ({ caseId, selectedNoduleId, resultsPageView = false }) => {\r\n  const [volumeInfo, setVolumeInfo] = useState(null);\r\n  const [currentAxis, setCurrentAxis] = useState('axial');\r\n  const [currentSlice, setCurrentSlice] = useState(0);\r\n  const [sliceImage, setSliceImage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [nodulesInSlice, setNodulesInSlice] = useState([]);\r\n  const imageRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n  const { darkMode } = useTheme();\r\n\r\n  // Function to go to a specific nodule slice\r\n  const goToNoduleSlice = (noduleId) => {\r\n    if (!volumeInfo || !volumeInfo.nodules) return;\r\n    \r\n    // Find the nodule by ID\r\n    const nodule = volumeInfo.nodules.find(n => n.id === noduleId);\r\n    if (!nodule) return;\r\n    \r\n    // Set the axis to axial (z)\r\n    setCurrentAxis('axial');\r\n    \r\n    // Set the slice to the nodule's z-coordinate\r\n    setCurrentSlice(Math.round(nodule.z));\r\n  };\r\n\r\n  // Navigate to selected nodule when selectedNoduleId or volumeInfo changes\r\n  useEffect(() => {\r\n    if (selectedNoduleId && volumeInfo && volumeInfo.nodules) {\r\n      goToNoduleSlice(selectedNoduleId);\r\n    }\r\n  }, [selectedNoduleId, volumeInfo]);\r\n\r\n  // Fetch volume metadata\r\n  useEffect(() => {\r\n    const fetchVolumeInfo = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const response = await axios.get(`/api/results/${caseId}/slices`);\r\n        setVolumeInfo(response.data.volume_info);\r\n        \r\n        // Check if we're using placeholder data\r\n        const usingPlaceholder = response.data.using_placeholder || false;\r\n        if (usingPlaceholder) {\r\n          console.warn('Using placeholder data for volume');\r\n        }\r\n        \r\n        // Set initial slice to middle of volume\r\n        const initialSlice = Math.floor(response.data.volume_info.dimensions.depth / 2);\r\n        setCurrentSlice(initialSlice);\r\n\r\n        // If we're in a simplified view for the results page and there are nodules,\r\n        // try to show a slice with a nodule if possible\r\n        if (resultsPageView && response.data.volume_info.nodules && response.data.volume_info.nodules.length > 0) {\r\n          // Find the slice with the most confident nodule\r\n          const mainNodule = response.data.volume_info.nodules.reduce(\r\n            (prev, current) => (current.confidence > prev.confidence) ? current : prev,\r\n            response.data.volume_info.nodules[0]\r\n          );\r\n          // Ensure we're setting a valid number, not NaN\r\n          const noduleZ = Math.round(mainNodule.z);\r\n          if (!isNaN(noduleZ) && noduleZ >= 0 && noduleZ < response.data.volume_info.dimensions.depth) {\r\n            setCurrentSlice(noduleZ);\r\n          }\r\n        }\r\n        \r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching volume info:', error);\r\n        setError(error.response?.data?.message || 'Failed to load volume data');\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchVolumeInfo();\r\n  }, [caseId, resultsPageView]);\r\n\r\n  // Fetch slice when axis or slice index changes\r\n  useEffect(() => {\r\n    const fetchSlice = async () => {\r\n      if (!volumeInfo) return;\r\n      \r\n      try {\r\n        setIsLoading(true);\r\n        const response = await axios.get(`/api/results/${caseId}/slices/${currentAxis}/${currentSlice}`);\r\n        \r\n        // Check if we received a placeholder image\r\n        const isPlaceholder = response.data.is_placeholder || false;\r\n        \r\n        // Get the slice data, handling whether it includes the data:image prefix or not\r\n        let imageData = response.data.slice_data;\r\n        if (!imageData.startsWith('data:image')) {\r\n          imageData = `data:image/png;base64,${imageData}`;\r\n        }\r\n        \r\n        setSliceImage({\r\n          data: imageData,\r\n          isPlaceholder: isPlaceholder\r\n        });\r\n        \r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching slice:', error);\r\n        setError(error.response?.data?.message || 'Failed to load slice');\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchSlice();\r\n  }, [caseId, currentAxis, currentSlice, volumeInfo]);\r\n\r\n  // Find nodules in the current slice\r\n  useEffect(() => {\r\n    if (!volumeInfo || !volumeInfo.nodules) return;\r\n    \r\n    // Determine which nodules are visible in this slice\r\n    const sliceNodules = volumeInfo.nodules.filter(nodule => {\r\n      // Check if this nodule is visible in the current slice\r\n      if (currentAxis === 'axial') {\r\n        // Check if the nodule's z-coordinate is close to this slice\r\n        return Math.abs(nodule.z - currentSlice) <= nodule.radius;\r\n      } else if (currentAxis === 'coronal') {\r\n        // Check if the nodule's y-coordinate is close to this slice\r\n        return Math.abs(nodule.y - currentSlice) <= nodule.radius;\r\n      } else { // sagittal\r\n        // Check if the nodule's x-coordinate is close to this slice\r\n        return Math.abs(nodule.x - currentSlice) <= nodule.radius;\r\n      }\r\n    });\r\n    \r\n    setNodulesInSlice(sliceNodules);\r\n  }, [volumeInfo, currentAxis, currentSlice]);\r\n\r\n  // Draw nodule circles and center points when image loads or nodulesInSlice changes\r\n  useEffect(() => {\r\n    if (!sliceImage || !imageRef.current || nodulesInSlice.length === 0) return;\r\n    \r\n    // Skip drawing nodules on placeholder images\r\n    if (sliceImage.isPlaceholder) return;\r\n\r\n    const drawNodules = () => {\r\n      const img = imageRef.current;\r\n      if (!img.complete) {\r\n        // Wait for image to load before drawing\r\n        img.onload = drawNodulesOnImage;\r\n        return;\r\n      }\r\n      \r\n      drawNodulesOnImage();\r\n    };\r\n\r\n    const drawNodulesOnImage = () => {\r\n      const img = imageRef.current;\r\n      const container = containerRef.current;\r\n      \r\n      // Clear any existing overlay elements\r\n      const existingOverlay = container.querySelector('.nodule-overlay');\r\n      if (existingOverlay) {\r\n        container.removeChild(existingOverlay);\r\n      }\r\n      \r\n      // Create overlay div that will contain the SVG with nodule circles\r\n      const overlay = document.createElement('div');\r\n      overlay.className = 'nodule-overlay';\r\n      overlay.style.position = 'absolute';\r\n      overlay.style.top = '0';\r\n      overlay.style.left = '0';\r\n      overlay.style.width = '100%';\r\n      overlay.style.height = '100%';\r\n      overlay.style.pointerEvents = 'none';\r\n      \r\n      // Calculate image display dimensions and position\r\n      const imgRect = img.getBoundingClientRect();\r\n      const containerRect = container.getBoundingClientRect();\r\n      \r\n      // Calculate aspect ratio for the current view\r\n      let aspectRatio = 1.0;\r\n      if (volumeInfo && volumeInfo.spacing) {\r\n        if (currentAxis === 'axial') {\r\n          // Y/X aspect ratio for axial view\r\n          aspectRatio = volumeInfo.spacing[1] / volumeInfo.spacing[0];\r\n        } else if (currentAxis === 'coronal') {\r\n          // Z/X aspect ratio for coronal view\r\n          aspectRatio = volumeInfo.spacing[2] / volumeInfo.spacing[0];\r\n        } else { // sagittal\r\n          // Z/Y aspect ratio for sagittal view\r\n          aspectRatio = volumeInfo.spacing[2] / volumeInfo.spacing[1];\r\n        }\r\n      }\r\n      \r\n      // Create SVG element for drawing\r\n      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\r\n      svg.setAttribute('width', '100%');\r\n      svg.setAttribute('height', '100%');\r\n      svg.style.position = 'absolute';\r\n      svg.style.top = '0';\r\n      svg.style.left = '0';\r\n      \r\n      // Get display dimensions for scaling\r\n      const displayWidth = imgRect.width;\r\n      const displayHeight = imgRect.height;\r\n      \r\n      // Draw each nodule\r\n      nodulesInSlice.forEach(nodule => {\r\n        let x, y, slicePos;\r\n        \r\n        // Calculate 2D coordinates based on the current viewing axis\r\n        if (currentAxis === 'axial') {\r\n          x = nodule.x;\r\n          y = nodule.y;\r\n          slicePos = currentSlice;\r\n        } else if (currentAxis === 'coronal') {\r\n          x = nodule.x;\r\n          y = nodule.z;\r\n          slicePos = currentSlice;\r\n        } else { // sagittal\r\n          x = nodule.y;\r\n          y = nodule.z;\r\n          slicePos = currentSlice;\r\n        }\r\n        \r\n        // Calculate the position in normalized coordinates (0-1 range)\r\n        let xNorm, yNorm;\r\n        \r\n        if (currentAxis === 'axial') {\r\n          xNorm = x / volumeInfo.dimensions.width;\r\n          yNorm = y / volumeInfo.dimensions.height;\r\n        } else if (currentAxis === 'coronal') {\r\n          xNorm = x / volumeInfo.dimensions.width;\r\n          yNorm = y / volumeInfo.dimensions.depth;\r\n        } else { // sagittal\r\n          xNorm = y / volumeInfo.dimensions.height;\r\n          yNorm = nodule.z / volumeInfo.dimensions.depth;\r\n        }\r\n        \r\n        // Apply proper scaling for the current view resolution\r\n        // Convert from normalized coordinates to display pixels\r\n        const xPx = xNorm * displayWidth;\r\n        \r\n        // Apply aspect ratio correction to y-coordinate\r\n        // This ensures that the nodule appears at the right vertical position\r\n        // regardless of how the image is stretched or squeezed\r\n        const yPx = yNorm * displayHeight;\r\n        \r\n        // Calculate radius in pixels based on the nodule's radius in mm\r\n        // Scale according to the current display size\r\n        let radiusMm = nodule.radius || 5; // Default to 5mm if not specified\r\n        let pixelsPerMm;\r\n        \r\n        // Calculate pixels per mm based on the current view's spacing\r\n        if (currentAxis === 'axial') {\r\n          // Use the minimum of width and height spacing for consistent sizing\r\n          const spacingX = volumeInfo.spacing ? volumeInfo.spacing[0] : 1;\r\n          const spacingY = volumeInfo.spacing ? volumeInfo.spacing[1] : 1;\r\n          const mmPerPixel = Math.min(spacingX, spacingY);\r\n          // Calculate how many display pixels correspond to one mm in the CT scan\r\n          const widthInMm = volumeInfo.dimensions.width * spacingX;\r\n          pixelsPerMm = displayWidth / widthInMm;\r\n        } else if (currentAxis === 'coronal') {\r\n          const spacingX = volumeInfo.spacing ? volumeInfo.spacing[0] : 1;\r\n          const spacingZ = volumeInfo.spacing ? volumeInfo.spacing[2] : 1;\r\n          const mmPerPixel = Math.min(spacingX, spacingZ);\r\n          // Calculate how many display pixels correspond to one mm in the CT scan\r\n          const widthInMm = volumeInfo.dimensions.width * spacingX;\r\n          pixelsPerMm = displayWidth / widthInMm;\r\n        } else { // sagittal\r\n          const spacingY = volumeInfo.spacing ? volumeInfo.spacing[1] : 1;\r\n          const spacingZ = volumeInfo.spacing ? volumeInfo.spacing[2] : 1;\r\n          const mmPerPixel = Math.min(spacingY, spacingZ);\r\n          // Calculate how many display pixels correspond to one mm in the CT scan\r\n          const heightInMm = volumeInfo.dimensions.height * spacingY;\r\n          pixelsPerMm = displayHeight / heightInMm;\r\n        }\r\n        \r\n        // Calculate the radius in display pixels\r\n        let radiusPixels = radiusMm * pixelsPerMm;\r\n        \r\n        // Make circles more appropriately sized for visualization\r\n        radiusPixels = Math.max(5, radiusPixels * 0.5); // Minimum 5px radius for visibility\r\n        \r\n        // Adjust the radius based on how far the nodule is from the current slice\r\n        let distanceFromSlice;\r\n        if (currentAxis === 'axial') {\r\n          distanceFromSlice = Math.abs(nodule.z - slicePos);\r\n        } else if (currentAxis === 'coronal') {\r\n          distanceFromSlice = Math.abs(nodule.y - slicePos);\r\n        } else { // sagittal\r\n          distanceFromSlice = Math.abs(nodule.x - slicePos);\r\n        }\r\n        \r\n        // Calculate the nodule color based on confidence\r\n        const color = getNoduleColor(nodule.confidence);\r\n        \r\n        // Create circle element for nodule outline\r\n        const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n        circle.setAttribute('cx', xPx);\r\n        circle.setAttribute('cy', yPx);\r\n        circle.setAttribute('r', radiusPixels);\r\n        circle.setAttribute('fill', 'none');\r\n        circle.setAttribute('stroke', color);\r\n        circle.setAttribute('stroke-width', '2');\r\n        \r\n        // Create dot element for center point\r\n        const centerDot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n        centerDot.setAttribute('cx', xPx);\r\n        centerDot.setAttribute('cy', yPx);\r\n        centerDot.setAttribute('r', '3');\r\n        centerDot.setAttribute('fill', color);\r\n        \r\n        // Highlight selected nodule with a thicker stroke\r\n        if (selectedNoduleId === nodule.id) {\r\n          circle.setAttribute('stroke-width', '3');\r\n          circle.setAttribute('stroke-dasharray', '5,3');\r\n        }\r\n        \r\n        svg.appendChild(circle);\r\n        svg.appendChild(centerDot);\r\n      });\r\n      \r\n      overlay.appendChild(svg);\r\n      container.appendChild(overlay);\r\n    };\r\n\r\n    drawNodules();\r\n    \r\n    // Cleanup function\r\n    return () => {\r\n      const container = containerRef.current;\r\n      if (container) {\r\n        const overlay = container.querySelector('.nodule-overlay');\r\n        if (overlay) {\r\n          container.removeChild(overlay);\r\n        }\r\n      }\r\n    };\r\n  }, [sliceImage, nodulesInSlice, currentAxis, selectedNoduleId, volumeInfo]);\r\n\r\n  // Get max slice index for current axis\r\n  const getMaxSliceIndex = () => {\r\n    if (!volumeInfo) return 0;\r\n    \r\n    if (currentAxis === 'axial') {\r\n      return volumeInfo.dimensions.depth - 1;\r\n    } else if (currentAxis === 'coronal') {\r\n      return volumeInfo.dimensions.height - 1;\r\n    } else { // sagittal\r\n      return volumeInfo.dimensions.width - 1;\r\n    }\r\n  };\r\n\r\n  const handleAxisChange = (axis) => {\r\n    setCurrentAxis(axis);\r\n    // Reset to middle slice when changing axis\r\n    if (!volumeInfo) return;\r\n    \r\n    let middle;\r\n    if (axis === 'axial') {\r\n      middle = Math.floor(volumeInfo.dimensions.depth / 2);\r\n    } else if (axis === 'coronal') {\r\n      middle = Math.floor(volumeInfo.dimensions.height / 2);\r\n    } else { // sagittal\r\n      middle = Math.floor(volumeInfo.dimensions.width / 2);\r\n    }\r\n    \r\n    // Ensure we're setting a valid number, not NaN\r\n    if (!isNaN(middle) && middle >= 0) {\r\n      setCurrentSlice(middle);\r\n    }\r\n  };\r\n\r\n  const handleSliceChange = (e) => {\r\n    const value = parseInt(e.target.value, 10);\r\n    // Validate before setting\r\n    if (!isNaN(value) && value >= 0 && value <= getMaxSliceIndex()) {\r\n      setCurrentSlice(value);\r\n    }\r\n  };\r\n\r\n  // Track which slices have nodules to highlight them on the slider\r\n  const slicesWithNodules = () => {\r\n    if (!volumeInfo || !volumeInfo.nodules) return [];\r\n    \r\n    const noduleSlices = new Set();\r\n    volumeInfo.nodules.forEach(nodule => {\r\n      if (currentAxis === 'axial') {\r\n        // Mark all slices within the nodule's radius\r\n        const start = Math.max(0, Math.floor(nodule.z - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.depth - 1, Math.ceil(nodule.z + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      } else if (currentAxis === 'coronal') {\r\n        const start = Math.max(0, Math.floor(nodule.y - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.height - 1, Math.ceil(nodule.y + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      } else { // sagittal\r\n        const start = Math.max(0, Math.floor(nodule.x - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.width - 1, Math.ceil(nodule.x + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      }\r\n    });\r\n    \r\n    return Array.from(noduleSlices);\r\n  };\r\n\r\n  // Nodule colors for different confidence levels\r\n  const getNoduleColor = (confidence) => {\r\n    if (confidence >= 0.8) return 'rgba(220, 38, 38, 0.8)';  // Red for high confidence\r\n    if (confidence >= 0.6) return 'rgba(234, 88, 12, 0.8)';  // Orange for medium confidence\r\n    return 'rgba(234, 179, 8, 0.8)';  // Yellow for lower confidence\r\n  };\r\n\r\n  return (\r\n    <div className={`relative w-full h-full ${resultsPageView ? 'results-page-view' : ''}`} ref={containerRef}>\r\n      {/* If in results page mode, only show the image without controls */}\r\n      {resultsPageView ? (\r\n        <>\r\n          {isLoading ? (\r\n            <div className=\"flex items-center justify-center w-full h-full bg-gray-200\">\r\n              <ArrowPathIcon className=\"h-8 w-8 animate-spin text-gray-400\" />\r\n            </div>\r\n          ) : error ? (\r\n            <div className=\"flex items-center justify-center w-full h-full bg-gray-200\">\r\n              <div className=\"text-center p-4\">\r\n                <ExclamationCircleIcon className=\"h-8 w-8 mx-auto mb-2 text-red-500\" />\r\n                <p className=\"text-sm text-gray-600\">Error loading scan</p>\r\n              </div>\r\n            </div>\r\n          ) : sliceImage ? (\r\n            <div className=\"w-full h-full overflow-hidden relative\">\r\n              <div className=\"flex items-center justify-center h-full\">\r\n                <img \r\n                  ref={imageRef}\r\n                  src={sliceImage.data} \r\n                  alt={`Axial view of scan ${caseId}`}\r\n                  className=\"object-contain max-h-full max-w-full\"\r\n                  style={{ \r\n                    objectPosition: 'center center',\r\n                    maxHeight: '260px'\r\n                  }}\r\n                />\r\n              </div>\r\n              {sliceImage.isPlaceholder && (\r\n                <div className=\"absolute bottom-0 left-0 right-0 bg-red-500 bg-opacity-70 text-white text-center py-1 text-sm\">\r\n                  Placeholder Image - Scan Data Unavailable\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className=\"flex items-center justify-center w-full h-full bg-gray-200\">\r\n              <p className=\"text-sm text-gray-500\">No image available</p>\r\n            </div>\r\n          )}\r\n        </>\r\n      ) : (\r\n        // Original interactive viewer with all controls for the detail page\r\n        <>\r\n          {/* Axis selection */}\r\n          <div className={`absolute top-2 left-2 z-10 rounded-lg shadow-md ${darkMode ? 'bg-gray-800' : 'bg-white'}`}>\r\n            <div className=\"flex p-1 space-x-1\">\r\n              <button\r\n                onClick={() => handleAxisChange('axial')}\r\n                className={`px-3 py-1.5 text-xs font-medium rounded-md ${\r\n                  currentAxis === 'axial' \r\n                    ? darkMode\r\n                      ? 'bg-indigo-600 text-white'\r\n                      : 'bg-indigo-100 text-indigo-700'\r\n                    : darkMode\r\n                      ? 'text-gray-300 hover:bg-gray-700'\r\n                      : 'text-gray-700 hover:bg-gray-100'\r\n                }`}\r\n              >\r\n                Axial\r\n              </button>\r\n              <button\r\n                onClick={() => handleAxisChange('coronal')}\r\n                className={`px-3 py-1.5 text-xs font-medium rounded-md ${\r\n                  currentAxis === 'coronal' \r\n                    ? darkMode\r\n                      ? 'bg-indigo-600 text-white'\r\n                      : 'bg-indigo-100 text-indigo-700'\r\n                    : darkMode\r\n                      ? 'text-gray-300 hover:bg-gray-700'\r\n                      : 'text-gray-700 hover:bg-gray-100'\r\n                }`}\r\n              >\r\n                Coronal\r\n              </button>\r\n              <button\r\n                onClick={() => handleAxisChange('sagittal')}\r\n                className={`px-3 py-1.5 text-xs font-medium rounded-md ${\r\n                  currentAxis === 'sagittal' \r\n                    ? darkMode\r\n                      ? 'bg-indigo-600 text-white'\r\n                      : 'bg-indigo-100 text-indigo-700'\r\n                    : darkMode\r\n                      ? 'text-gray-300 hover:bg-gray-700'\r\n                      : 'text-gray-700 hover:bg-gray-100'\r\n                }`}\r\n              >\r\n                Sagittal\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Slice slider */}\r\n          <div className={`absolute bottom-2 left-1/2 transform -translate-x-1/2 z-10 p-2 rounded-lg shadow-md ${darkMode ? 'bg-gray-800' : 'bg-white'}`} style={{ width: '90%', maxWidth: '400px' }}>\r\n            <input \r\n              type=\"range\"\r\n              min=\"0\"\r\n              max={getMaxSliceIndex()}\r\n              value={currentSlice}\r\n              onChange={handleSliceChange}\r\n              className=\"w-full h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"\r\n            />\r\n            <div className=\"flex justify-between text-xs mt-1\">\r\n              <span className={darkMode ? 'text-gray-400' : 'text-gray-500'}>Slice: {currentSlice + 1}/{getMaxSliceIndex() + 1}</span>\r\n              <span className={darkMode ? 'text-gray-400' : 'text-gray-500'}>\r\n                {slicesWithNodules().includes(currentSlice) ? '🔴 Nodule present' : ''}\r\n                {sliceImage && sliceImage.isPlaceholder ? '⚠️ Placeholder' : ''}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Main image display */}\r\n          <div className=\"w-full h-full relative\">\r\n            {sliceImage ? (\r\n              <div className=\"relative w-full h-full\">\r\n                <img \r\n                  ref={imageRef}\r\n                  src={sliceImage.data} \r\n                  alt={`${currentAxis.charAt(0).toUpperCase() + currentAxis.slice(1)} slice of CT scan`}\r\n                  className=\"w-full h-full object-contain\"\r\n                />\r\n                {sliceImage.isPlaceholder && (\r\n                  <div className=\"absolute bottom-0 left-0 right-0 bg-red-500 bg-opacity-70 text-white text-center py-1 text-sm\">\r\n                    Placeholder Image - Scan Data Unavailable\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <div className=\"flex items-center justify-center w-full h-full bg-gray-200\">\r\n                <p className=\"text-sm text-gray-500\">No image available</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InteractiveViewer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}