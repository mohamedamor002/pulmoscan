{"ast":null,"code":"var _jsxFileName = \"D:\\\\Segmentation\\\\pipeline\\\\webapp\\\\static\\\\src\\\\components\\\\InteractiveViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { ArrowPathIcon, ExclamationCircleIcon } from '@heroicons/react/24/outline';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst InteractiveViewer = ({\n  caseId\n}) => {\n  _s();\n  const [volumeInfo, setVolumeInfo] = useState(null);\n  const [currentAxis, setCurrentAxis] = useState('axial');\n  const [currentSlice, setCurrentSlice] = useState(0);\n  const [sliceImage, setSliceImage] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [nodulesInSlice, setNodulesInSlice] = useState([]);\n  const canvasRef = useRef(null);\n\n  // Fetch volume metadata\n  useEffect(() => {\n    const fetchVolumeInfo = async () => {\n      try {\n        setIsLoading(true);\n        const response = await axios.get(`/api/results/${caseId}/slices`);\n        setVolumeInfo(response.data.volume_info);\n\n        // Set initial slice to middle of volume\n        const initialSlice = Math.floor(response.data.volume_info.dimensions.depth / 2);\n        setCurrentSlice(initialSlice);\n        setIsLoading(false);\n      } catch (error) {\n        var _error$response, _error$response$data;\n        console.error('Error fetching volume info:', error);\n        setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to load volume data');\n        setIsLoading(false);\n      }\n    };\n    fetchVolumeInfo();\n  }, [caseId]);\n\n  // Fetch slice when axis or slice index changes\n  useEffect(() => {\n    const fetchSlice = async () => {\n      if (!volumeInfo) return;\n      try {\n        setIsLoading(true);\n        const response = await axios.get(`/api/results/${caseId}/slices/${currentAxis}/${currentSlice}`);\n        setSliceImage(response.data.slice_data);\n        setIsLoading(false);\n      } catch (error) {\n        var _error$response2, _error$response2$data;\n        console.error('Error fetching slice:', error);\n        setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to load slice');\n        setIsLoading(false);\n      }\n    };\n    fetchSlice();\n  }, [caseId, currentAxis, currentSlice, volumeInfo]);\n\n  // Find nodules in the current slice\n  useEffect(() => {\n    if (!volumeInfo || !volumeInfo.nodules) return;\n\n    // Determine which nodules are visible in this slice\n    const sliceNodules = volumeInfo.nodules.filter(nodule => {\n      // Check if this nodule is visible in the current slice\n      if (currentAxis === 'axial') {\n        // Check if the nodule's z-coordinate is close to this slice\n        return Math.abs(nodule.z - currentSlice) <= nodule.radius;\n      } else if (currentAxis === 'coronal') {\n        // Check if the nodule's y-coordinate is close to this slice\n        return Math.abs(nodule.y - currentSlice) <= nodule.radius;\n      } else {\n        // sagittal\n        // Check if the nodule's x-coordinate is close to this slice\n        return Math.abs(nodule.x - currentSlice) <= nodule.radius;\n      }\n    });\n    setNodulesInSlice(sliceNodules);\n  }, [volumeInfo, currentAxis, currentSlice]);\n\n  // Get max slice index for current axis\n  const getMaxSliceIndex = () => {\n    if (!volumeInfo) return 0;\n    if (currentAxis === 'axial') {\n      return volumeInfo.dimensions.depth - 1;\n    } else if (currentAxis === 'coronal') {\n      return volumeInfo.dimensions.height - 1;\n    } else {\n      // sagittal\n      return volumeInfo.dimensions.width - 1;\n    }\n  };\n  const handleAxisChange = axis => {\n    setCurrentAxis(axis);\n    // Reset to middle slice when changing axis\n    const middle = Math.floor(axis === 'axial' ? volumeInfo.dimensions.depth / 2 : axis === 'coronal' ? volumeInfo.dimensions.height / 2 : volumeInfo.dimensions.width / 2);\n    setCurrentSlice(middle);\n  };\n  const handleSliceChange = e => {\n    setCurrentSlice(parseInt(e.target.value, 10));\n  };\n\n  // Track which slices have nodules to highlight them on the slider\n  const slicesWithNodules = () => {\n    if (!volumeInfo || !volumeInfo.nodules) return [];\n    const noduleSlices = new Set();\n    volumeInfo.nodules.forEach(nodule => {\n      if (currentAxis === 'axial') {\n        // Mark all slices within the nodule's radius\n        const start = Math.max(0, Math.floor(nodule.z - nodule.radius));\n        const end = Math.min(volumeInfo.dimensions.depth - 1, Math.ceil(nodule.z + nodule.radius));\n        for (let i = start; i <= end; i++) {\n          noduleSlices.add(i);\n        }\n      } else if (currentAxis === 'coronal') {\n        const start = Math.max(0, Math.floor(nodule.y - nodule.radius));\n        const end = Math.min(volumeInfo.dimensions.height - 1, Math.ceil(nodule.y + nodule.radius));\n        for (let i = start; i <= end; i++) {\n          noduleSlices.add(i);\n        }\n      } else {\n        // sagittal\n        const start = Math.max(0, Math.floor(nodule.x - nodule.radius));\n        const end = Math.min(volumeInfo.dimensions.width - 1, Math.ceil(nodule.x + nodule.radius));\n        for (let i = start; i <= end; i++) {\n          noduleSlices.add(i);\n        }\n      }\n    });\n    return Array.from(noduleSlices);\n  };\n\n  // Nodule colors for different confidence levels\n  const getNoduleColor = confidence => {\n    if (confidence >= 0.8) return 'rgba(220, 38, 38, 0.8)'; // Red for high confidence\n    if (confidence >= 0.6) return 'rgba(234, 88, 12, 0.8)'; // Orange for medium confidence\n    return 'rgba(234, 179, 8, 0.8)'; // Yellow for lower confidence\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-red-50 p-4 rounded-md\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex\",\n        children: [/*#__PURE__*/_jsxDEV(ExclamationCircleIcon, {\n          className: \"h-5 w-5 text-red-400\",\n          \"aria-hidden\": \"true\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-sm font-medium text-red-800\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-2 text-sm text-red-700\",\n            children: \"Interactive visualization is not available. Please refer to the static image results.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this);\n  }\n  if (isLoading && !volumeInfo) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-indigo-600 border-r-transparent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-4 text-gray-600\",\n        children: \"Loading volume data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white shadow rounded-lg overflow-hidden\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-4 py-5 border-b border-gray-200 sm:px-6 flex justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-medium text-gray-900\",\n        children: \"Interactive Visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAxisChange('axial'),\n          className: `px-3 py-1 rounded-md text-sm font-medium ${currentAxis === 'axial' ? 'bg-indigo-600 text-white' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`,\n          children: \"Axial\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAxisChange('coronal'),\n          className: `px-3 py-1 rounded-md text-sm font-medium ${currentAxis === 'coronal' ? 'bg-indigo-600 text-white' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`,\n          children: \"Coronal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAxisChange('sagittal'),\n          className: `px-3 py-1 rounded-md text-sm font-medium ${currentAxis === 'sagittal' ? 'bg-indigo-600 text-white' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`,\n          children: \"Sagittal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 text-sm text-gray-600\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Interactive visualization shows CT scan slices with detected nodules highlighted. Navigate through slices using the controls.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"mt-2 list-disc pl-5 space-y-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Blue markers on slider: Slices containing nodules\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Colored circles: Detected nodules (color indicates confidence level)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Use slider or buttons to navigate slices and jump between nodules\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"View planes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this), \":\", /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"ml-2 mt-1\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Axial: Top-down view (transverse plane)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Coronal: Front-to-back view (rotated for better orientation)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Sagittal: Side view (left-to-right)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col lg:flex-row gap-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-1 relative max-w-4xl mx-auto lg:mx-0\",\n          children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute inset-0 flex items-center justify-center bg-gray-100 rounded-md\",\n            children: /*#__PURE__*/_jsxDEV(ArrowPathIcon, {\n              className: \"h-8 w-8 text-indigo-500 animate-spin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: sliceImage && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"relative\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: sliceImage,\n                alt: `${currentAxis} slice ${currentSlice}`,\n                className: \"w-full rounded-md shadow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n                className: \"absolute top-0 left-0 w-full h-full\",\n                ref: canvasRef,\n                style: {\n                  pointerEvents: 'none'\n                },\n                children: nodulesInSlice.map((nodule, index) => {\n                  // Calculate position based on axis\n                  let x, y, radius;\n                  if (currentAxis === 'axial') {\n                    // Project to axial view (y, x coordinates)\n                    x = nodule.x;\n                    y = nodule.y;\n                    // Calculate projected radius based on distance from slice\n                    const distanceFromSlice = Math.abs(nodule.z - currentSlice);\n                    const scaleFactor = 1 - distanceFromSlice / nodule.radius;\n                    radius = nodule.radius * scaleFactor;\n                  } else if (currentAxis === 'coronal') {\n                    // Project to coronal view (z, x coordinates)\n                    x = nodule.x;\n                    y = nodule.z;\n                    const distanceFromSlice = Math.abs(nodule.y - currentSlice);\n                    const scaleFactor = 1 - distanceFromSlice / nodule.radius;\n                    radius = nodule.radius * scaleFactor;\n                  } else {\n                    // sagittal\n                    // Project to sagittal view (z, y coordinates)\n                    x = nodule.y;\n                    y = nodule.z;\n                    const distanceFromSlice = Math.abs(nodule.x - currentSlice);\n                    const scaleFactor = 1 - distanceFromSlice / nodule.radius;\n                    radius = nodule.radius * scaleFactor;\n                  }\n\n                  // Convert to view coordinates (percentage of image)\n                  const imgWidth = currentAxis === 'axial' ? volumeInfo.dimensions.width : currentAxis === 'coronal' ? volumeInfo.dimensions.width : volumeInfo.dimensions.height;\n                  const imgHeight = currentAxis === 'axial' ? volumeInfo.dimensions.height : volumeInfo.dimensions.depth;\n                  const xPercent = x / imgWidth * 100;\n                  const yPercent = y / imgHeight * 100;\n\n                  // Size as percentage of image\n                  const radiusPercent = radius / Math.min(imgWidth, imgHeight) * 100;\n                  return /*#__PURE__*/_jsxDEV(\"g\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                      cx: `${xPercent}%`,\n                      cy: `${yPercent}%`,\n                      r: `${radiusPercent}%`,\n                      stroke: getNoduleColor(nodule.confidence),\n                      strokeWidth: \"2\",\n                      fill: \"transparent\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 301,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                      x: `${xPercent}%`,\n                      y: `${yPercent - radiusPercent - 1}%`,\n                      textAnchor: \"middle\",\n                      fill: getNoduleColor(nodule.confidence),\n                      fontSize: \"12\",\n                      fontWeight: \"bold\",\n                      children: [nodule.id, \" (\", nodule.confidence.toFixed(2), \")\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 309,\n                      columnNumber: 29\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 300,\n                    columnNumber: 27\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 19\n            }, this)\n          }, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lg:w-72 flex-shrink-0\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-50 p-4 rounded-md sticky top-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"font-medium text-gray-900 mb-2\",\n              children: \"Slice Navigation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"block text-sm font-medium text-gray-700 mb-1\",\n                children: [\"Slice: \", currentSlice, \" / \", getMaxSliceIndex()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"range\",\n                  min: \"0\",\n                  max: getMaxSliceIndex(),\n                  value: currentSlice,\n                  onChange: handleSliceChange,\n                  className: \"w-full\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 339,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"relative mt-2 h-2 bg-gray-200 rounded-full\",\n                children: slicesWithNodules().map(sliceIndex => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"absolute h-2 w-1 bg-red-500 rounded-full\",\n                  style: {\n                    left: `${sliceIndex / getMaxSliceIndex() * 100}%`,\n                    transform: 'translateX(-50%)'\n                  }\n                }, sliceIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 351,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-xs text-gray-500 mt-1\",\n                children: \"Red marks indicate slices containing nodules\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setCurrentSlice(Math.max(0, currentSlice - 1)),\n                disabled: currentSlice === 0,\n                className: \"px-2 py-1 bg-gray-200 rounded text-sm disabled:opacity-50\",\n                children: \"Previous\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  // Find the nearest slice with a nodule\n                  const nodulesSlices = slicesWithNodules();\n                  if (nodulesSlices.length > 0) {\n                    // Find the next slice with a nodule\n                    const nextNoduleSlice = nodulesSlices.find(s => s > currentSlice);\n                    if (nextNoduleSlice !== undefined) {\n                      setCurrentSlice(nextNoduleSlice);\n                    } else {\n                      // Wrap around to first slice with nodule\n                      setCurrentSlice(nodulesSlices[0]);\n                    }\n                  }\n                },\n                disabled: slicesWithNodules().length === 0,\n                className: \"px-2 py-1 bg-indigo-100 text-indigo-700 rounded text-sm disabled:opacity-50\",\n                children: \"Jump to Nodule\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setCurrentSlice(Math.min(getMaxSliceIndex(), currentSlice + 1)),\n                disabled: currentSlice === getMaxSliceIndex(),\n                className: \"px-2 py-1 bg-gray-200 rounded text-sm disabled:opacity-50\",\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"font-medium text-gray-900 mb-2\",\n                children: [\"Nodules in Slice: \", nodulesInSlice.length]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 17\n              }, this), nodulesInSlice.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                className: \"space-y-2 max-h-40 overflow-y-auto\",\n                children: nodulesInSlice.map((nodule, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"text-sm\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"flex items-center\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"w-3 h-3 rounded-full mr-2\",\n                      style: {\n                        backgroundColor: getNoduleColor(nodule.confidence)\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 414,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"font-medium\",\n                      children: nodule.id\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 418,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 413,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"ml-5 text-xs text-gray-500\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [\"Confidence: \", nodule.confidence.toFixed(2)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 421,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [\"Radius: \", nodule.radius.toFixed(2), \"mm\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 422,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [\"Position: (\", nodule.x.toFixed(1), \", \", nodule.y.toFixed(1), \", \", nodule.z.toFixed(1), \")\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 423,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 420,\n                    columnNumber: 25\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 412,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm text-gray-500\",\n                children: \"No nodules in this slice\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 429,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(InteractiveViewer, \"W99f3QaToFPNpb9Wd9fR5AVVj6s=\");\n_c = InteractiveViewer;\nexport default InteractiveViewer;\nvar _c;\n$RefreshReg$(_c, \"InteractiveViewer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","ArrowPathIcon","ExclamationCircleIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","InteractiveViewer","caseId","_s","volumeInfo","setVolumeInfo","currentAxis","setCurrentAxis","currentSlice","setCurrentSlice","sliceImage","setSliceImage","isLoading","setIsLoading","error","setError","nodulesInSlice","setNodulesInSlice","canvasRef","fetchVolumeInfo","response","get","data","volume_info","initialSlice","Math","floor","dimensions","depth","_error$response","_error$response$data","console","message","fetchSlice","slice_data","_error$response2","_error$response2$data","nodules","sliceNodules","filter","nodule","abs","z","radius","y","x","getMaxSliceIndex","height","width","handleAxisChange","axis","middle","handleSliceChange","e","parseInt","target","value","slicesWithNodules","noduleSlices","Set","forEach","start","max","end","min","ceil","i","add","Array","from","getNoduleColor","confidence","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","ref","style","pointerEvents","map","index","distanceFromSlice","scaleFactor","imgWidth","imgHeight","xPercent","yPercent","radiusPercent","cx","cy","r","stroke","strokeWidth","fill","textAnchor","fontSize","fontWeight","id","toFixed","type","onChange","sliceIndex","left","transform","disabled","nodulesSlices","length","nextNoduleSlice","find","s","undefined","backgroundColor","_c","$RefreshReg$"],"sources":["D:/Segmentation/pipeline/webapp/static/src/components/InteractiveViewer.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { ArrowPathIcon, ExclamationCircleIcon } from '@heroicons/react/24/outline';\r\n\r\nconst InteractiveViewer = ({ caseId }) => {\r\n  const [volumeInfo, setVolumeInfo] = useState(null);\r\n  const [currentAxis, setCurrentAxis] = useState('axial');\r\n  const [currentSlice, setCurrentSlice] = useState(0);\r\n  const [sliceImage, setSliceImage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [nodulesInSlice, setNodulesInSlice] = useState([]);\r\n  const canvasRef = useRef(null);\r\n\r\n  // Fetch volume metadata\r\n  useEffect(() => {\r\n    const fetchVolumeInfo = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const response = await axios.get(`/api/results/${caseId}/slices`);\r\n        setVolumeInfo(response.data.volume_info);\r\n        \r\n        // Set initial slice to middle of volume\r\n        const initialSlice = Math.floor(response.data.volume_info.dimensions.depth / 2);\r\n        setCurrentSlice(initialSlice);\r\n        \r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching volume info:', error);\r\n        setError(error.response?.data?.message || 'Failed to load volume data');\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchVolumeInfo();\r\n  }, [caseId]);\r\n\r\n  // Fetch slice when axis or slice index changes\r\n  useEffect(() => {\r\n    const fetchSlice = async () => {\r\n      if (!volumeInfo) return;\r\n      \r\n      try {\r\n        setIsLoading(true);\r\n        const response = await axios.get(`/api/results/${caseId}/slices/${currentAxis}/${currentSlice}`);\r\n        setSliceImage(response.data.slice_data);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching slice:', error);\r\n        setError(error.response?.data?.message || 'Failed to load slice');\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchSlice();\r\n  }, [caseId, currentAxis, currentSlice, volumeInfo]);\r\n\r\n  // Find nodules in the current slice\r\n  useEffect(() => {\r\n    if (!volumeInfo || !volumeInfo.nodules) return;\r\n    \r\n    // Determine which nodules are visible in this slice\r\n    const sliceNodules = volumeInfo.nodules.filter(nodule => {\r\n      // Check if this nodule is visible in the current slice\r\n      if (currentAxis === 'axial') {\r\n        // Check if the nodule's z-coordinate is close to this slice\r\n        return Math.abs(nodule.z - currentSlice) <= nodule.radius;\r\n      } else if (currentAxis === 'coronal') {\r\n        // Check if the nodule's y-coordinate is close to this slice\r\n        return Math.abs(nodule.y - currentSlice) <= nodule.radius;\r\n      } else { // sagittal\r\n        // Check if the nodule's x-coordinate is close to this slice\r\n        return Math.abs(nodule.x - currentSlice) <= nodule.radius;\r\n      }\r\n    });\r\n    \r\n    setNodulesInSlice(sliceNodules);\r\n  }, [volumeInfo, currentAxis, currentSlice]);\r\n\r\n  // Get max slice index for current axis\r\n  const getMaxSliceIndex = () => {\r\n    if (!volumeInfo) return 0;\r\n    \r\n    if (currentAxis === 'axial') {\r\n      return volumeInfo.dimensions.depth - 1;\r\n    } else if (currentAxis === 'coronal') {\r\n      return volumeInfo.dimensions.height - 1;\r\n    } else { // sagittal\r\n      return volumeInfo.dimensions.width - 1;\r\n    }\r\n  };\r\n\r\n  const handleAxisChange = (axis) => {\r\n    setCurrentAxis(axis);\r\n    // Reset to middle slice when changing axis\r\n    const middle = Math.floor(\r\n      axis === 'axial' \r\n        ? volumeInfo.dimensions.depth / 2\r\n        : axis === 'coronal'\r\n          ? volumeInfo.dimensions.height / 2\r\n          : volumeInfo.dimensions.width / 2\r\n    );\r\n    setCurrentSlice(middle);\r\n  };\r\n\r\n  const handleSliceChange = (e) => {\r\n    setCurrentSlice(parseInt(e.target.value, 10));\r\n  };\r\n\r\n  // Track which slices have nodules to highlight them on the slider\r\n  const slicesWithNodules = () => {\r\n    if (!volumeInfo || !volumeInfo.nodules) return [];\r\n    \r\n    const noduleSlices = new Set();\r\n    volumeInfo.nodules.forEach(nodule => {\r\n      if (currentAxis === 'axial') {\r\n        // Mark all slices within the nodule's radius\r\n        const start = Math.max(0, Math.floor(nodule.z - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.depth - 1, Math.ceil(nodule.z + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      } else if (currentAxis === 'coronal') {\r\n        const start = Math.max(0, Math.floor(nodule.y - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.height - 1, Math.ceil(nodule.y + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      } else { // sagittal\r\n        const start = Math.max(0, Math.floor(nodule.x - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.width - 1, Math.ceil(nodule.x + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      }\r\n    });\r\n    \r\n    return Array.from(noduleSlices);\r\n  };\r\n\r\n  // Nodule colors for different confidence levels\r\n  const getNoduleColor = (confidence) => {\r\n    if (confidence >= 0.8) return 'rgba(220, 38, 38, 0.8)';  // Red for high confidence\r\n    if (confidence >= 0.6) return 'rgba(234, 88, 12, 0.8)';  // Orange for medium confidence\r\n    return 'rgba(234, 179, 8, 0.8)';  // Yellow for lower confidence\r\n  };\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"bg-red-50 p-4 rounded-md\">\r\n        <div className=\"flex\">\r\n          <ExclamationCircleIcon className=\"h-5 w-5 text-red-400\" aria-hidden=\"true\" />\r\n          <div className=\"ml-3\">\r\n            <h3 className=\"text-sm font-medium text-red-800\">{error}</h3>\r\n            <p className=\"mt-2 text-sm text-red-700\">\r\n              Interactive visualization is not available. Please refer to the static image results.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isLoading && !volumeInfo) {\r\n    return (\r\n      <div className=\"text-center py-12\">\r\n        <div className=\"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-indigo-600 border-r-transparent\"></div>\r\n        <p className=\"mt-4 text-gray-600\">Loading volume data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white shadow rounded-lg overflow-hidden\">\r\n      <div className=\"px-4 py-5 border-b border-gray-200 sm:px-6 flex justify-between items-center\">\r\n        <h3 className=\"text-lg font-medium text-gray-900\">Interactive Visualization</h3>\r\n        \r\n        {/* Axis selection */}\r\n        <div className=\"flex space-x-2\">\r\n          <button\r\n            onClick={() => handleAxisChange('axial')}\r\n            className={`px-3 py-1 rounded-md text-sm font-medium ${\r\n              currentAxis === 'axial'\r\n                ? 'bg-indigo-600 text-white'\r\n                : 'bg-gray-200 text-gray-800 hover:bg-gray-300'\r\n            }`}\r\n          >\r\n            Axial\r\n          </button>\r\n          <button\r\n            onClick={() => handleAxisChange('coronal')}\r\n            className={`px-3 py-1 rounded-md text-sm font-medium ${\r\n              currentAxis === 'coronal'\r\n                ? 'bg-indigo-600 text-white'\r\n                : 'bg-gray-200 text-gray-800 hover:bg-gray-300'\r\n            }`}\r\n          >\r\n            Coronal\r\n          </button>\r\n          <button\r\n            onClick={() => handleAxisChange('sagittal')}\r\n            className={`px-3 py-1 rounded-md text-sm font-medium ${\r\n              currentAxis === 'sagittal'\r\n                ? 'bg-indigo-600 text-white'\r\n                : 'bg-gray-200 text-gray-800 hover:bg-gray-300'\r\n            }`}\r\n          >\r\n            Sagittal\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"p-6\">\r\n        {/* Description of view */}\r\n        <div className=\"mb-4 text-sm text-gray-600\">\r\n          <p>Interactive visualization shows CT scan slices with detected nodules highlighted. Navigate through slices using the controls.</p>\r\n          <ul className=\"mt-2 list-disc pl-5 space-y-1\">\r\n            <li>Blue markers on slider: Slices containing nodules</li>\r\n            <li>Colored circles: Detected nodules (color indicates confidence level)</li>\r\n            <li>Use slider or buttons to navigate slices and jump between nodules</li>\r\n            <li><strong>View planes</strong>: \r\n              <ul className=\"ml-2 mt-1\">\r\n                <li>Axial: Top-down view (transverse plane)</li>\r\n                <li>Coronal: Front-to-back view (rotated for better orientation)</li>\r\n                <li>Sagittal: Side view (left-to-right)</li>\r\n              </ul>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        \r\n        {/* Slice viewer */}\r\n        <div className=\"flex flex-col lg:flex-row gap-6\">\r\n          {/* Slice image */}\r\n          <div className=\"flex-1 relative max-w-4xl mx-auto lg:mx-0\">\r\n            {isLoading ? (\r\n              <div className=\"absolute inset-0 flex items-center justify-center bg-gray-100 rounded-md\">\r\n                <ArrowPathIcon className=\"h-8 w-8 text-indigo-500 animate-spin\" />\r\n              </div>\r\n            ) : (\r\n              <>\r\n                {sliceImage && (\r\n                  <div className=\"relative\">\r\n                    <img\r\n                      src={sliceImage}\r\n                      alt={`${currentAxis} slice ${currentSlice}`}\r\n                      className=\"w-full rounded-md shadow\"\r\n                    />\r\n                    \r\n                    {/* Overlay SVG for nodules */}\r\n                    <svg\r\n                      className=\"absolute top-0 left-0 w-full h-full\"\r\n                      ref={canvasRef}\r\n                      style={{ pointerEvents: 'none' }}\r\n                    >\r\n                      {nodulesInSlice.map((nodule, index) => {\r\n                        // Calculate position based on axis\r\n                        let x, y, radius;\r\n                        if (currentAxis === 'axial') {\r\n                          // Project to axial view (y, x coordinates)\r\n                          x = nodule.x;\r\n                          y = nodule.y;\r\n                          // Calculate projected radius based on distance from slice\r\n                          const distanceFromSlice = Math.abs(nodule.z - currentSlice);\r\n                          const scaleFactor = 1 - (distanceFromSlice / nodule.radius);\r\n                          radius = nodule.radius * scaleFactor;\r\n                        } else if (currentAxis === 'coronal') {\r\n                          // Project to coronal view (z, x coordinates)\r\n                          x = nodule.x;\r\n                          y = nodule.z;\r\n                          const distanceFromSlice = Math.abs(nodule.y - currentSlice);\r\n                          const scaleFactor = 1 - (distanceFromSlice / nodule.radius);\r\n                          radius = nodule.radius * scaleFactor;\r\n                        } else { // sagittal\r\n                          // Project to sagittal view (z, y coordinates)\r\n                          x = nodule.y;\r\n                          y = nodule.z;\r\n                          const distanceFromSlice = Math.abs(nodule.x - currentSlice);\r\n                          const scaleFactor = 1 - (distanceFromSlice / nodule.radius);\r\n                          radius = nodule.radius * scaleFactor;\r\n                        }\r\n                        \r\n                        // Convert to view coordinates (percentage of image)\r\n                        const imgWidth = currentAxis === 'axial' ? \r\n                          volumeInfo.dimensions.width : \r\n                          currentAxis === 'coronal' ? \r\n                            volumeInfo.dimensions.width : \r\n                            volumeInfo.dimensions.height;\r\n                            \r\n                        const imgHeight = currentAxis === 'axial' ? \r\n                          volumeInfo.dimensions.height : \r\n                          volumeInfo.dimensions.depth;\r\n                        \r\n                        const xPercent = (x / imgWidth) * 100;\r\n                        const yPercent = (y / imgHeight) * 100;\r\n                        \r\n                        // Size as percentage of image\r\n                        const radiusPercent = (radius / Math.min(imgWidth, imgHeight)) * 100;\r\n                        \r\n                        return (\r\n                          <g key={index}>\r\n                            <circle\r\n                              cx={`${xPercent}%`}\r\n                              cy={`${yPercent}%`}\r\n                              r={`${radiusPercent}%`}\r\n                              stroke={getNoduleColor(nodule.confidence)}\r\n                              strokeWidth=\"2\"\r\n                              fill=\"transparent\"\r\n                            />\r\n                            <text\r\n                              x={`${xPercent}%`}\r\n                              y={`${yPercent - radiusPercent - 1}%`}\r\n                              textAnchor=\"middle\"\r\n                              fill={getNoduleColor(nodule.confidence)}\r\n                              fontSize=\"12\"\r\n                              fontWeight=\"bold\"\r\n                            >\r\n                              {nodule.id} ({nodule.confidence.toFixed(2)})\r\n                            </text>\r\n                          </g>\r\n                        );\r\n                      })}\r\n                    </svg>\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n          \r\n          {/* Slice controls and nodule info */}\r\n          <div className=\"lg:w-72 flex-shrink-0\">\r\n            <div className=\"bg-gray-50 p-4 rounded-md sticky top-4\">\r\n              <h4 className=\"font-medium text-gray-900 mb-2\">Slice Navigation</h4>\r\n              \r\n              <div className=\"mb-4\">\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Slice: {currentSlice} / {getMaxSliceIndex()}\r\n                </label>\r\n                <div className=\"flex items-center\">\r\n                  <input\r\n                    type=\"range\"\r\n                    min=\"0\"\r\n                    max={getMaxSliceIndex()}\r\n                    value={currentSlice}\r\n                    onChange={handleSliceChange}\r\n                    className=\"w-full\"\r\n                  />\r\n                </div>\r\n                <div className=\"relative mt-2 h-2 bg-gray-200 rounded-full\">\r\n                  {/* Highlight slices with nodules */}\r\n                  {slicesWithNodules().map(sliceIndex => (\r\n                    <div\r\n                      key={sliceIndex}\r\n                      className=\"absolute h-2 w-1 bg-red-500 rounded-full\"\r\n                      style={{\r\n                        left: `${(sliceIndex / getMaxSliceIndex()) * 100}%`,\r\n                        transform: 'translateX(-50%)'\r\n                      }}\r\n                    />\r\n                  ))}\r\n                </div>\r\n                <p className=\"text-xs text-gray-500 mt-1\">\r\n                  Red marks indicate slices containing nodules\r\n                </p>\r\n              </div>\r\n              \r\n              {/* Navigation buttons */}\r\n              <div className=\"flex justify-between mb-4\">\r\n                <button\r\n                  onClick={() => setCurrentSlice(Math.max(0, currentSlice - 1))}\r\n                  disabled={currentSlice === 0}\r\n                  className=\"px-2 py-1 bg-gray-200 rounded text-sm disabled:opacity-50\"\r\n                >\r\n                  Previous\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    // Find the nearest slice with a nodule\r\n                    const nodulesSlices = slicesWithNodules();\r\n                    if (nodulesSlices.length > 0) {\r\n                      // Find the next slice with a nodule\r\n                      const nextNoduleSlice = nodulesSlices.find(s => s > currentSlice);\r\n                      if (nextNoduleSlice !== undefined) {\r\n                        setCurrentSlice(nextNoduleSlice);\r\n                      } else {\r\n                        // Wrap around to first slice with nodule\r\n                        setCurrentSlice(nodulesSlices[0]);\r\n                      }\r\n                    }\r\n                  }}\r\n                  disabled={slicesWithNodules().length === 0}\r\n                  className=\"px-2 py-1 bg-indigo-100 text-indigo-700 rounded text-sm disabled:opacity-50\"\r\n                >\r\n                  Jump to Nodule\r\n                </button>\r\n                <button\r\n                  onClick={() => setCurrentSlice(Math.min(getMaxSliceIndex(), currentSlice + 1))}\r\n                  disabled={currentSlice === getMaxSliceIndex()}\r\n                  className=\"px-2 py-1 bg-gray-200 rounded text-sm disabled:opacity-50\"\r\n                >\r\n                  Next\r\n                </button>\r\n              </div>\r\n              \r\n              {/* Nodules in current slice */}\r\n              <div>\r\n                <h4 className=\"font-medium text-gray-900 mb-2\">\r\n                  Nodules in Slice: {nodulesInSlice.length}\r\n                </h4>\r\n                {nodulesInSlice.length > 0 ? (\r\n                  <ul className=\"space-y-2 max-h-40 overflow-y-auto\">\r\n                    {nodulesInSlice.map((nodule, index) => (\r\n                      <li key={index} className=\"text-sm\">\r\n                        <div className=\"flex items-center\">\r\n                          <div\r\n                            className=\"w-3 h-3 rounded-full mr-2\"\r\n                            style={{ backgroundColor: getNoduleColor(nodule.confidence) }}\r\n                          />\r\n                          <span className=\"font-medium\">{nodule.id}</span>\r\n                        </div>\r\n                        <div className=\"ml-5 text-xs text-gray-500\">\r\n                          <div>Confidence: {nodule.confidence.toFixed(2)}</div>\r\n                          <div>Radius: {nodule.radius.toFixed(2)}mm</div>\r\n                          <div>Position: ({nodule.x.toFixed(1)}, {nodule.y.toFixed(1)}, {nodule.z.toFixed(1)})</div>\r\n                        </div>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                ) : (\r\n                  <p className=\"text-sm text-gray-500\">No nodules in this slice</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InteractiveViewer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}