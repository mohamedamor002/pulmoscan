{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import axios from'axios';// Create auth context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();// Custom hook to use the auth context\nexport const useAuth=()=>useContext(AuthContext);// Role hierarchy definition\nexport const ROLES={SUPERADMIN:'superadmin',ADMIN:'admin',DOCTOR:'doctor'};// Role permissions check helpers\nexport const canManageAdmins=role=>role===ROLES.SUPERADMIN;export const canManageDoctors=role=>[ROLES.SUPERADMIN,ROLES.ADMIN].includes(role);export const canAccessAdminArea=role=>[ROLES.SUPERADMIN,ROLES.ADMIN].includes(role);// Auth provider component\nexport const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isAuthenticated,setIsAuthenticated]=useState(false);const[isLoading,setIsLoading]=useState(true);// Initialize auth state from local storage\nuseEffect(()=>{const token=localStorage.getItem('token');const userData=localStorage.getItem('user');if(token&&userData){setUser(JSON.parse(userData));setIsAuthenticated(true);// Set the authorization header for all requests\naxios.defaults.headers.common['Authorization']=`Bearer ${token}`;}setIsLoading(false);},[]);// Login function\nconst login=async(username,password)=>{try{const response=await axios.post('/api/auth/login',{username,password});const{access_token,username:user,role}=response.data;// Build user object with all available data\nconst userObject={username,role,// Include any other fields from the response\nfirstName:response.data.first_name||'',lastName:response.data.last_name||'',email:response.data.email||''};// Store token and user data\nlocalStorage.setItem('token',access_token);localStorage.setItem('user',JSON.stringify(userObject));// Set the authorization header for all requests\naxios.defaults.headers.common['Authorization']=`Bearer ${access_token}`;// Update state\nsetUser(userObject);setIsAuthenticated(true);return{success:true};}catch(error){var _error$response,_error$response$data;return{success:false,message:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.msg)||'Login failed. Please check your credentials.'};}};// Function to update the user context after profile changes\nconst updateUserContext=updatedFields=>{if(!user)return false;try{// Get current user data\nconst userData=JSON.parse(localStorage.getItem('user')||'{}');// Update with new fields\nconst updatedUser={...userData,...updatedFields};// Save to localStorage\nlocalStorage.setItem('user',JSON.stringify(updatedUser));// Update state\nsetUser(updatedUser);return true;}catch(error){console.error(\"Error updating user context:\",error);return false;}};// Logout function\nconst logout=()=>{// Remove token and user data\nlocalStorage.removeItem('token');localStorage.removeItem('user');// Remove the authorization header\ndelete axios.defaults.headers.common['Authorization'];// Update state\nsetUser(null);setIsAuthenticated(false);};// Check if user has specific role\nconst hasRole=requiredRole=>{if(!user)return false;// If required role is an array, check if user has any of the roles\nif(Array.isArray(requiredRole)){return requiredRole.includes(user.role);}// Otherwise check for specific role\nreturn user.role===requiredRole;};// Value to be provided to consumers\nconst value={user,isAuthenticated,isLoading,login,logout,updateUserContext,hasRole,canManageAdmins:user?canManageAdmins(user.role):false,canManageDoctors:user?canManageDoctors(user.role):false,canAccessAdminArea:user?canAccessAdminArea(user.role):false};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:!isLoading&&children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsx","_jsx","AuthContext","useAuth","ROLES","SUPERADMIN","ADMIN","DOCTOR","canManageAdmins","role","canManageDoctors","includes","canAccessAdminArea","AuthProvider","_ref","children","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","token","localStorage","getItem","userData","JSON","parse","defaults","headers","common","login","username","password","response","post","access_token","data","userObject","firstName","first_name","lastName","last_name","email","setItem","stringify","success","error","_error$response","_error$response$data","message","msg","updateUserContext","updatedFields","updatedUser","console","logout","removeItem","hasRole","requiredRole","Array","isArray","value","Provider"],"sources":["C:/Users/kouss/Desktop/Cursor/Segmentation/pipeline/webapp/static/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Create auth context\r\nconst AuthContext = createContext();\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n// Role hierarchy definition\r\nexport const ROLES = {\r\n  SUPERADMIN: 'superadmin',\r\n  ADMIN: 'admin',\r\n  DOCTOR: 'doctor'\r\n};\r\n\r\n// Role permissions check helpers\r\nexport const canManageAdmins = (role) => role === ROLES.SUPERADMIN;\r\nexport const canManageDoctors = (role) => [ROLES.SUPERADMIN, ROLES.ADMIN].includes(role);\r\nexport const canAccessAdminArea = (role) => [ROLES.SUPERADMIN, ROLES.ADMIN].includes(role);\r\n\r\n// Auth provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Initialize auth state from local storage\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const userData = localStorage.getItem('user');\r\n    \r\n    if (token && userData) {\r\n      setUser(JSON.parse(userData));\r\n      setIsAuthenticated(true);\r\n      \r\n      // Set the authorization header for all requests\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    \r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (username, password) => {\r\n    try {\r\n      const response = await axios.post('/api/auth/login', { username, password });\r\n      const { access_token, username: user, role } = response.data;\r\n      \r\n      // Build user object with all available data\r\n      const userObject = {\r\n        username,\r\n        role,\r\n        // Include any other fields from the response\r\n        firstName: response.data.first_name || '',\r\n        lastName: response.data.last_name || '',\r\n        email: response.data.email || ''\r\n      };\r\n      \r\n      // Store token and user data\r\n      localStorage.setItem('token', access_token);\r\n      localStorage.setItem('user', JSON.stringify(userObject));\r\n      \r\n      // Set the authorization header for all requests\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\r\n      \r\n      // Update state\r\n      setUser(userObject);\r\n      setIsAuthenticated(true);\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: error.response?.data?.msg || 'Login failed. Please check your credentials.'\r\n      };\r\n    }\r\n  };\r\n\r\n  // Function to update the user context after profile changes\r\n  const updateUserContext = (updatedFields) => {\r\n    if (!user) return false;\r\n    \r\n    try {\r\n      // Get current user data\r\n      const userData = JSON.parse(localStorage.getItem('user') || '{}');\r\n      \r\n      // Update with new fields\r\n      const updatedUser = {\r\n        ...userData,\r\n        ...updatedFields\r\n      };\r\n      \r\n      // Save to localStorage\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      \r\n      // Update state\r\n      setUser(updatedUser);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error updating user context:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    // Remove token and user data\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    \r\n    // Remove the authorization header\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    \r\n    // Update state\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  // Check if user has specific role\r\n  const hasRole = (requiredRole) => {\r\n    if (!user) return false;\r\n    \r\n    // If required role is an array, check if user has any of the roles\r\n    if (Array.isArray(requiredRole)) {\r\n      return requiredRole.includes(user.role);\r\n    }\r\n    \r\n    // Otherwise check for specific role\r\n    return user.role === requiredRole;\r\n  };\r\n\r\n  // Value to be provided to consumers\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    isLoading,\r\n    login,\r\n    logout,\r\n    updateUserContext,\r\n    hasRole,\r\n    canManageAdmins: user ? canManageAdmins(user.role) : false,\r\n    canManageDoctors: user ? canManageDoctors(user.role) : false,\r\n    canAccessAdminArea: user ? canAccessAdminArea(user.role) : false\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!isLoading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}