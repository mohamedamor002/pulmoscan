{"ast":null,"code":"var _jsxFileName = \"D:\\\\Segmentation\\\\pipeline\\\\webapp\\\\static\\\\src\\\\contexts\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const useTheme = () => {\n  _s();\n  return useContext(ThemeContext);\n};\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  // Check if user has a theme preference saved in localStorage\n  const [darkMode, setDarkMode] = useState(() => {\n    const savedTheme = localStorage.getItem('theme');\n    // If user has a saved preference, use it\n    if (savedTheme) {\n      return savedTheme === 'dark';\n    }\n    // Otherwise check for system preference\n    return window.matchMedia('(prefers-color-scheme: dark)').matches;\n  });\n\n  // Update localStorage and apply theme when darkMode changes\n  useEffect(() => {\n    localStorage.setItem('theme', darkMode ? 'dark' : 'light');\n    const root = window.document.documentElement;\n    if (darkMode) {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n  }, [darkMode]);\n  const toggleDarkMode = () => {\n    setDarkMode(prevMode => !prevMode);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      darkMode,\n      toggleDarkMode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"KGc2pJNiz0KSBH8EKxnluXvw6J4=\");\n_c = ThemeProvider;\nexport default ThemeContext;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","ThemeProvider","children","_s2","darkMode","setDarkMode","savedTheme","localStorage","getItem","window","matchMedia","matches","setItem","root","document","documentElement","classList","add","remove","toggleDarkMode","prevMode","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Segmentation/pipeline/webapp/static/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nexport const useTheme = () => useContext(ThemeContext);\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  // Check if user has a theme preference saved in localStorage\r\n  const [darkMode, setDarkMode] = useState(() => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    // If user has a saved preference, use it\r\n    if (savedTheme) {\r\n      return savedTheme === 'dark';\r\n    }\r\n    // Otherwise check for system preference\r\n    return window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n  });\r\n\r\n  // Update localStorage and apply theme when darkMode changes\r\n  useEffect(() => {\r\n    localStorage.setItem('theme', darkMode ? 'dark' : 'light');\r\n    const root = window.document.documentElement;\r\n    \r\n    if (darkMode) {\r\n      root.classList.add('dark');\r\n    } else {\r\n      root.classList.remove('dark');\r\n    }\r\n  }, [darkMode]);\r\n\r\n  const toggleDarkMode = () => {\r\n    setDarkMode(prevMode => !prevMode);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ darkMode, toggleDarkMode }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ThemeContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMO,QAAQ,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,YAAY,CAAC;AAAA;AAACE,EAAA,CAA1CD,QAAQ;AAErB,OAAO,MAAME,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,MAAM;IAC7C,MAAMY,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD;IACA,IAAIF,UAAU,EAAE;MACd,OAAOA,UAAU,KAAK,MAAM;IAC9B;IACA;IACA,OAAOG,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;EAClE,CAAC,CAAC;;EAEF;EACAhB,SAAS,CAAC,MAAM;IACdY,YAAY,CAACK,OAAO,CAAC,OAAO,EAAER,QAAQ,GAAG,MAAM,GAAG,OAAO,CAAC;IAC1D,MAAMS,IAAI,GAAGJ,MAAM,CAACK,QAAQ,CAACC,eAAe;IAE5C,IAAIX,QAAQ,EAAE;MACZS,IAAI,CAACG,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAC5B,CAAC,MAAM;MACLJ,IAAI,CAACG,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IAC/B;EACF,CAAC,EAAE,CAACd,QAAQ,CAAC,CAAC;EAEd,MAAMe,cAAc,GAAGA,CAAA,KAAM;IAC3Bd,WAAW,CAACe,QAAQ,IAAI,CAACA,QAAQ,CAAC;EACpC,CAAC;EAED,oBACEvB,OAAA,CAACC,YAAY,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAElB,QAAQ;MAAEe;IAAe,CAAE;IAAAjB,QAAA,EACxDA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACvB,GAAA,CAjCWF,aAAa;AAAA0B,EAAA,GAAb1B,aAAa;AAmC1B,eAAeH,YAAY;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}