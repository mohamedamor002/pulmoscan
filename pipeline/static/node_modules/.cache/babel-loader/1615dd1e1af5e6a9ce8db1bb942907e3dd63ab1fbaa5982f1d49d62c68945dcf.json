{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kouss\\\\Desktop\\\\Cursor\\\\Segmentation\\\\pipeline\\\\webapp\\\\static\\\\src\\\\components\\\\MedicalBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useTheme } from '../contexts/ThemeContext';\n\n// Medical Background Component that adds animated visualizations\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MedicalBackground = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const {\n    darkMode\n  } = useTheme();\n  const [currentVariant, setCurrentVariant] = useState('default');\n  const [transitionProgress, setTransitionProgress] = useState(0);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n\n  // List of all available variants\n  const allVariants = ['default', 'dna', 'cells', 'network', 'blood', 'brain'];\n  const TRANSITION_DURATION = 2000; // 2 seconds for transition\n  const VARIANT_DURATION = 8000; // 8 seconds per variant\n\n  // Special effect: Neural Network\n  const drawNeuralNetwork = (ctx, canvas, time, colors) => {\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const radius = Math.min(canvas.width, canvas.height) * 0.3;\n\n    // Draw faint circular path\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n    ctx.strokeStyle = `${colors[0]}20`;\n    ctx.lineWidth = 1;\n    ctx.stroke();\n\n    // Draw neurons along the path\n    const neuronCount = 10;\n    const neurons = [];\n    for (let i = 0; i < neuronCount; i++) {\n      const angle = i / neuronCount * Math.PI * 2 + time;\n      const x = centerX + Math.cos(angle) * radius;\n      const y = centerY + Math.sin(angle) * radius;\n      neurons.push({\n        x,\n        y\n      });\n\n      // Draw neuron\n      ctx.beginPath();\n      ctx.arc(x, y, 3, 0, Math.PI * 2);\n      ctx.fillStyle = colors[i % colors.length];\n      ctx.fill();\n    }\n\n    // Draw connections between neurons\n    for (let i = 0; i < neurons.length; i++) {\n      for (let j = i + 1; j < neurons.length; j++) {\n        ctx.beginPath();\n        ctx.moveTo(neurons[i].x, neurons[i].y);\n        ctx.lineTo(neurons[j].x, neurons[j].y);\n\n        // Pulse effect along connections\n        const pulsePos = time * 2 % 1;\n        const gradient = ctx.createLinearGradient(neurons[i].x, neurons[i].y, neurons[j].x, neurons[j].y);\n        gradient.addColorStop(Math.max(0, pulsePos - 0.1), `${colors[0]}10`);\n        gradient.addColorStop(pulsePos, `${colors[0]}80`);\n        gradient.addColorStop(Math.min(1, pulsePos + 0.1), `${colors[0]}10`);\n        ctx.strokeStyle = gradient;\n        ctx.lineWidth = 0.5;\n        ctx.stroke();\n      }\n    }\n  };\n\n  // Special effect: DNA Helix\n  const drawDNAHelix = (ctx, canvas, time, colors) => {\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const width = Math.min(canvas.width, canvas.height) * 0.6;\n    const height = width * 0.4;\n\n    // Draw the double helix\n    const points = 20;\n    const leftStrand = [];\n    const rightStrand = [];\n    for (let i = 0; i < points; i++) {\n      const t = i / points;\n      const angle = t * Math.PI * 4 + time;\n\n      // Left strand\n      const leftX = centerX + Math.cos(angle) * width / 2;\n      const leftY = centerY + t * height - height / 2;\n      leftStrand.push({\n        x: leftX,\n        y: leftY\n      });\n\n      // Right strand (opposite phase)\n      const rightX = centerX - Math.cos(angle) * width / 2;\n      const rightY = centerY + t * height - height / 2;\n      rightStrand.push({\n        x: rightX,\n        y: rightY\n      });\n\n      // Draw connections between strands (base pairs)\n      if (i % 2 === 0) {\n        ctx.beginPath();\n        ctx.moveTo(leftX, leftY);\n        ctx.lineTo(rightX, rightY);\n        ctx.strokeStyle = `${colors[i % colors.length]}40`;\n        ctx.lineWidth = 1;\n        ctx.stroke();\n\n        // Draw nucleotides at each end\n        ctx.font = '8px Arial';\n        ctx.fillStyle = colors[i % colors.length];\n        const baseA = i % 4 === 0 ? 'A' : i % 4 === 1 ? 'T' : i % 4 === 2 ? 'G' : 'C';\n        const baseB = baseA === 'A' ? 'T' : baseA === 'T' ? 'A' : baseA === 'G' ? 'C' : 'G';\n        ctx.fillText(baseA, leftX - 4, leftY + 4);\n        ctx.fillText(baseB, rightX - 4, rightY + 4);\n      }\n    }\n\n    // Draw the strands\n    ctx.beginPath();\n    ctx.moveTo(leftStrand[0].x, leftStrand[0].y);\n    for (let i = 1; i < leftStrand.length; i++) {\n      ctx.lineTo(leftStrand[i].x, leftStrand[i].y);\n    }\n    ctx.strokeStyle = `${colors[0]}80`;\n    ctx.lineWidth = 2;\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(rightStrand[0].x, rightStrand[0].y);\n    for (let i = 1; i < rightStrand.length; i++) {\n      ctx.lineTo(rightStrand[i].x, rightStrand[i].y);\n    }\n    ctx.strokeStyle = `${colors[1]}80`;\n    ctx.lineWidth = 2;\n    ctx.stroke();\n  };\n\n  // Special effect: Cell Division\n  const drawCellDivision = (ctx, canvas, time, colors) => {\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const radius = Math.min(canvas.width, canvas.height) * 0.15;\n\n    // Draw main cell\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n    ctx.fillStyle = `${colors[0]}20`;\n    ctx.fill();\n    ctx.strokeStyle = `${colors[0]}60`;\n    ctx.lineWidth = 1;\n    ctx.stroke();\n\n    // Draw dividing cell effect\n    const divisionPhase = (Math.sin(time) + 1) / 2; // 0 to 1\n\n    if (divisionPhase > 0.3) {\n      // Draw constriction in the middle\n      const constrictionWidth = radius * (1 - (divisionPhase - 0.3) / 0.7 * 0.8);\n      ctx.beginPath();\n      ctx.ellipse(centerX, centerY, constrictionWidth, radius, 0, 0, Math.PI * 2);\n      ctx.strokeStyle = `${colors[1]}70`;\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Draw chromosomes\n      if (divisionPhase < 0.6) {\n        const chromosomeCount = 5;\n        for (let i = 0; i < chromosomeCount; i++) {\n          const angle = i / chromosomeCount * Math.PI * 2;\n          const distance = radius * 0.5;\n          const x = centerX + Math.cos(angle) * distance;\n          const y = centerY + Math.sin(angle) * distance;\n          ctx.beginPath();\n          ctx.moveTo(x - 5, y - 5);\n          ctx.lineTo(x + 5, y + 5);\n          ctx.moveTo(x - 5, y + 5);\n          ctx.lineTo(x + 5, y - 5);\n          ctx.strokeStyle = `${colors[2]}90`;\n          ctx.lineWidth = 2;\n          ctx.stroke();\n        }\n      } else {\n        // Draw two sets of chromosomes\n        const chromosomeCount = 5;\n        for (let i = 0; i < chromosomeCount; i++) {\n          const angle = i / chromosomeCount * Math.PI * 2;\n          const distance = radius * 0.3;\n\n          // Left cell chromosomes\n          const x1 = centerX - radius * 0.5 + Math.cos(angle) * distance;\n          const y1 = centerY + Math.sin(angle) * distance;\n          ctx.beginPath();\n          ctx.moveTo(x1 - 3, y1 - 3);\n          ctx.lineTo(x1 + 3, y1 + 3);\n          ctx.moveTo(x1 - 3, y1 + 3);\n          ctx.lineTo(x1 + 3, y1 - 3);\n          ctx.strokeStyle = `${colors[2]}90`;\n          ctx.lineWidth = 1;\n          ctx.stroke();\n\n          // Right cell chromosomes\n          const x2 = centerX + radius * 0.5 + Math.cos(angle) * distance;\n          const y2 = centerY + Math.sin(angle) * distance;\n          ctx.beginPath();\n          ctx.moveTo(x2 - 3, y2 - 3);\n          ctx.lineTo(x2 + 3, y2 + 3);\n          ctx.moveTo(x2 - 3, y2 + 3);\n          ctx.lineTo(x2 + 3, y2 - 3);\n          ctx.strokeStyle = `${colors[2]}90`;\n          ctx.lineWidth = 1;\n          ctx.stroke();\n        }\n      }\n    } else {\n      // Draw nucleus\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, radius * 0.5, 0, Math.PI * 2);\n      ctx.strokeStyle = `${colors[1]}40`;\n      ctx.fillStyle = `${colors[1]}20`;\n      ctx.fill();\n      ctx.lineWidth = 1;\n      ctx.stroke();\n    }\n  };\n\n  // Special effect: Pulse/Heartbeat\n  const drawPulseEffect = (ctx, canvas, time, colors) => {\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n\n    // Draw ECG line\n    const lineWidth = Math.min(canvas.width, canvas.height) * 0.6;\n    const lineHeight = Math.min(canvas.width, canvas.height) * 0.1;\n    const startX = centerX - lineWidth / 2;\n    const endX = centerX + lineWidth / 2;\n\n    // Draw the baseline\n    ctx.beginPath();\n    ctx.moveTo(startX, centerY);\n    ctx.lineTo(endX, centerY);\n    ctx.strokeStyle = `${colors[0]}30`;\n    ctx.lineWidth = 1;\n    ctx.stroke();\n\n    // Draw animated heartbeat\n    const heartbeatSpeed = 2;\n    const t = time * heartbeatSpeed % 1;\n    if (t < 0.7) {\n      // Draw ECG pattern\n      const progress = t / 0.7; // 0 to 1 during active phase\n\n      ctx.beginPath();\n      ctx.moveTo(startX, centerY);\n\n      // First segment - flat line\n      const segment1End = startX + lineWidth * 0.3;\n      ctx.lineTo(Math.min(segment1End, startX + progress * lineWidth), centerY);\n      if (progress > 0.3) {\n        // P wave\n        const pWaveStart = startX + lineWidth * 0.3;\n        const pWaveEnd = startX + lineWidth * 0.4;\n        ctx.quadraticCurveTo(pWaveStart + (pWaveEnd - pWaveStart) / 2, centerY - lineHeight * 0.2, Math.min(pWaveEnd, startX + progress * lineWidth), centerY);\n      }\n      if (progress > 0.4) {\n        // Flat before QRS\n        const preQRSEnd = startX + lineWidth * 0.5;\n        ctx.lineTo(Math.min(preQRSEnd, startX + progress * lineWidth), centerY);\n      }\n      if (progress > 0.5) {\n        // QRS complex\n        const qPeak = startX + lineWidth * 0.52;\n        const rPeak = startX + lineWidth * 0.55;\n        const sPeak = startX + lineWidth * 0.58;\n        const qrsEnd = startX + lineWidth * 0.6;\n\n        // Q dip\n        if (progress > 0.52) {\n          ctx.lineTo(qPeak, centerY + lineHeight * 0.2);\n        }\n\n        // R peak\n        if (progress > 0.55) {\n          ctx.lineTo(rPeak, centerY - lineHeight * 0.8);\n        }\n\n        // S dip\n        if (progress > 0.58) {\n          ctx.lineTo(sPeak, centerY + lineHeight * 0.4);\n        }\n\n        // End of QRS\n        if (progress > 0.6) {\n          ctx.lineTo(Math.min(qrsEnd, startX + progress * lineWidth), centerY);\n        }\n      }\n      if (progress > 0.6) {\n        // T wave\n        const tWaveStart = startX + lineWidth * 0.65;\n        const tWaveEnd = startX + lineWidth * 0.75;\n        if (progress > 0.65) {\n          ctx.lineTo(tWaveStart, centerY);\n          if (progress > 0.75) {\n            ctx.quadraticCurveTo(tWaveStart + (tWaveEnd - tWaveStart) / 2, centerY - lineHeight * 0.3, Math.min(tWaveEnd, startX + progress * lineWidth), centerY);\n          }\n        }\n      }\n      if (progress > 0.75) {\n        // Final flat line\n        ctx.lineTo(startX + progress * lineWidth, centerY);\n      }\n      ctx.strokeStyle = colors[0];\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Animate a pulse ring at QRS peak\n      if (progress > 0.55 && progress < 0.9) {\n        const pulseProgress = (progress - 0.55) / 0.35; // 0 to 1\n        const pulseRadius = pulseProgress * lineHeight * 2;\n        ctx.beginPath();\n        ctx.arc(startX + lineWidth * 0.55, centerY - lineHeight * 0.8, pulseRadius, 0, Math.PI * 2);\n        ctx.fillStyle = `${colors[0]}${Math.floor((1 - pulseProgress) * 40).toString(16).padStart(2, '0')}`;\n        ctx.fill();\n      }\n    }\n  };\n\n  // Special effect: Blood Flow\n  const drawBloodFlow = (ctx, canvas, time, colors) => {\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const radius = Math.min(canvas.width, canvas.height) * 0.3;\n\n    // Draw blood vessels\n    const vesselCount = 8;\n    for (let i = 0; i < vesselCount; i++) {\n      const angle = i / vesselCount * Math.PI * 2;\n      const startX = centerX + Math.cos(angle) * radius * 0.3;\n      const startY = centerY + Math.sin(angle) * radius * 0.3;\n      const endX = centerX + Math.cos(angle) * radius;\n      const endY = centerY + Math.sin(angle) * radius;\n\n      // Draw vessel\n      ctx.beginPath();\n      ctx.moveTo(startX, startY);\n      ctx.lineTo(endX, endY);\n      ctx.strokeStyle = `${colors[0]}30`;\n      ctx.lineWidth = 3;\n      ctx.stroke();\n\n      // Draw blood cells flowing\n      const cellCount = 5;\n      for (let j = 0; j < cellCount; j++) {\n        const progress = (time * 2 + j / cellCount) % 1;\n        const x = startX + (endX - startX) * progress;\n        const y = startY + (endY - startY) * progress;\n        ctx.beginPath();\n        ctx.arc(x, y, 3, 0, Math.PI * 2);\n        ctx.fillStyle = colors[1];\n        ctx.fill();\n      }\n    }\n  };\n\n  // Special effect: Brain Activity\n  const drawBrainActivity = (ctx, canvas, time, colors) => {\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const radius = Math.min(canvas.width, canvas.height) * 0.25;\n\n    // Draw brain outline\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n    ctx.strokeStyle = `${colors[0]}40`;\n    ctx.lineWidth = 2;\n    ctx.stroke();\n\n    // Draw neural activity\n    const pointCount = 20;\n    for (let i = 0; i < pointCount; i++) {\n      const angle = i / pointCount * Math.PI * 2;\n      const distance = radius * (0.7 + Math.sin(time * 3 + i) * 0.1);\n      const x = centerX + Math.cos(angle) * distance;\n      const y = centerY + Math.sin(angle) * distance;\n\n      // Draw activity point\n      ctx.beginPath();\n      ctx.arc(x, y, 2 + Math.sin(time * 5 + i) * 2, 0, Math.PI * 2);\n      ctx.fillStyle = `${colors[1]}${Math.floor((Math.sin(time * 3 + i) + 1) * 40 + 20).toString(16).padStart(2, '0')}`;\n      ctx.fill();\n\n      // Draw connections\n      for (let j = i + 1; j < pointCount; j++) {\n        if (Math.random() > 0.7) {\n          const angle2 = j / pointCount * Math.PI * 2;\n          const distance2 = radius * (0.7 + Math.sin(time * 3 + j) * 0.1);\n          const x2 = centerX + Math.cos(angle2) * distance2;\n          const y2 = centerY + Math.sin(angle2) * distance2;\n          ctx.beginPath();\n          ctx.moveTo(x, y);\n          ctx.lineTo(x2, y2);\n          ctx.strokeStyle = `${colors[2]}20`;\n          ctx.lineWidth = 0.5;\n          ctx.stroke();\n        }\n      }\n    }\n  };\n\n  // Different animation variants\n  const variants = {\n    default: {\n      particleCount: 40,\n      connectionDistance: 150,\n      speed: 0.5,\n      size: 3,\n      colors: {\n        light: ['#3b82f6', '#60a5fa', '#93c5fd', '#1e40af'],\n        dark: ['#1e40af', '#3b82f6', '#60a5fa', '#93c5fd']\n      },\n      symbols: ['●', '▲', '■'],\n      // Basic shapes\n      drawSpecial: drawNeuralNetwork\n    },\n    dna: {\n      particleCount: 60,\n      connectionDistance: 100,\n      speed: 0.3,\n      size: 2,\n      colors: {\n        light: ['#8b5cf6', '#a78bfa', '#c4b5fd', '#7c3aed'],\n        dark: ['#7c3aed', '#8b5cf6', '#a78bfa', '#c4b5fd']\n      },\n      symbols: ['A', 'T', 'G', 'C'],\n      // DNA nucleotides\n      drawSpecial: drawDNAHelix\n    },\n    cells: {\n      particleCount: 30,\n      connectionDistance: 200,\n      speed: 0.7,\n      size: 4,\n      colors: {\n        light: ['#10b981', '#34d399', '#6ee7b7', '#059669'],\n        dark: ['#059669', '#10b981', '#34d399', '#6ee7b7']\n      },\n      symbols: ['⬤', '⚕', '+', '◉'],\n      // Cell & medical symbols\n      drawSpecial: drawCellDivision\n    },\n    network: {\n      particleCount: 80,\n      connectionDistance: 120,\n      speed: 0.4,\n      size: 2,\n      colors: {\n        light: ['#ef4444', '#f87171', '#fca5a5', '#dc2626'],\n        dark: ['#dc2626', '#ef4444', '#f87171', '#fca5a5']\n      },\n      symbols: ['❤', '🫁', '🧠'],\n      // Organ symbols\n      drawSpecial: drawPulseEffect\n    },\n    blood: {\n      particleCount: 50,\n      connectionDistance: 180,\n      speed: 0.6,\n      size: 3,\n      colors: {\n        light: ['#dc2626', '#ef4444', '#f87171', '#b91c1c'],\n        dark: ['#b91c1c', '#dc2626', '#ef4444', '#f87171']\n      },\n      symbols: ['🩸', '💉', '❤️'],\n      drawSpecial: drawBloodFlow\n    },\n    brain: {\n      particleCount: 70,\n      connectionDistance: 140,\n      speed: 0.5,\n      size: 2,\n      colors: {\n        light: ['#7c3aed', '#8b5cf6', '#a78bfa', '#6d28d9'],\n        dark: ['#6d28d9', '#7c3aed', '#8b5cf6', '#a78bfa']\n      },\n      symbols: ['🧠', '⚡', '💭'],\n      drawSpecial: drawBrainActivity\n    }\n  };\n\n  // Add transition effect\n  const drawTransition = (ctx, canvas, progress, fromColors, toColors) => {\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const radius = Math.min(canvas.width, canvas.height) * 0.4;\n\n    // Draw transition circle\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius * progress, 0, Math.PI * 2);\n    ctx.strokeStyle = `${toColors[0]}${Math.floor(progress * 40).toString(16).padStart(2, '0')}`;\n    ctx.lineWidth = 2;\n    ctx.stroke();\n\n    // Draw particles\n    const particleCount = 20;\n    for (let i = 0; i < particleCount; i++) {\n      const angle = i / particleCount * Math.PI * 2;\n      const distance = radius * progress;\n      const x = centerX + Math.cos(angle) * distance;\n      const y = centerY + Math.sin(angle) * distance;\n      ctx.beginPath();\n      ctx.arc(x, y, 2, 0, Math.PI * 2);\n      ctx.fillStyle = `${toColors[1]}${Math.floor(progress * 60).toString(16).padStart(2, '0')}`;\n      ctx.fill();\n    }\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let animationFrameId;\n    let particles = [];\n    let time = 0;\n    let variantIndex = 0;\n    let lastVariantChange = Date.now();\n    let transitionStartTime = 0;\n\n    // Set canvas dimensions\n    const handleResize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    window.addEventListener('resize', handleResize);\n    handleResize();\n\n    // Initialize particles\n    const initializeParticles = variantConfig => {\n      const colors = darkMode ? variantConfig.colors.dark : variantConfig.colors.light;\n      particles = [];\n      for (let i = 0; i < variantConfig.particleCount; i++) {\n        particles.push({\n          x: Math.random() * canvas.width,\n          y: Math.random() * canvas.height,\n          vx: (Math.random() - 0.5) * variantConfig.speed,\n          vy: (Math.random() - 0.5) * variantConfig.speed,\n          radius: Math.random() * variantConfig.size + 1,\n          color: colors[Math.floor(Math.random() * colors.length)],\n          symbol: variantConfig.symbols[Math.floor(Math.random() * variantConfig.symbols.length)],\n          rotation: Math.random() * Math.PI * 2,\n          rotationSpeed: (Math.random() - 0.5) * 0.02,\n          pulsePhase: Math.random() * Math.PI * 2,\n          scale: 1 + Math.random() * 0.5\n        });\n      }\n    };\n\n    // Animation function\n    const animate = () => {\n      const currentTime = Date.now();\n      time += 0.01;\n\n      // Check if it's time to change variants\n      if (currentTime - lastVariantChange >= VARIANT_DURATION && !isTransitioning) {\n        setIsTransitioning(true);\n        transitionStartTime = currentTime;\n        variantIndex = (variantIndex + 1) % allVariants.length;\n        setCurrentVariant(allVariants[variantIndex]);\n      }\n\n      // Handle transition\n      if (isTransitioning) {\n        const transitionTime = currentTime - transitionStartTime;\n        const progress = Math.min(transitionTime / TRANSITION_DURATION, 1);\n        setTransitionProgress(progress);\n        if (progress >= 1) {\n          setIsTransitioning(false);\n          lastVariantChange = currentTime;\n          initializeParticles(variants[allVariants[variantIndex]]);\n        }\n      }\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Get current and next variant configs\n      const currentConfig = variants[allVariants[variantIndex]];\n      const nextConfig = variants[allVariants[(variantIndex + 1) % allVariants.length]];\n      const currentColors = darkMode ? currentConfig.colors.dark : currentConfig.colors.light;\n      const nextColors = darkMode ? nextConfig.colors.dark : nextConfig.colors.light;\n\n      // Draw current visualization\n      if (currentConfig.drawSpecial) {\n        currentConfig.drawSpecial(ctx, canvas, time, currentColors, darkMode);\n      }\n\n      // Draw transition effect if transitioning\n      if (isTransitioning) {\n        drawTransition(ctx, canvas, transitionProgress, currentColors, nextColors);\n      }\n\n      // Draw and update particles\n      particles.forEach(particle => {\n        // Move particle\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n        particle.rotation += particle.rotationSpeed;\n\n        // Boundary check\n        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;\n        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;\n\n        // Draw particle - either as circle or symbol\n        if (Math.random() > 0.7) {\n          // Draw as circle\n          ctx.beginPath();\n          ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\n          ctx.fillStyle = particle.color;\n          ctx.fill();\n        } else {\n          // Draw as symbol\n          ctx.save();\n          ctx.translate(particle.x, particle.y);\n          ctx.rotate(particle.rotation);\n          ctx.font = `${particle.radius * 4 * particle.scale}px Arial`;\n          ctx.fillStyle = particle.color;\n          ctx.fillText(particle.symbol, 0, 0);\n          ctx.restore();\n        }\n\n        // Connect particles within range\n        if (currentVariant === 'dna') {\n          drawDNAEffect(particle, particles, ctx, currentConfig, time);\n        } else {\n          drawConnections(particle, particles, ctx, currentConfig);\n        }\n      });\n      animationFrameId = requestAnimationFrame(animate);\n    };\n\n    // Draw connections between nearby particles\n    const drawConnections = (particle, particles, ctx, config) => {\n      particles.forEach(other => {\n        if (particle === other) return;\n        const dx = particle.x - other.x;\n        const dy = particle.y - other.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < config.connectionDistance) {\n          ctx.beginPath();\n          ctx.moveTo(particle.x, particle.y);\n          ctx.lineTo(other.x, other.y);\n          ctx.strokeStyle = `${particle.color}${Math.floor((1 - distance / config.connectionDistance) * 255).toString(16).padStart(2, '0')}`;\n          ctx.lineWidth = 0.5;\n          ctx.stroke();\n        }\n      });\n    };\n\n    // Special DNA-like effect\n    const drawDNAEffect = (particle, particles, ctx, config, time) => {\n      const wavelength = 200;\n      const amplitude = 50;\n      particles.forEach(other => {\n        if (particle === other) return;\n        const dx = particle.x - other.x;\n        const dy = particle.y - other.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < config.connectionDistance) {\n          const wave1 = Math.sin((particle.x + time * 100) / wavelength) * amplitude;\n          const wave2 = Math.sin((other.x + time * 100) / wavelength) * amplitude;\n          ctx.beginPath();\n          ctx.moveTo(particle.x, particle.y + wave1);\n          ctx.lineTo(other.x, other.y + wave2);\n          ctx.strokeStyle = `${particle.color}${Math.floor((1 - distance / config.connectionDistance) * 255).toString(16).padStart(2, '0')}`;\n          ctx.lineWidth = 0.5;\n          ctx.stroke();\n        }\n      });\n    };\n\n    // Initialize first variant\n    initializeParticles(variants[allVariants[0]]);\n    animate();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [darkMode]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"fixed top-0 left-0 w-full h-full -z-10 pointer-events-none\",\n    style: {\n      opacity: 0.15\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 734,\n    columnNumber: 5\n  }, this);\n};\n_s(MedicalBackground, \"WvntvYSELSUbb8RMRv5aVpbp4zE=\", false, function () {\n  return [useTheme];\n});\n_c = MedicalBackground;\nexport default MedicalBackground;\nvar _c;\n$RefreshReg$(_c, \"MedicalBackground\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useTheme","jsxDEV","_jsxDEV","MedicalBackground","_s","canvasRef","darkMode","currentVariant","setCurrentVariant","transitionProgress","setTransitionProgress","isTransitioning","setIsTransitioning","allVariants","TRANSITION_DURATION","VARIANT_DURATION","drawNeuralNetwork","ctx","canvas","time","colors","centerX","width","centerY","height","radius","Math","min","beginPath","arc","PI","strokeStyle","lineWidth","stroke","neuronCount","neurons","i","angle","x","cos","y","sin","push","fillStyle","length","fill","j","moveTo","lineTo","pulsePos","gradient","createLinearGradient","addColorStop","max","drawDNAHelix","points","leftStrand","rightStrand","t","leftX","leftY","rightX","rightY","font","baseA","baseB","fillText","drawCellDivision","divisionPhase","constrictionWidth","ellipse","chromosomeCount","distance","x1","y1","x2","y2","drawPulseEffect","lineHeight","startX","endX","heartbeatSpeed","progress","segment1End","pWaveStart","pWaveEnd","quadraticCurveTo","preQRSEnd","qPeak","rPeak","sPeak","qrsEnd","tWaveStart","tWaveEnd","pulseProgress","pulseRadius","floor","toString","padStart","drawBloodFlow","vesselCount","startY","endY","cellCount","drawBrainActivity","pointCount","random","angle2","distance2","variants","default","particleCount","connectionDistance","speed","size","light","dark","symbols","drawSpecial","dna","cells","network","blood","brain","drawTransition","fromColors","toColors","current","getContext","animationFrameId","particles","variantIndex","lastVariantChange","Date","now","transitionStartTime","handleResize","window","innerWidth","innerHeight","addEventListener","initializeParticles","variantConfig","vx","vy","color","symbol","rotation","rotationSpeed","pulsePhase","scale","animate","currentTime","transitionTime","clearRect","currentConfig","nextConfig","currentColors","nextColors","forEach","particle","save","translate","rotate","restore","drawDNAEffect","drawConnections","requestAnimationFrame","config","other","dx","dy","sqrt","wavelength","amplitude","wave1","wave2","removeEventListener","cancelAnimationFrame","ref","className","style","opacity","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/kouss/Desktop/Cursor/Segmentation/pipeline/webapp/static/src/components/MedicalBackground.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\n\r\n// Medical Background Component that adds animated visualizations\r\nconst MedicalBackground = () => {\r\n  const canvasRef = useRef(null);\r\n  const { darkMode } = useTheme();\r\n  const [currentVariant, setCurrentVariant] = useState('default');\r\n  const [transitionProgress, setTransitionProgress] = useState(0);\r\n  const [isTransitioning, setIsTransitioning] = useState(false);\r\n\r\n  // List of all available variants\r\n  const allVariants = ['default', 'dna', 'cells', 'network', 'blood', 'brain'];\r\n  const TRANSITION_DURATION = 2000; // 2 seconds for transition\r\n  const VARIANT_DURATION = 8000; // 8 seconds per variant\r\n\r\n  // Special effect: Neural Network\r\n  const drawNeuralNetwork = (ctx, canvas, time, colors) => {\r\n    const centerX = canvas.width / 2;\r\n    const centerY = canvas.height / 2;\r\n    const radius = Math.min(canvas.width, canvas.height) * 0.3;\r\n    \r\n    // Draw faint circular path\r\n    ctx.beginPath();\r\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\r\n    ctx.strokeStyle = `${colors[0]}20`;\r\n    ctx.lineWidth = 1;\r\n    ctx.stroke();\r\n    \r\n    // Draw neurons along the path\r\n    const neuronCount = 10;\r\n    const neurons = [];\r\n    \r\n    for (let i = 0; i < neuronCount; i++) {\r\n      const angle = (i / neuronCount) * Math.PI * 2 + time;\r\n      const x = centerX + Math.cos(angle) * radius;\r\n      const y = centerY + Math.sin(angle) * radius;\r\n      neurons.push({x, y});\r\n      \r\n      // Draw neuron\r\n      ctx.beginPath();\r\n      ctx.arc(x, y, 3, 0, Math.PI * 2);\r\n      ctx.fillStyle = colors[i % colors.length];\r\n      ctx.fill();\r\n    }\r\n    \r\n    // Draw connections between neurons\r\n    for (let i = 0; i < neurons.length; i++) {\r\n      for (let j = i + 1; j < neurons.length; j++) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(neurons[i].x, neurons[i].y);\r\n        ctx.lineTo(neurons[j].x, neurons[j].y);\r\n        \r\n        // Pulse effect along connections\r\n        const pulsePos = (time * 2) % 1;\r\n        \r\n        const gradient = ctx.createLinearGradient(\r\n          neurons[i].x, neurons[i].y, \r\n          neurons[j].x, neurons[j].y\r\n        );\r\n        \r\n        gradient.addColorStop(Math.max(0, pulsePos - 0.1), `${colors[0]}10`);\r\n        gradient.addColorStop(pulsePos, `${colors[0]}80`);\r\n        gradient.addColorStop(Math.min(1, pulsePos + 0.1), `${colors[0]}10`);\r\n        \r\n        ctx.strokeStyle = gradient;\r\n        ctx.lineWidth = 0.5;\r\n        ctx.stroke();\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Special effect: DNA Helix\r\n  const drawDNAHelix = (ctx, canvas, time, colors) => {\r\n    const centerX = canvas.width / 2;\r\n    const centerY = canvas.height / 2;\r\n    \r\n    const width = Math.min(canvas.width, canvas.height) * 0.6;\r\n    const height = width * 0.4;\r\n    \r\n    // Draw the double helix\r\n    const points = 20;\r\n    const leftStrand = [];\r\n    const rightStrand = [];\r\n    \r\n    for (let i = 0; i < points; i++) {\r\n      const t = i / points;\r\n      const angle = t * Math.PI * 4 + time;\r\n      \r\n      // Left strand\r\n      const leftX = centerX + Math.cos(angle) * width / 2;\r\n      const leftY = centerY + t * height - height / 2;\r\n      leftStrand.push({x: leftX, y: leftY});\r\n      \r\n      // Right strand (opposite phase)\r\n      const rightX = centerX - Math.cos(angle) * width / 2;\r\n      const rightY = centerY + t * height - height / 2;\r\n      rightStrand.push({x: rightX, y: rightY});\r\n      \r\n      // Draw connections between strands (base pairs)\r\n      if (i % 2 === 0) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(leftX, leftY);\r\n        ctx.lineTo(rightX, rightY);\r\n        ctx.strokeStyle = `${colors[i % colors.length]}40`;\r\n        ctx.lineWidth = 1;\r\n        ctx.stroke();\r\n        \r\n        // Draw nucleotides at each end\r\n        ctx.font = '8px Arial';\r\n        ctx.fillStyle = colors[i % colors.length];\r\n        \r\n        const baseA = i % 4 === 0 ? 'A' : i % 4 === 1 ? 'T' : i % 4 === 2 ? 'G' : 'C';\r\n        const baseB = baseA === 'A' ? 'T' : baseA === 'T' ? 'A' : baseA === 'G' ? 'C' : 'G';\r\n        \r\n        ctx.fillText(baseA, leftX - 4, leftY + 4);\r\n        ctx.fillText(baseB, rightX - 4, rightY + 4);\r\n      }\r\n    }\r\n    \r\n    // Draw the strands\r\n    ctx.beginPath();\r\n    ctx.moveTo(leftStrand[0].x, leftStrand[0].y);\r\n    for (let i = 1; i < leftStrand.length; i++) {\r\n      ctx.lineTo(leftStrand[i].x, leftStrand[i].y);\r\n    }\r\n    ctx.strokeStyle = `${colors[0]}80`;\r\n    ctx.lineWidth = 2;\r\n    ctx.stroke();\r\n    \r\n    ctx.beginPath();\r\n    ctx.moveTo(rightStrand[0].x, rightStrand[0].y);\r\n    for (let i = 1; i < rightStrand.length; i++) {\r\n      ctx.lineTo(rightStrand[i].x, rightStrand[i].y);\r\n    }\r\n    ctx.strokeStyle = `${colors[1]}80`;\r\n    ctx.lineWidth = 2;\r\n    ctx.stroke();\r\n  };\r\n  \r\n  // Special effect: Cell Division\r\n  const drawCellDivision = (ctx, canvas, time, colors) => {\r\n    const centerX = canvas.width / 2;\r\n    const centerY = canvas.height / 2;\r\n    const radius = Math.min(canvas.width, canvas.height) * 0.15;\r\n    \r\n    // Draw main cell\r\n    ctx.beginPath();\r\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\r\n    ctx.fillStyle = `${colors[0]}20`;\r\n    ctx.fill();\r\n    ctx.strokeStyle = `${colors[0]}60`;\r\n    ctx.lineWidth = 1;\r\n    ctx.stroke();\r\n    \r\n    // Draw dividing cell effect\r\n    const divisionPhase = (Math.sin(time) + 1) / 2; // 0 to 1\r\n    \r\n    if (divisionPhase > 0.3) {\r\n      // Draw constriction in the middle\r\n      const constrictionWidth = radius * (1 - (divisionPhase - 0.3) / 0.7 * 0.8);\r\n      \r\n      ctx.beginPath();\r\n      ctx.ellipse(\r\n        centerX, \r\n        centerY, \r\n        constrictionWidth, \r\n        radius, \r\n        0, \r\n        0, \r\n        Math.PI * 2\r\n      );\r\n      ctx.strokeStyle = `${colors[1]}70`;\r\n      ctx.lineWidth = 2;\r\n      ctx.stroke();\r\n      \r\n      // Draw chromosomes\r\n      if (divisionPhase < 0.6) {\r\n        const chromosomeCount = 5;\r\n        for (let i = 0; i < chromosomeCount; i++) {\r\n          const angle = (i / chromosomeCount) * Math.PI * 2;\r\n          const distance = radius * 0.5;\r\n          const x = centerX + Math.cos(angle) * distance;\r\n          const y = centerY + Math.sin(angle) * distance;\r\n          \r\n          ctx.beginPath();\r\n          ctx.moveTo(x - 5, y - 5);\r\n          ctx.lineTo(x + 5, y + 5);\r\n          ctx.moveTo(x - 5, y + 5);\r\n          ctx.lineTo(x + 5, y - 5);\r\n          ctx.strokeStyle = `${colors[2]}90`;\r\n          ctx.lineWidth = 2;\r\n          ctx.stroke();\r\n        }\r\n      } else {\r\n        // Draw two sets of chromosomes\r\n        const chromosomeCount = 5;\r\n        for (let i = 0; i < chromosomeCount; i++) {\r\n          const angle = (i / chromosomeCount) * Math.PI * 2;\r\n          const distance = radius * 0.3;\r\n          \r\n          // Left cell chromosomes\r\n          const x1 = centerX - radius * 0.5 + Math.cos(angle) * distance;\r\n          const y1 = centerY + Math.sin(angle) * distance;\r\n          \r\n          ctx.beginPath();\r\n          ctx.moveTo(x1 - 3, y1 - 3);\r\n          ctx.lineTo(x1 + 3, y1 + 3);\r\n          ctx.moveTo(x1 - 3, y1 + 3);\r\n          ctx.lineTo(x1 + 3, y1 - 3);\r\n          ctx.strokeStyle = `${colors[2]}90`;\r\n          ctx.lineWidth = 1;\r\n          ctx.stroke();\r\n          \r\n          // Right cell chromosomes\r\n          const x2 = centerX + radius * 0.5 + Math.cos(angle) * distance;\r\n          const y2 = centerY + Math.sin(angle) * distance;\r\n          \r\n          ctx.beginPath();\r\n          ctx.moveTo(x2 - 3, y2 - 3);\r\n          ctx.lineTo(x2 + 3, y2 + 3);\r\n          ctx.moveTo(x2 - 3, y2 + 3);\r\n          ctx.lineTo(x2 + 3, y2 - 3);\r\n          ctx.strokeStyle = `${colors[2]}90`;\r\n          ctx.lineWidth = 1;\r\n          ctx.stroke();\r\n        }\r\n      }\r\n    } else {\r\n      // Draw nucleus\r\n      ctx.beginPath();\r\n      ctx.arc(centerX, centerY, radius * 0.5, 0, Math.PI * 2);\r\n      ctx.strokeStyle = `${colors[1]}40`;\r\n      ctx.fillStyle = `${colors[1]}20`;\r\n      ctx.fill();\r\n      ctx.lineWidth = 1;\r\n      ctx.stroke();\r\n    }\r\n  };\r\n  \r\n  // Special effect: Pulse/Heartbeat\r\n  const drawPulseEffect = (ctx, canvas, time, colors) => {\r\n    const centerX = canvas.width / 2;\r\n    const centerY = canvas.height / 2;\r\n    \r\n    // Draw ECG line\r\n    const lineWidth = Math.min(canvas.width, canvas.height) * 0.6;\r\n    const lineHeight = Math.min(canvas.width, canvas.height) * 0.1;\r\n    \r\n    const startX = centerX - lineWidth / 2;\r\n    const endX = centerX + lineWidth / 2;\r\n    \r\n    // Draw the baseline\r\n    ctx.beginPath();\r\n    ctx.moveTo(startX, centerY);\r\n    ctx.lineTo(endX, centerY);\r\n    ctx.strokeStyle = `${colors[0]}30`;\r\n    ctx.lineWidth = 1;\r\n    ctx.stroke();\r\n    \r\n    // Draw animated heartbeat\r\n    const heartbeatSpeed = 2;\r\n    const t = (time * heartbeatSpeed) % 1; \r\n    \r\n    if (t < 0.7) {\r\n      // Draw ECG pattern\r\n      const progress = t / 0.7; // 0 to 1 during active phase\r\n      \r\n      ctx.beginPath();\r\n      ctx.moveTo(startX, centerY);\r\n      \r\n      // First segment - flat line\r\n      const segment1End = startX + lineWidth * 0.3;\r\n      ctx.lineTo(Math.min(segment1End, startX + progress * lineWidth), centerY);\r\n      \r\n      if (progress > 0.3) {\r\n        // P wave\r\n        const pWaveStart = startX + lineWidth * 0.3;\r\n        const pWaveEnd = startX + lineWidth * 0.4;\r\n        \r\n        ctx.quadraticCurveTo(\r\n          pWaveStart + (pWaveEnd - pWaveStart) / 2, \r\n          centerY - lineHeight * 0.2,\r\n          Math.min(pWaveEnd, startX + progress * lineWidth), \r\n          centerY\r\n        );\r\n      }\r\n      \r\n      if (progress > 0.4) {\r\n        // Flat before QRS\r\n        const preQRSEnd = startX + lineWidth * 0.5;\r\n        ctx.lineTo(Math.min(preQRSEnd, startX + progress * lineWidth), centerY);\r\n      }\r\n      \r\n      if (progress > 0.5) {\r\n        // QRS complex\r\n        const qPeak = startX + lineWidth * 0.52;\r\n        const rPeak = startX + lineWidth * 0.55;\r\n        const sPeak = startX + lineWidth * 0.58;\r\n        const qrsEnd = startX + lineWidth * 0.6;\r\n        \r\n        // Q dip\r\n        if (progress > 0.52) {\r\n          ctx.lineTo(qPeak, centerY + lineHeight * 0.2);\r\n        }\r\n        \r\n        // R peak\r\n        if (progress > 0.55) {\r\n          ctx.lineTo(rPeak, centerY - lineHeight * 0.8);\r\n        }\r\n        \r\n        // S dip\r\n        if (progress > 0.58) {\r\n          ctx.lineTo(sPeak, centerY + lineHeight * 0.4);\r\n        }\r\n        \r\n        // End of QRS\r\n        if (progress > 0.6) {\r\n          ctx.lineTo(Math.min(qrsEnd, startX + progress * lineWidth), centerY);\r\n        }\r\n      }\r\n      \r\n      if (progress > 0.6) {\r\n        // T wave\r\n        const tWaveStart = startX + lineWidth * 0.65;\r\n        const tWaveEnd = startX + lineWidth * 0.75;\r\n        \r\n        if (progress > 0.65) {\r\n          ctx.lineTo(tWaveStart, centerY);\r\n          \r\n          if (progress > 0.75) {\r\n            ctx.quadraticCurveTo(\r\n              tWaveStart + (tWaveEnd - tWaveStart) / 2, \r\n              centerY - lineHeight * 0.3,\r\n              Math.min(tWaveEnd, startX + progress * lineWidth), \r\n              centerY\r\n            );\r\n          }\r\n        }\r\n      }\r\n      \r\n      if (progress > 0.75) {\r\n        // Final flat line\r\n        ctx.lineTo(startX + progress * lineWidth, centerY);\r\n      }\r\n      \r\n      ctx.strokeStyle = colors[0];\r\n      ctx.lineWidth = 2;\r\n      ctx.stroke();\r\n      \r\n      // Animate a pulse ring at QRS peak\r\n      if (progress > 0.55 && progress < 0.9) {\r\n        const pulseProgress = (progress - 0.55) / 0.35; // 0 to 1\r\n        const pulseRadius = pulseProgress * lineHeight * 2;\r\n        \r\n        ctx.beginPath();\r\n        ctx.arc(startX + lineWidth * 0.55, centerY - lineHeight * 0.8, pulseRadius, 0, Math.PI * 2);\r\n        ctx.fillStyle = `${colors[0]}${Math.floor((1 - pulseProgress) * 40).toString(16).padStart(2, '0')}`;\r\n        ctx.fill();\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Special effect: Blood Flow\r\n  const drawBloodFlow = (ctx, canvas, time, colors) => {\r\n    const centerX = canvas.width / 2;\r\n    const centerY = canvas.height / 2;\r\n    const radius = Math.min(canvas.width, canvas.height) * 0.3;\r\n    \r\n    // Draw blood vessels\r\n    const vesselCount = 8;\r\n    for (let i = 0; i < vesselCount; i++) {\r\n      const angle = (i / vesselCount) * Math.PI * 2;\r\n      const startX = centerX + Math.cos(angle) * radius * 0.3;\r\n      const startY = centerY + Math.sin(angle) * radius * 0.3;\r\n      const endX = centerX + Math.cos(angle) * radius;\r\n      const endY = centerY + Math.sin(angle) * radius;\r\n      \r\n      // Draw vessel\r\n      ctx.beginPath();\r\n      ctx.moveTo(startX, startY);\r\n      ctx.lineTo(endX, endY);\r\n      ctx.strokeStyle = `${colors[0]}30`;\r\n      ctx.lineWidth = 3;\r\n      ctx.stroke();\r\n      \r\n      // Draw blood cells flowing\r\n      const cellCount = 5;\r\n      for (let j = 0; j < cellCount; j++) {\r\n        const progress = ((time * 2 + j / cellCount) % 1);\r\n        const x = startX + (endX - startX) * progress;\r\n        const y = startY + (endY - startY) * progress;\r\n        \r\n        ctx.beginPath();\r\n        ctx.arc(x, y, 3, 0, Math.PI * 2);\r\n        ctx.fillStyle = colors[1];\r\n        ctx.fill();\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Special effect: Brain Activity\r\n  const drawBrainActivity = (ctx, canvas, time, colors) => {\r\n    const centerX = canvas.width / 2;\r\n    const centerY = canvas.height / 2;\r\n    const radius = Math.min(canvas.width, canvas.height) * 0.25;\r\n    \r\n    // Draw brain outline\r\n    ctx.beginPath();\r\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\r\n    ctx.strokeStyle = `${colors[0]}40`;\r\n    ctx.lineWidth = 2;\r\n    ctx.stroke();\r\n    \r\n    // Draw neural activity\r\n    const pointCount = 20;\r\n    for (let i = 0; i < pointCount; i++) {\r\n      const angle = (i / pointCount) * Math.PI * 2;\r\n      const distance = radius * (0.7 + Math.sin(time * 3 + i) * 0.1);\r\n      const x = centerX + Math.cos(angle) * distance;\r\n      const y = centerY + Math.sin(angle) * distance;\r\n      \r\n      // Draw activity point\r\n      ctx.beginPath();\r\n      ctx.arc(x, y, 2 + Math.sin(time * 5 + i) * 2, 0, Math.PI * 2);\r\n      ctx.fillStyle = `${colors[1]}${Math.floor((Math.sin(time * 3 + i) + 1) * 40 + 20).toString(16).padStart(2, '0')}`;\r\n      ctx.fill();\r\n      \r\n      // Draw connections\r\n      for (let j = i + 1; j < pointCount; j++) {\r\n        if (Math.random() > 0.7) {\r\n          const angle2 = (j / pointCount) * Math.PI * 2;\r\n          const distance2 = radius * (0.7 + Math.sin(time * 3 + j) * 0.1);\r\n          const x2 = centerX + Math.cos(angle2) * distance2;\r\n          const y2 = centerY + Math.sin(angle2) * distance2;\r\n          \r\n          ctx.beginPath();\r\n          ctx.moveTo(x, y);\r\n          ctx.lineTo(x2, y2);\r\n          ctx.strokeStyle = `${colors[2]}20`;\r\n          ctx.lineWidth = 0.5;\r\n          ctx.stroke();\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Different animation variants\r\n  const variants = {\r\n    default: {\r\n      particleCount: 40,\r\n      connectionDistance: 150,\r\n      speed: 0.5,\r\n      size: 3,\r\n      colors: {\r\n        light: ['#3b82f6', '#60a5fa', '#93c5fd', '#1e40af'],\r\n        dark: ['#1e40af', '#3b82f6', '#60a5fa', '#93c5fd'],\r\n      },\r\n      symbols: ['●', '▲', '■'], // Basic shapes\r\n      drawSpecial: drawNeuralNetwork\r\n    },\r\n    dna: {\r\n      particleCount: 60,\r\n      connectionDistance: 100,\r\n      speed: 0.3,\r\n      size: 2,\r\n      colors: {\r\n        light: ['#8b5cf6', '#a78bfa', '#c4b5fd', '#7c3aed'],\r\n        dark: ['#7c3aed', '#8b5cf6', '#a78bfa', '#c4b5fd'],\r\n      },\r\n      symbols: ['A', 'T', 'G', 'C'], // DNA nucleotides\r\n      drawSpecial: drawDNAHelix\r\n    },\r\n    cells: {\r\n      particleCount: 30,\r\n      connectionDistance: 200,\r\n      speed: 0.7,\r\n      size: 4,\r\n      colors: {\r\n        light: ['#10b981', '#34d399', '#6ee7b7', '#059669'],\r\n        dark: ['#059669', '#10b981', '#34d399', '#6ee7b7'],\r\n      },\r\n      symbols: ['⬤', '⚕', '+', '◉'],  // Cell & medical symbols\r\n      drawSpecial: drawCellDivision\r\n    },\r\n    network: {\r\n      particleCount: 80,\r\n      connectionDistance: 120,\r\n      speed: 0.4,\r\n      size: 2,\r\n      colors: {\r\n        light: ['#ef4444', '#f87171', '#fca5a5', '#dc2626'],\r\n        dark: ['#dc2626', '#ef4444', '#f87171', '#fca5a5'],\r\n      },\r\n      symbols: ['❤', '🫁', '🧠'], // Organ symbols\r\n      drawSpecial: drawPulseEffect\r\n    },\r\n    blood: {\r\n      particleCount: 50,\r\n      connectionDistance: 180,\r\n      speed: 0.6,\r\n      size: 3,\r\n      colors: {\r\n        light: ['#dc2626', '#ef4444', '#f87171', '#b91c1c'],\r\n        dark: ['#b91c1c', '#dc2626', '#ef4444', '#f87171'],\r\n      },\r\n      symbols: ['🩸', '💉', '❤️'],\r\n      drawSpecial: drawBloodFlow\r\n    },\r\n    brain: {\r\n      particleCount: 70,\r\n      connectionDistance: 140,\r\n      speed: 0.5,\r\n      size: 2,\r\n      colors: {\r\n        light: ['#7c3aed', '#8b5cf6', '#a78bfa', '#6d28d9'],\r\n        dark: ['#6d28d9', '#7c3aed', '#8b5cf6', '#a78bfa'],\r\n      },\r\n      symbols: ['🧠', '⚡', '💭'],\r\n      drawSpecial: drawBrainActivity\r\n    }\r\n  };\r\n\r\n  // Add transition effect\r\n  const drawTransition = (ctx, canvas, progress, fromColors, toColors) => {\r\n    const centerX = canvas.width / 2;\r\n    const centerY = canvas.height / 2;\r\n    const radius = Math.min(canvas.width, canvas.height) * 0.4;\r\n    \r\n    // Draw transition circle\r\n    ctx.beginPath();\r\n    ctx.arc(centerX, centerY, radius * progress, 0, Math.PI * 2);\r\n    ctx.strokeStyle = `${toColors[0]}${Math.floor(progress * 40).toString(16).padStart(2, '0')}`;\r\n    ctx.lineWidth = 2;\r\n    ctx.stroke();\r\n    \r\n    // Draw particles\r\n    const particleCount = 20;\r\n    for (let i = 0; i < particleCount; i++) {\r\n      const angle = (i / particleCount) * Math.PI * 2;\r\n      const distance = radius * progress;\r\n      const x = centerX + Math.cos(angle) * distance;\r\n      const y = centerY + Math.sin(angle) * distance;\r\n      \r\n      ctx.beginPath();\r\n      ctx.arc(x, y, 2, 0, Math.PI * 2);\r\n      ctx.fillStyle = `${toColors[1]}${Math.floor(progress * 60).toString(16).padStart(2, '0')}`;\r\n      ctx.fill();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    let animationFrameId;\r\n    let particles = [];\r\n    let time = 0;\r\n    let variantIndex = 0;\r\n    let lastVariantChange = Date.now();\r\n    let transitionStartTime = 0;\r\n    \r\n    // Set canvas dimensions\r\n    const handleResize = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    handleResize();\r\n    \r\n    // Initialize particles\r\n    const initializeParticles = (variantConfig) => {\r\n      const colors = darkMode ? variantConfig.colors.dark : variantConfig.colors.light;\r\n      particles = [];\r\n      \r\n      for (let i = 0; i < variantConfig.particleCount; i++) {\r\n        particles.push({\r\n          x: Math.random() * canvas.width,\r\n          y: Math.random() * canvas.height,\r\n          vx: (Math.random() - 0.5) * variantConfig.speed,\r\n          vy: (Math.random() - 0.5) * variantConfig.speed,\r\n          radius: Math.random() * variantConfig.size + 1,\r\n          color: colors[Math.floor(Math.random() * colors.length)],\r\n          symbol: variantConfig.symbols[Math.floor(Math.random() * variantConfig.symbols.length)],\r\n          rotation: Math.random() * Math.PI * 2,\r\n          rotationSpeed: (Math.random() - 0.5) * 0.02,\r\n          pulsePhase: Math.random() * Math.PI * 2,\r\n          scale: 1 + Math.random() * 0.5\r\n        });\r\n      }\r\n    };\r\n    \r\n    // Animation function\r\n    const animate = () => {\r\n      const currentTime = Date.now();\r\n      time += 0.01;\r\n      \r\n      // Check if it's time to change variants\r\n      if (currentTime - lastVariantChange >= VARIANT_DURATION && !isTransitioning) {\r\n        setIsTransitioning(true);\r\n        transitionStartTime = currentTime;\r\n        variantIndex = (variantIndex + 1) % allVariants.length;\r\n        setCurrentVariant(allVariants[variantIndex]);\r\n      }\r\n      \r\n      // Handle transition\r\n      if (isTransitioning) {\r\n        const transitionTime = currentTime - transitionStartTime;\r\n        const progress = Math.min(transitionTime / TRANSITION_DURATION, 1);\r\n        setTransitionProgress(progress);\r\n        \r\n        if (progress >= 1) {\r\n          setIsTransitioning(false);\r\n          lastVariantChange = currentTime;\r\n          initializeParticles(variants[allVariants[variantIndex]]);\r\n        }\r\n      }\r\n      \r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      // Get current and next variant configs\r\n      const currentConfig = variants[allVariants[variantIndex]];\r\n      const nextConfig = variants[allVariants[(variantIndex + 1) % allVariants.length]];\r\n      const currentColors = darkMode ? currentConfig.colors.dark : currentConfig.colors.light;\r\n      const nextColors = darkMode ? nextConfig.colors.dark : nextConfig.colors.light;\r\n      \r\n      // Draw current visualization\r\n      if (currentConfig.drawSpecial) {\r\n        currentConfig.drawSpecial(ctx, canvas, time, currentColors, darkMode);\r\n      }\r\n      \r\n      // Draw transition effect if transitioning\r\n      if (isTransitioning) {\r\n        drawTransition(ctx, canvas, transitionProgress, currentColors, nextColors);\r\n      }\r\n      \r\n      // Draw and update particles\r\n      particles.forEach(particle => {\r\n        // Move particle\r\n        particle.x += particle.vx;\r\n        particle.y += particle.vy;\r\n        particle.rotation += particle.rotationSpeed;\r\n        \r\n        // Boundary check\r\n        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;\r\n        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;\r\n        \r\n        // Draw particle - either as circle or symbol\r\n        if (Math.random() > 0.7) {\r\n          // Draw as circle\r\n          ctx.beginPath();\r\n          ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n          ctx.fillStyle = particle.color;\r\n          ctx.fill();\r\n        } else {\r\n          // Draw as symbol\r\n          ctx.save();\r\n          ctx.translate(particle.x, particle.y);\r\n          ctx.rotate(particle.rotation);\r\n          ctx.font = `${particle.radius * 4 * particle.scale}px Arial`;\r\n          ctx.fillStyle = particle.color;\r\n          ctx.fillText(particle.symbol, 0, 0);\r\n          ctx.restore();\r\n        }\r\n        \r\n        // Connect particles within range\r\n        if (currentVariant === 'dna') {\r\n          drawDNAEffect(particle, particles, ctx, currentConfig, time);\r\n        } else {\r\n          drawConnections(particle, particles, ctx, currentConfig);\r\n        }\r\n      });\r\n      \r\n      animationFrameId = requestAnimationFrame(animate);\r\n    };\r\n    \r\n    // Draw connections between nearby particles\r\n    const drawConnections = (particle, particles, ctx, config) => {\r\n      particles.forEach(other => {\r\n        if (particle === other) return;\r\n        \r\n        const dx = particle.x - other.x;\r\n        const dy = particle.y - other.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        \r\n        if (distance < config.connectionDistance) {\r\n          ctx.beginPath();\r\n          ctx.moveTo(particle.x, particle.y);\r\n          ctx.lineTo(other.x, other.y);\r\n          ctx.strokeStyle = `${particle.color}${Math.floor((1 - distance / config.connectionDistance) * 255).toString(16).padStart(2, '0')}`;\r\n          ctx.lineWidth = 0.5;\r\n          ctx.stroke();\r\n        }\r\n      });\r\n    };\r\n    \r\n    // Special DNA-like effect\r\n    const drawDNAEffect = (particle, particles, ctx, config, time) => {\r\n      const wavelength = 200;\r\n      const amplitude = 50;\r\n      \r\n      particles.forEach(other => {\r\n        if (particle === other) return;\r\n        \r\n        const dx = particle.x - other.x;\r\n        const dy = particle.y - other.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        \r\n        if (distance < config.connectionDistance) {\r\n          const wave1 = Math.sin((particle.x + time * 100) / wavelength) * amplitude;\r\n          const wave2 = Math.sin((other.x + time * 100) / wavelength) * amplitude;\r\n          \r\n          ctx.beginPath();\r\n          ctx.moveTo(particle.x, particle.y + wave1);\r\n          ctx.lineTo(other.x, other.y + wave2);\r\n          ctx.strokeStyle = `${particle.color}${Math.floor((1 - distance / config.connectionDistance) * 255).toString(16).padStart(2, '0')}`;\r\n          ctx.lineWidth = 0.5;\r\n          ctx.stroke();\r\n        }\r\n      });\r\n    };\r\n    \r\n    // Initialize first variant\r\n    initializeParticles(variants[allVariants[0]]);\r\n    animate();\r\n    \r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [darkMode]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      className=\"fixed top-0 left-0 w-full h-full -z-10 pointer-events-none\"\r\n      style={{ opacity: 0.15 }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MedicalBackground; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}