{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import axios from'axios';import{ArrowPathIcon,ExclamationCircleIcon}from'@heroicons/react/24/outline';import{useTheme}from'../contexts/ThemeContext';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const InteractiveViewer=_ref=>{let{caseId,selectedNoduleId,resultsPageView=false,onNoduleClick}=_ref;const[volumeInfo,setVolumeInfo]=useState(null);const[currentAxis,setCurrentAxis]=useState('axial');const[currentSlice,setCurrentSlice]=useState(0);const[sliceImage,setSliceImage]=useState(null);const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);const[nodulesInSlice,setNodulesInSlice]=useState([]);const[selectedNoduleState,setSelectedNoduleState]=useState(selectedNoduleId);const imageRef=useRef(null);const containerRef=useRef(null);const{darkMode}=useTheme();// Update local state when prop changes\nuseEffect(()=>{setSelectedNoduleState(selectedNoduleId);// If a nodule is selected from outside (e.g., from nodule table), navigate to it\nif(selectedNoduleId&&volumeInfo&&volumeInfo.nodules){const nodule=volumeInfo.nodules.find(n=>n.id===selectedNoduleId);if(nodule){console.log(`External selection of nodule ${selectedNoduleId}, navigating to slice ${nodule.z}`);// Always switch to axial view for nodule navigation from table\nsetCurrentAxis('axial');// Set the slice to the nodule's z-coordinate (with bounds checking)\nconst zSlice=Math.min(Math.max(0,Math.round(nodule.z)),volumeInfo.dimensions?volumeInfo.dimensions.depth-1:100);setCurrentSlice(zSlice);}}},[selectedNoduleId,volumeInfo]);// Get the auth token from localStorage\nconst getAuthToken=()=>{return localStorage.getItem('token');};// Setup axios request with auth headers\nconst createAuthorizedRequest=()=>{const token=getAuthToken();return{headers:token?{'Authorization':`Bearer ${token}`}:{}};};// Function to go to a specific nodule slice\nconst goToNoduleSlice=noduleId=>{if(!volumeInfo||!volumeInfo.nodules){console.error('Cannot go to nodule slice: volumeInfo or nodules not available');return;}console.log(`InteractiveViewer.goToNoduleSlice called with ID: \"${noduleId}\"`);console.log('Available nodules:',volumeInfo.nodules.map(n=>`\"${n.id}\"`).join(', '));// Find the selected nodule in the list - try exact match first\nlet nodule=volumeInfo.nodules.find(n=>n.id===noduleId);// If no exact match, try looser matching (sometimes IDs get transformed)\nif(!nodule&&typeof noduleId==='string'){// Try without spaces\nconst normalizedId=noduleId.replace(/\\s+/g,'');nodule=volumeInfo.nodules.find(n=>typeof n.id==='string'&&n.id.replace(/\\s+/g,'')===normalizedId||String(n.id)===noduleId);if(nodule){console.log(`Found nodule with normalized ID matching: ${nodule.id}`);}}if(!nodule){console.error(`Nodule with ID ${noduleId} not found, available nodules:`,volumeInfo.nodules);return;}console.log(`Navigating to nodule ${noduleId} at position z=${nodule.z}, y=${nodule.y}, x=${nodule.x}`);// Update the selected nodule state\nsetSelectedNoduleState(noduleId);// Always switch to axial view for best nodule visualization\nsetCurrentAxis('axial');// Navigate to the Z slice of the nodule (axial view)\nconst zSlice=Math.min(Math.max(0,Math.round(nodule.z)),volumeInfo.dimensions.depth-1);setCurrentSlice(zSlice);console.log(`Set axis to axial and slice to ${zSlice}`);};// Navigate to selected nodule when selectedNoduleId or volumeInfo changes\nuseEffect(()=>{if(selectedNoduleId&&volumeInfo&&volumeInfo.nodules){goToNoduleSlice(selectedNoduleId);}},[selectedNoduleId,volumeInfo]);// Fetch volume metadata\nuseEffect(()=>{const fetchVolumeInfo=async()=>{try{setIsLoading(true);// Add token to the request\nconst token=getAuthToken();let url=`/api/results/${caseId}/slices`;// Add token as query parameter as fallback\nif(token){url+=`?token=${token}`;}const response=await axios.get(url,createAuthorizedRequest());// Check if we received valid volume information\nif(response.data.volume_info){setVolumeInfo(response.data.volume_info);// Check if we're using placeholder data\nconst usingPlaceholder=response.data.using_placeholder||false;if(usingPlaceholder){console.warn('Using placeholder data for volume');}// Set initial slice to middle of volume\nconst initialSlice=Math.floor(response.data.volume_info.dimensions.depth/2)||0;setCurrentSlice(initialSlice);// If we're in a simplified view for the results page and there are nodules,\n// try to show a slice with a nodule if possible\nif(response.data.volume_info.nodules&&response.data.volume_info.nodules.length>0){// Find the slice with the most confident nodule\nconst mainNodule=response.data.volume_info.nodules.reduce((prev,current)=>current.confidence>prev.confidence?current:prev,response.data.volume_info.nodules[0]);// If there's a selected nodule ID and it matches one of our nodules, use that one\nif(selectedNoduleId){const selectedNodule=response.data.volume_info.nodules.find(n=>n.id===selectedNoduleId);if(selectedNodule){// Ensure we're setting a valid number, not NaN\nconst noduleZ=Math.round(selectedNodule.z);if(!isNaN(noduleZ)&&noduleZ>=0&&noduleZ<response.data.volume_info.dimensions.depth){setCurrentSlice(noduleZ);setSelectedNoduleState(selectedNoduleId);}}}// Else if no selected nodule or it wasn't found, navigate to the most confident nodule\nelse{// Ensure we're setting a valid number, not NaN\nconst noduleZ=Math.round(mainNodule.z);if(!isNaN(noduleZ)&&noduleZ>=0&&noduleZ<response.data.volume_info.dimensions.depth){setCurrentSlice(noduleZ);}}}}else{console.warn('No volume information received from server');// Set default volume info to prevent errors\nsetVolumeInfo({dimensions:{depth:1,height:512,width:512},spacing:[1.0,1.0,1.0],nodules:[]});setCurrentSlice(0);}setIsLoading(false);}catch(error){var _error$response,_error$response$data;console.error('Error fetching volume info:',error);setError(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Failed to load volume data');// Set default volume info to prevent errors\nsetVolumeInfo({dimensions:{depth:1,height:512,width:512},spacing:[1.0,1.0,1.0],nodules:[]});setCurrentSlice(0);setIsLoading(false);}};fetchVolumeInfo();},[caseId,resultsPageView]);// Fetch slice when axis or slice index changes\nuseEffect(()=>{const fetchSlice=async()=>{if(!volumeInfo)return;try{setIsLoading(true);// Add token to the request\nconst token=getAuthToken();let url=`/api/results/${caseId}/slices?axis=${currentAxis}&index=${currentSlice}`;// Add token as query parameter as fallback\nif(token){url+=`&token=${token}`;}const response=await axios.get(url,createAuthorizedRequest());// Check if we received a placeholder image\nconst isPlaceholder=response.data.is_placeholder||false;// Get the slice data, handling whether it includes the data:image prefix or not\nlet imageData=response.data.slice_data;if(!imageData){console.error('No slice data received');setError('No image data received from server');setIsLoading(false);return;}if(!imageData.startsWith('data:image')){imageData=`data:image/png;base64,${imageData}`;}// Update max dimension information if available\nif(response.data.all_dimensions){// Don't update volumeInfo here as it causes a render loop\n// Just store the dimensions for reference\nconst allDimensions={axial:response.data.all_dimensions.axial,coronal:response.data.all_dimensions.coronal,sagittal:response.data.all_dimensions.sagittal};// Only update the current max index if needed - this won't trigger a re-render\n// since we're not updating the volumeInfo state\nif(allDimensions[currentAxis]&&currentSlice>allDimensions[currentAxis]-1){setCurrentSlice(allDimensions[currentAxis]-1);}}// If max_index is provided, ensure we're not exceeding it\nif(response.data.max_index!==undefined&&currentSlice>response.data.max_index){setCurrentSlice(response.data.max_index);}setSliceImage({data:imageData,isPlaceholder:isPlaceholder});// If there's an error message, display it but still show the image\nif(response.data.error||response.data.message){console.warn('Server returned an error or message:',response.data.error||response.data.message);}setIsLoading(false);}catch(error){var _error$response2,_error$response2$data,_error$response3,_error$response3$data;console.error('Error fetching slice:',error);setError(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Failed to load slice');// Try to display error image if available\nif((_error$response3=error.response)!==null&&_error$response3!==void 0&&(_error$response3$data=_error$response3.data)!==null&&_error$response3$data!==void 0&&_error$response3$data.slice_data){try{let imageData=error.response.data.slice_data;if(!imageData.startsWith('data:image')){imageData=`data:image/png;base64,${imageData}`;}setSliceImage({data:imageData,isPlaceholder:true});}catch(imgError){console.error('Error processing error image:',imgError);}}setIsLoading(false);}};fetchSlice();},[caseId,currentAxis,currentSlice,volumeInfo]);// Find nodules in the current slice\nuseEffect(()=>{if(!volumeInfo||!volumeInfo.nodules)return;// Determine which nodules are visible in this slice\nconst sliceNodules=volumeInfo.nodules.filter(nodule=>{// Check if this nodule is visible in the current slice\nif(currentAxis==='axial'){// Check if the nodule's z-coordinate is close to this slice\nreturn Math.abs(nodule.z-currentSlice)<=nodule.radius;}else if(currentAxis==='coronal'){// Check if the nodule's y-coordinate is close to this slice\nreturn Math.abs(nodule.y-currentSlice)<=nodule.radius;}else{// sagittal\n// Check if the nodule's x-coordinate is close to this slice\nreturn Math.abs(nodule.x-currentSlice)<=nodule.radius;}});setNodulesInSlice(sliceNodules);},[volumeInfo,currentAxis,currentSlice]);// Draw nodule circles and center points when image loads or nodulesInSlice changes\nuseEffect(()=>{if(!sliceImage||!imageRef.current||nodulesInSlice.length===0)return;// Skip drawing nodules on placeholder images\nif(sliceImage.isPlaceholder)return;// Check if we're using MHD format with server-rendered nodules\nconst isMhdFormat=caseId&&(caseId.endsWith('.mhd')||caseId.includes('1.3.6.1.4.1.14519')||// LIDC-IDRI format\ncaseId.includes('1.2.826')// DICOM UID format\n);const drawNodules=()=>{// For MHD files with server-rendered nodules, we may not need to draw client-side\n// Client-side drawing might interfere with server-rendered nodules\nif(isMhdFormat){console.log('Using server-rendered nodules for MHD format');// We'll still make the nodules clickable, but won't draw overlays\nconst img=imageRef.current;if(!img.complete){img.onload=setupNoduleInteractions;return;}setupNoduleInteractions();return;}// Normal drawing for non-MHD formats\nconst img=imageRef.current;if(!img.complete){// Wait for image to load before drawing\nimg.onload=drawNodulesOnImage;return;}drawNodulesOnImage();};// This function just makes nodules clickable without drawing SVG overlays\nconst setupNoduleInteractions=()=>{const img=imageRef.current;const container=containerRef.current;// Create overlay div for event handling\nconst existingOverlay=container.querySelector('.nodule-overlay');if(existingOverlay){container.removeChild(existingOverlay);}// Create a minimal overlay just for handling clicks\nconst overlay=document.createElement('div');overlay.className='nodule-overlay';overlay.style.position='absolute';overlay.style.top='0';overlay.style.left='0';overlay.style.width='100%';overlay.style.height='100%';overlay.style.pointerEvents='auto';// Add click handler for the whole image\noverlay.addEventListener('click',event=>{// Get click coordinates relative to the image\nconst rect=img.getBoundingClientRect();const x=event.clientX-rect.left;const y=event.clientY-rect.top;// Normalize to 0-1 range\nconst xNorm=x/rect.width;const yNorm=y/rect.height;// Convert to image coordinates\nconst imgX=Math.round(xNorm*volumeInfo.dimensions.width);const imgY=Math.round(yNorm*volumeInfo.dimensions.height);// Find closest nodule to click point\nlet closestNodule=null;let minDistance=Infinity;nodulesInSlice.forEach(nodule=>{let nodeX,nodeY;if(currentAxis==='axial'){nodeX=nodule.x;nodeY=nodule.y;}else if(currentAxis==='coronal'){nodeX=nodule.x;nodeY=nodule.z;}else{// sagittal\nnodeX=nodule.y;nodeY=nodule.z;}const distance=Math.sqrt(Math.pow(nodeX-imgX,2)+Math.pow(nodeY-imgY,2));// Consider a nodule clicked if within 30px of its center\nif(distance<nodule.radius*2&&distance<minDistance){minDistance=distance;closestNodule=nodule;}});if(closestNodule){setSelectedNoduleState(closestNodule.id);if(onNoduleClick){onNoduleClick(closestNodule.id);}else{goToNoduleSlice(closestNodule.id);}}});container.appendChild(overlay);};// Original function for drawing nodules with SVG overlays\nconst drawNodulesOnImage=()=>{const img=imageRef.current;const container=containerRef.current;// Clear any existing overlay elements\nconst existingOverlay=container.querySelector('.nodule-overlay');if(existingOverlay){container.removeChild(existingOverlay);}// Create overlay div that will contain the SVG with nodule circles\nconst overlay=document.createElement('div');overlay.className='nodule-overlay';overlay.style.position='absolute';overlay.style.top='0';overlay.style.left='0';overlay.style.width='100%';overlay.style.height='100%';overlay.style.pointerEvents='auto';// Calculate image display dimensions and position\nconst imgRect=img.getBoundingClientRect();const containerRect=container.getBoundingClientRect();// Calculate aspect ratio for the current view\nlet aspectRatio=1.0;if(volumeInfo&&volumeInfo.spacing){if(currentAxis==='axial'){// Y/X aspect ratio for axial view\naspectRatio=volumeInfo.spacing[1]/volumeInfo.spacing[0];}else if(currentAxis==='coronal'){// Z/X aspect ratio for coronal view\naspectRatio=volumeInfo.spacing[2]/volumeInfo.spacing[0];}else{// sagittal\n// Z/Y aspect ratio for sagittal view\naspectRatio=volumeInfo.spacing[2]/volumeInfo.spacing[1];}}// Create SVG element for drawing\nconst svg=document.createElementNS('http://www.w3.org/2000/svg','svg');svg.setAttribute('width','100%');svg.setAttribute('height','100%');svg.style.position='absolute';svg.style.top='0';svg.style.left='0';// Get display dimensions for scaling\nconst displayWidth=imgRect.width;const displayHeight=imgRect.height;// Draw each nodule\nnodulesInSlice.forEach(nodule=>{let x,y,slicePos;// Calculate 2D coordinates based on the current viewing axis\nif(currentAxis==='axial'){x=nodule.x;y=nodule.y;slicePos=currentSlice;}else if(currentAxis==='coronal'){x=nodule.x;y=nodule.z;slicePos=currentSlice;}else{// sagittal\nx=nodule.y;y=nodule.z;slicePos=currentSlice;}// Calculate the position in normalized coordinates (0-1 range)\nlet xNorm,yNorm;if(currentAxis==='axial'){xNorm=x/volumeInfo.dimensions.width;yNorm=y/volumeInfo.dimensions.height;}else if(currentAxis==='coronal'){xNorm=x/volumeInfo.dimensions.width;yNorm=y/volumeInfo.dimensions.depth;}else{// sagittal\nxNorm=y/volumeInfo.dimensions.height;yNorm=nodule.z/volumeInfo.dimensions.depth;}// Apply proper scaling for the current view resolution\n// Convert from normalized coordinates to display pixels\nconst xPx=xNorm*displayWidth;// Apply aspect ratio correction to y-coordinate\n// This ensures that the nodule appears at the right vertical position\n// regardless of how the image is stretched or squeezed\nconst yPx=yNorm*displayHeight;// Calculate radius in pixels based on the nodule's radius in mm\n// Scale according to the current display size\nlet radiusMm=nodule.radius||5;// Default to 5mm if not specified\nlet pixelsPerMm;// Calculate pixels per mm based on the current view's spacing\nif(currentAxis==='axial'){// Use the minimum of width and height spacing for consistent sizing\nconst spacingX=volumeInfo.spacing?volumeInfo.spacing[0]:1;const spacingY=volumeInfo.spacing?volumeInfo.spacing[1]:1;const mmPerPixel=Math.min(spacingX,spacingY);// Calculate how many display pixels correspond to one mm in the CT scan\nconst widthInMm=volumeInfo.dimensions.width*spacingX;pixelsPerMm=displayWidth/widthInMm;}else if(currentAxis==='coronal'){const spacingX=volumeInfo.spacing?volumeInfo.spacing[0]:1;const spacingZ=volumeInfo.spacing?volumeInfo.spacing[2]:1;const mmPerPixel=Math.min(spacingX,spacingZ);// Calculate how many display pixels correspond to one mm in the CT scan\nconst widthInMm=volumeInfo.dimensions.width*spacingX;pixelsPerMm=displayWidth/widthInMm;}else{// sagittal\nconst spacingY=volumeInfo.spacing?volumeInfo.spacing[1]:1;const spacingZ=volumeInfo.spacing?volumeInfo.spacing[2]:1;const mmPerPixel=Math.min(spacingY,spacingZ);// Calculate how many display pixels correspond to one mm in the CT scan\nconst heightInMm=volumeInfo.dimensions.height*spacingY;pixelsPerMm=displayHeight/heightInMm;}// Calculate the radius in display pixels\nlet radiusPixels=radiusMm*pixelsPerMm;// Make circles more appropriately sized for visualization\nradiusPixels=Math.max(8,radiusPixels*0.75);// Increase from 0.5 to 0.75 multiplier with larger minimum radius\n// Adjust the radius based on how far the nodule is from the current slice\nlet distanceFromSlice;if(currentAxis==='axial'){distanceFromSlice=Math.abs(nodule.z-slicePos);}else if(currentAxis==='coronal'){distanceFromSlice=Math.abs(nodule.y-slicePos);}else{// sagittal\ndistanceFromSlice=Math.abs(nodule.x-slicePos);}// Calculate the nodule color based on confidence\n// Use a lighter red for better visibility\nconst color='#FF5555';// Lighter red color for all nodules\n// Create circle element for nodule outline\nconst circle=document.createElementNS('http://www.w3.org/2000/svg','circle');circle.setAttribute('cx',xPx);circle.setAttribute('cy',yPx);circle.setAttribute('r',radiusPixels);circle.setAttribute('fill','rgba(255, 150, 150, 0.15)');// Lighter red fill with lower opacity\ncircle.setAttribute('stroke',color);circle.setAttribute('stroke-width','1.5');// Thinner stroke\ncircle.setAttribute('data-nodule-id',nodule.id);// Add nodule ID as data attribute\n// Make nodules interactive - turn off pointer-events: none on the overlay\noverlay.style.pointerEvents='auto';// Create dot element for center point\nconst centerDot=document.createElementNS('http://www.w3.org/2000/svg','circle');centerDot.setAttribute('cx',xPx);centerDot.setAttribute('cy',yPx);centerDot.setAttribute('r','3');centerDot.setAttribute('fill',color);centerDot.setAttribute('data-nodule-id',nodule.id);// Add nodule ID to center dot too\n// Highlight selected nodule with a thicker stroke\nif(selectedNoduleState===nodule.id){circle.setAttribute('stroke-width','3');// Still thicker for selected but reduced\ncircle.setAttribute('stroke-dasharray','5,3');circle.setAttribute('fill','rgba(255, 150, 150, 0.35)');// Lighter red fill for selected nodule\ncenterDot.setAttribute('r','4');// Slightly smaller center dot for selected nodule\n}// Add click event listeners to circle and centerDot\nconst handleClick=event=>{event.stopPropagation();// Prevent click from propagating to container\nconst noduleId=event.target.getAttribute('data-nodule-id');if(noduleId){// Set selected nodule state locally\nsetSelectedNoduleState(noduleId);// Call the parent's handler if provided\nif(onNoduleClick){onNoduleClick(noduleId);}else{// Otherwise use our own navigation\ngoToNoduleSlice(noduleId);}// Redraw nodules to update selection highlighting\nsetTimeout(()=>drawNodulesOnImage(),0);}};// Add event listeners\ncircle.addEventListener('click',handleClick);centerDot.addEventListener('click',handleClick);// Add tooltip with nodule info\nconst tooltip=document.createElementNS('http://www.w3.org/2000/svg','title');const confidence=nodule.confidence?(nodule.confidence*100).toFixed(0)+'%':'N/A';const malignancy=nodule.malignancy||'Unknown';tooltip.textContent=`Nodule ${nodule.id}\\nConfidence: ${confidence}\\nMalignancy: ${malignancy}`;circle.appendChild(tooltip);// Add mouseover/mouseout effects for better interaction\ncircle.addEventListener('mouseover',()=>{circle.setAttribute('stroke-width','2.5');circle.setAttribute('fill','rgba(255, 150, 150, 0.25)');centerDot.setAttribute('r','4');});circle.addEventListener('mouseout',()=>{if(selectedNoduleState===nodule.id){circle.setAttribute('stroke-width','3');circle.setAttribute('fill','rgba(255, 150, 150, 0.35)');centerDot.setAttribute('r','4');}else{circle.setAttribute('stroke-width','1.5');circle.setAttribute('fill','rgba(255, 150, 150, 0.15)');centerDot.setAttribute('r','3');}});centerDot.addEventListener('mouseover',()=>{circle.setAttribute('stroke-width','2.5');circle.setAttribute('fill','rgba(255, 150, 150, 0.25)');centerDot.setAttribute('r','4');});centerDot.addEventListener('mouseout',()=>{if(selectedNoduleState===nodule.id){circle.setAttribute('stroke-width','3');circle.setAttribute('fill','rgba(255, 150, 150, 0.35)');centerDot.setAttribute('r','4');}else{circle.setAttribute('stroke-width','1.5');circle.setAttribute('fill','rgba(255, 150, 150, 0.15)');centerDot.setAttribute('r','3');}});svg.appendChild(circle);svg.appendChild(centerDot);});overlay.appendChild(svg);container.appendChild(overlay);};drawNodules();// Cleanup function\nreturn()=>{const container=containerRef.current;if(container){const overlay=container.querySelector('.nodule-overlay');if(overlay){container.removeChild(overlay);}}};},[sliceImage,nodulesInSlice,currentAxis,selectedNoduleState,volumeInfo,resultsPageView]);// Get max slice index for current axis\nconst getMaxSliceIndex=()=>{if(!volumeInfo)return 0;try{if(currentAxis==='axial'){return Math.max(0,volumeInfo.dimensions.depth-1);}else if(currentAxis==='coronal'){return Math.max(0,volumeInfo.dimensions.height-1);}else{// sagittal\nreturn Math.max(0,volumeInfo.dimensions.width-1);}}catch(error){console.error('Error determining max slice index:',error);return 0;}};const handleAxisChange=axis=>{setCurrentAxis(axis);// Reset to middle slice when changing axis\nif(!volumeInfo)return;let middle;if(axis==='axial'){middle=Math.floor(volumeInfo.dimensions.depth/2);}else if(axis==='coronal'){middle=Math.floor(volumeInfo.dimensions.height/2);}else{// sagittal\nmiddle=Math.floor(volumeInfo.dimensions.width/2);}// Ensure we're setting a valid number, not NaN\nif(!isNaN(middle)&&middle>=0){setCurrentSlice(middle);}};const handleSliceChange=e=>{const value=parseInt(e.target.value,10);// Validate before setting\nif(!isNaN(value)&&value>=0&&value<=getMaxSliceIndex()){setCurrentSlice(value);}};// Track which slices have nodules to highlight them on the slider\nconst slicesWithNodules=()=>{if(!volumeInfo||!volumeInfo.nodules)return[];// Don't show nodule indicators on the slider in results page view\nif(resultsPageView)return[];const noduleSlices=new Set();volumeInfo.nodules.forEach(nodule=>{if(currentAxis==='axial'){// Mark all slices within the nodule's radius\nconst start=Math.max(0,Math.floor(nodule.z-nodule.radius));const end=Math.min(volumeInfo.dimensions.depth-1,Math.ceil(nodule.z+nodule.radius));for(let i=start;i<=end;i++){noduleSlices.add(i);}}else if(currentAxis==='coronal'){const start=Math.max(0,Math.floor(nodule.y-nodule.radius));const end=Math.min(volumeInfo.dimensions.height-1,Math.ceil(nodule.y+nodule.radius));for(let i=start;i<=end;i++){noduleSlices.add(i);}}else{// sagittal\nconst start=Math.max(0,Math.floor(nodule.x-nodule.radius));const end=Math.min(volumeInfo.dimensions.width-1,Math.ceil(nodule.x+nodule.radius));for(let i=start;i<=end;i++){noduleSlices.add(i);}}});return Array.from(noduleSlices);};// Nodule colors for different confidence levels\nconst getNoduleColor=confidence=>{if(confidence>=0.8)return'rgba(220, 38, 38, 0.8)';// Red for high confidence\nif(confidence>=0.6)return'rgba(234, 88, 12, 0.8)';// Orange for medium confidence\nreturn'rgba(234, 179, 8, 0.8)';// Yellow for lower confidence\n};return/*#__PURE__*/_jsx(\"div\",{className:`relative w-full h-full ${resultsPageView?'results-page-view':''}`,ref:containerRef,children:resultsPageView?/*#__PURE__*/_jsx(_Fragment,{children:isLoading?/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center justify-center w-full h-full bg-gray-200\",children:/*#__PURE__*/_jsx(ArrowPathIcon,{className:\"h-8 w-8 animate-spin text-gray-400\"})}):error?/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center justify-center w-full h-full bg-gray-200\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center p-4\",children:[/*#__PURE__*/_jsx(ExclamationCircleIcon,{className:\"h-8 w-8 mx-auto mb-2 text-red-500\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-sm text-gray-600\",children:\"Error loading scan\"})]})}):sliceImage?/*#__PURE__*/_jsxs(\"div\",{className:\"w-full h-full overflow-hidden relative\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center justify-center h-full\",children:/*#__PURE__*/_jsx(\"img\",{ref:imageRef,src:sliceImage.data,alt:`Axial view of scan ${caseId}`,className:\"object-contain max-h-full max-w-full\",style:{objectPosition:'center center',maxHeight:'260px'}})}),sliceImage.isPlaceholder&&/*#__PURE__*/_jsx(\"div\",{className:\"absolute bottom-0 left-0 right-0 bg-red-500 bg-opacity-70 text-white text-center py-1 text-sm\",children:\"Placeholder Image - Scan Data Unavailable\"})]}):/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center justify-center w-full h-full bg-gray-200\",children:/*#__PURE__*/_jsx(\"p\",{className:\"text-sm text-gray-500\",children:\"No image available\"})})}):/*#__PURE__*/// Original interactive viewer with all controls for the detail page\n_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:`absolute top-2 left-2 z-10 rounded-lg shadow-md ${darkMode?'bg-gray-800':'bg-white'}`,children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex p-1 space-x-1\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleAxisChange('axial'),className:`px-3 py-1.5 text-xs font-medium rounded-md ${currentAxis==='axial'?darkMode?'bg-indigo-600 text-white':'bg-indigo-100 text-indigo-700':darkMode?'text-gray-300 hover:bg-gray-700':'text-gray-700 hover:bg-gray-100'}`,children:\"Axial\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleAxisChange('coronal'),className:`px-3 py-1.5 text-xs font-medium rounded-md ${currentAxis==='coronal'?darkMode?'bg-indigo-600 text-white':'bg-indigo-100 text-indigo-700':darkMode?'text-gray-300 hover:bg-gray-700':'text-gray-700 hover:bg-gray-100'}`,children:\"Coronal\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleAxisChange('sagittal'),className:`px-3 py-1.5 text-xs font-medium rounded-md ${currentAxis==='sagittal'?darkMode?'bg-indigo-600 text-white':'bg-indigo-100 text-indigo-700':darkMode?'text-gray-300 hover:bg-gray-700':'text-gray-700 hover:bg-gray-100'}`,children:\"Sagittal\"})]})}),/*#__PURE__*/_jsxs(\"div\",{className:`absolute bottom-2 left-1/2 transform -translate-x-1/2 z-10 p-2 rounded-lg shadow-md ${darkMode?'bg-gray-800':'bg-white'}`,style:{width:'90%',maxWidth:'400px'},children:[/*#__PURE__*/_jsx(\"input\",{type:\"range\",min:\"0\",max:getMaxSliceIndex(),value:currentSlice,onChange:handleSliceChange,className:\"w-full h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between text-xs mt-1\",children:[/*#__PURE__*/_jsxs(\"span\",{className:darkMode?'text-gray-400':'text-gray-500',children:[\"Slice: \",currentSlice+1,\"/\",getMaxSliceIndex()+1]}),/*#__PURE__*/_jsxs(\"span\",{className:darkMode?'text-gray-400':'text-gray-500',children:[slicesWithNodules().includes(currentSlice)?'🔴 Nodule present':'',sliceImage&&sliceImage.isPlaceholder?'⚠️ Placeholder':'']})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"w-full h-full relative\",children:sliceImage?/*#__PURE__*/_jsxs(\"div\",{className:\"relative w-full h-full\",children:[/*#__PURE__*/_jsx(\"img\",{ref:imageRef,src:sliceImage.data,alt:`${currentAxis.charAt(0).toUpperCase()+currentAxis.slice(1)} slice of CT scan`,className:\"w-full h-full object-contain\"}),sliceImage.isPlaceholder&&/*#__PURE__*/_jsx(\"div\",{className:\"absolute bottom-0 left-0 right-0 bg-red-500 bg-opacity-70 text-white text-center py-1 text-sm\",children:\"Placeholder Image - Scan Data Unavailable\"})]}):/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center justify-center w-full h-full bg-gray-200\",children:/*#__PURE__*/_jsx(\"p\",{className:\"text-sm text-gray-500\",children:\"No image available\"})})})]})});};export default InteractiveViewer;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","ArrowPathIcon","ExclamationCircleIcon","useTheme","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","InteractiveViewer","_ref","caseId","selectedNoduleId","resultsPageView","onNoduleClick","volumeInfo","setVolumeInfo","currentAxis","setCurrentAxis","currentSlice","setCurrentSlice","sliceImage","setSliceImage","isLoading","setIsLoading","error","setError","nodulesInSlice","setNodulesInSlice","selectedNoduleState","setSelectedNoduleState","imageRef","containerRef","darkMode","nodules","nodule","find","n","id","console","log","z","zSlice","Math","min","max","round","dimensions","depth","getAuthToken","localStorage","getItem","createAuthorizedRequest","token","headers","goToNoduleSlice","noduleId","map","join","normalizedId","replace","String","y","x","fetchVolumeInfo","url","response","get","data","volume_info","usingPlaceholder","using_placeholder","warn","initialSlice","floor","length","mainNodule","reduce","prev","current","confidence","selectedNodule","noduleZ","isNaN","height","width","spacing","_error$response","_error$response$data","message","fetchSlice","isPlaceholder","is_placeholder","imageData","slice_data","startsWith","all_dimensions","allDimensions","axial","coronal","sagittal","max_index","undefined","_error$response2","_error$response2$data","_error$response3","_error$response3$data","imgError","sliceNodules","filter","abs","radius","isMhdFormat","endsWith","includes","drawNodules","img","complete","onload","setupNoduleInteractions","drawNodulesOnImage","container","existingOverlay","querySelector","removeChild","overlay","document","createElement","className","style","position","top","left","pointerEvents","addEventListener","event","rect","getBoundingClientRect","clientX","clientY","xNorm","yNorm","imgX","imgY","closestNodule","minDistance","Infinity","forEach","nodeX","nodeY","distance","sqrt","pow","appendChild","imgRect","containerRect","aspectRatio","svg","createElementNS","setAttribute","displayWidth","displayHeight","slicePos","xPx","yPx","radiusMm","pixelsPerMm","spacingX","spacingY","mmPerPixel","widthInMm","spacingZ","heightInMm","radiusPixels","distanceFromSlice","color","circle","centerDot","handleClick","stopPropagation","target","getAttribute","setTimeout","tooltip","toFixed","malignancy","textContent","getMaxSliceIndex","handleAxisChange","axis","middle","handleSliceChange","e","value","parseInt","slicesWithNodules","noduleSlices","Set","start","end","ceil","i","add","Array","from","getNoduleColor","ref","children","src","alt","objectPosition","maxHeight","onClick","maxWidth","type","onChange","charAt","toUpperCase","slice"],"sources":["C:/Users/kouss/Desktop/Cursor/Segmentation/pipeline/webapp/static/src/components/InteractiveViewer.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { ArrowPathIcon, ExclamationCircleIcon } from '@heroicons/react/24/outline';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\n\r\nconst InteractiveViewer = ({ caseId, selectedNoduleId, resultsPageView = false, onNoduleClick }) => {\r\n  const [volumeInfo, setVolumeInfo] = useState(null);\r\n  const [currentAxis, setCurrentAxis] = useState('axial');\r\n  const [currentSlice, setCurrentSlice] = useState(0);\r\n  const [sliceImage, setSliceImage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [nodulesInSlice, setNodulesInSlice] = useState([]);\r\n  const [selectedNoduleState, setSelectedNoduleState] = useState(selectedNoduleId);\r\n  const imageRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n  const { darkMode } = useTheme();\r\n\r\n  // Update local state when prop changes\r\n  useEffect(() => {\r\n    setSelectedNoduleState(selectedNoduleId);\r\n    \r\n    // If a nodule is selected from outside (e.g., from nodule table), navigate to it\r\n    if (selectedNoduleId && volumeInfo && volumeInfo.nodules) {\r\n      const nodule = volumeInfo.nodules.find(n => n.id === selectedNoduleId);\r\n      if (nodule) {\r\n        console.log(`External selection of nodule ${selectedNoduleId}, navigating to slice ${nodule.z}`);\r\n        \r\n        // Always switch to axial view for nodule navigation from table\r\n        setCurrentAxis('axial');\r\n        \r\n        // Set the slice to the nodule's z-coordinate (with bounds checking)\r\n        const zSlice = Math.min(Math.max(0, Math.round(nodule.z)), \r\n                               volumeInfo.dimensions ? (volumeInfo.dimensions.depth - 1) : 100);\r\n        setCurrentSlice(zSlice);\r\n      }\r\n    }\r\n  }, [selectedNoduleId, volumeInfo]);\r\n\r\n  // Get the auth token from localStorage\r\n  const getAuthToken = () => {\r\n    return localStorage.getItem('token');\r\n  };\r\n\r\n  // Setup axios request with auth headers\r\n  const createAuthorizedRequest = () => {\r\n    const token = getAuthToken();\r\n    return {\r\n      headers: token ? { 'Authorization': `Bearer ${token}` } : {}\r\n    };\r\n  };\r\n\r\n  // Function to go to a specific nodule slice\r\n  const goToNoduleSlice = (noduleId) => {\r\n    if (!volumeInfo || !volumeInfo.nodules) {\r\n      console.error('Cannot go to nodule slice: volumeInfo or nodules not available');\r\n      return;\r\n    }\r\n    \r\n    console.log(`InteractiveViewer.goToNoduleSlice called with ID: \"${noduleId}\"`);\r\n    console.log('Available nodules:', volumeInfo.nodules.map(n => `\"${n.id}\"`).join(', '));\r\n    \r\n    // Find the selected nodule in the list - try exact match first\r\n    let nodule = volumeInfo.nodules.find(n => n.id === noduleId);\r\n    \r\n    // If no exact match, try looser matching (sometimes IDs get transformed)\r\n    if (!nodule && typeof noduleId === 'string') {\r\n      // Try without spaces\r\n      const normalizedId = noduleId.replace(/\\s+/g, '');\r\n      nodule = volumeInfo.nodules.find(n => \r\n        (typeof n.id === 'string' && n.id.replace(/\\s+/g, '') === normalizedId) ||\r\n        String(n.id) === noduleId\r\n      );\r\n      \r\n      if (nodule) {\r\n        console.log(`Found nodule with normalized ID matching: ${nodule.id}`);\r\n      }\r\n    }\r\n    \r\n    if (!nodule) {\r\n      console.error(`Nodule with ID ${noduleId} not found, available nodules:`, volumeInfo.nodules);\r\n      return;\r\n    }\r\n    \r\n    console.log(`Navigating to nodule ${noduleId} at position z=${nodule.z}, y=${nodule.y}, x=${nodule.x}`);\r\n    \r\n    // Update the selected nodule state\r\n    setSelectedNoduleState(noduleId);\r\n    \r\n    // Always switch to axial view for best nodule visualization\r\n    setCurrentAxis('axial');\r\n    \r\n    // Navigate to the Z slice of the nodule (axial view)\r\n    const zSlice = Math.min(Math.max(0, Math.round(nodule.z)), volumeInfo.dimensions.depth - 1);\r\n    setCurrentSlice(zSlice);\r\n    \r\n    console.log(`Set axis to axial and slice to ${zSlice}`);\r\n  };\r\n\r\n  // Navigate to selected nodule when selectedNoduleId or volumeInfo changes\r\n  useEffect(() => {\r\n    if (selectedNoduleId && volumeInfo && volumeInfo.nodules) {\r\n      goToNoduleSlice(selectedNoduleId);\r\n    }\r\n  }, [selectedNoduleId, volumeInfo]);\r\n\r\n  // Fetch volume metadata\r\n  useEffect(() => {\r\n    const fetchVolumeInfo = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        \r\n        // Add token to the request\r\n        const token = getAuthToken();\r\n        let url = `/api/results/${caseId}/slices`;\r\n        \r\n        // Add token as query parameter as fallback\r\n        if (token) {\r\n          url += `?token=${token}`;\r\n        }\r\n        \r\n        const response = await axios.get(url, createAuthorizedRequest());\r\n        \r\n        // Check if we received valid volume information\r\n        if (response.data.volume_info) {\r\n          setVolumeInfo(response.data.volume_info);\r\n          \r\n          // Check if we're using placeholder data\r\n          const usingPlaceholder = response.data.using_placeholder || false;\r\n          if (usingPlaceholder) {\r\n            console.warn('Using placeholder data for volume');\r\n          }\r\n          \r\n          // Set initial slice to middle of volume\r\n          const initialSlice = Math.floor(response.data.volume_info.dimensions.depth / 2) || 0;\r\n          setCurrentSlice(initialSlice);\r\n          \r\n          // If we're in a simplified view for the results page and there are nodules,\r\n          // try to show a slice with a nodule if possible\r\n          if (response.data.volume_info.nodules && response.data.volume_info.nodules.length > 0) {\r\n            // Find the slice with the most confident nodule\r\n            const mainNodule = response.data.volume_info.nodules.reduce(\r\n              (prev, current) => (current.confidence > prev.confidence) ? current : prev,\r\n              response.data.volume_info.nodules[0]\r\n            );\r\n            \r\n            // If there's a selected nodule ID and it matches one of our nodules, use that one\r\n            if (selectedNoduleId) {\r\n              const selectedNodule = response.data.volume_info.nodules.find(n => n.id === selectedNoduleId);\r\n              if (selectedNodule) {\r\n                // Ensure we're setting a valid number, not NaN\r\n                const noduleZ = Math.round(selectedNodule.z);\r\n                if (!isNaN(noduleZ) && noduleZ >= 0 && noduleZ < response.data.volume_info.dimensions.depth) {\r\n                  setCurrentSlice(noduleZ);\r\n                  setSelectedNoduleState(selectedNoduleId);\r\n                }\r\n              }\r\n            } \r\n            // Else if no selected nodule or it wasn't found, navigate to the most confident nodule\r\n            else {\r\n              // Ensure we're setting a valid number, not NaN\r\n              const noduleZ = Math.round(mainNodule.z);\r\n              if (!isNaN(noduleZ) && noduleZ >= 0 && noduleZ < response.data.volume_info.dimensions.depth) {\r\n                setCurrentSlice(noduleZ);\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          console.warn('No volume information received from server');\r\n          // Set default volume info to prevent errors\r\n          setVolumeInfo({\r\n            dimensions: { depth: 1, height: 512, width: 512 },\r\n            spacing: [1.0, 1.0, 1.0],\r\n            nodules: []\r\n          });\r\n          setCurrentSlice(0);\r\n        }\r\n        \r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching volume info:', error);\r\n        setError(error.response?.data?.message || 'Failed to load volume data');\r\n        // Set default volume info to prevent errors\r\n        setVolumeInfo({\r\n          dimensions: { depth: 1, height: 512, width: 512 },\r\n          spacing: [1.0, 1.0, 1.0],\r\n          nodules: []\r\n        });\r\n        setCurrentSlice(0);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchVolumeInfo();\r\n  }, [caseId, resultsPageView]);\r\n\r\n  // Fetch slice when axis or slice index changes\r\n  useEffect(() => {\r\n    const fetchSlice = async () => {\r\n      if (!volumeInfo) return;\r\n      \r\n      try {\r\n        setIsLoading(true);\r\n        \r\n        // Add token to the request\r\n        const token = getAuthToken();\r\n        let url = `/api/results/${caseId}/slices?axis=${currentAxis}&index=${currentSlice}`;\r\n        \r\n        // Add token as query parameter as fallback\r\n        if (token) {\r\n          url += `&token=${token}`;\r\n        }\r\n        \r\n        const response = await axios.get(url, createAuthorizedRequest());\r\n        \r\n        // Check if we received a placeholder image\r\n        const isPlaceholder = response.data.is_placeholder || false;\r\n        \r\n        // Get the slice data, handling whether it includes the data:image prefix or not\r\n        let imageData = response.data.slice_data;\r\n        if (!imageData) {\r\n          console.error('No slice data received');\r\n          setError('No image data received from server');\r\n          setIsLoading(false);\r\n          return;\r\n        }\r\n        \r\n        if (!imageData.startsWith('data:image')) {\r\n          imageData = `data:image/png;base64,${imageData}`;\r\n        }\r\n        \r\n        // Update max dimension information if available\r\n        if (response.data.all_dimensions) {\r\n          // Don't update volumeInfo here as it causes a render loop\r\n          // Just store the dimensions for reference\r\n          const allDimensions = {\r\n            axial: response.data.all_dimensions.axial,\r\n            coronal: response.data.all_dimensions.coronal,\r\n            sagittal: response.data.all_dimensions.sagittal\r\n          };\r\n          \r\n          // Only update the current max index if needed - this won't trigger a re-render\r\n          // since we're not updating the volumeInfo state\r\n          if (allDimensions[currentAxis] && currentSlice > allDimensions[currentAxis] - 1) {\r\n            setCurrentSlice(allDimensions[currentAxis] - 1);\r\n          }\r\n        }\r\n        \r\n        // If max_index is provided, ensure we're not exceeding it\r\n        if (response.data.max_index !== undefined && currentSlice > response.data.max_index) {\r\n          setCurrentSlice(response.data.max_index);\r\n        }\r\n        \r\n        setSliceImage({\r\n          data: imageData,\r\n          isPlaceholder: isPlaceholder\r\n        });\r\n        \r\n        // If there's an error message, display it but still show the image\r\n        if (response.data.error || response.data.message) {\r\n          console.warn('Server returned an error or message:', response.data.error || response.data.message);\r\n        }\r\n        \r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching slice:', error);\r\n        setError(error.response?.data?.message || 'Failed to load slice');\r\n        \r\n        // Try to display error image if available\r\n        if (error.response?.data?.slice_data) {\r\n          try {\r\n            let imageData = error.response.data.slice_data;\r\n            if (!imageData.startsWith('data:image')) {\r\n              imageData = `data:image/png;base64,${imageData}`;\r\n            }\r\n            \r\n            setSliceImage({\r\n              data: imageData,\r\n              isPlaceholder: true\r\n            });\r\n          } catch (imgError) {\r\n            console.error('Error processing error image:', imgError);\r\n          }\r\n        }\r\n        \r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchSlice();\r\n  }, [caseId, currentAxis, currentSlice, volumeInfo]);\r\n\r\n  // Find nodules in the current slice\r\n  useEffect(() => {\r\n    if (!volumeInfo || !volumeInfo.nodules) return;\r\n    \r\n    // Determine which nodules are visible in this slice\r\n    const sliceNodules = volumeInfo.nodules.filter(nodule => {\r\n      // Check if this nodule is visible in the current slice\r\n      if (currentAxis === 'axial') {\r\n        // Check if the nodule's z-coordinate is close to this slice\r\n        return Math.abs(nodule.z - currentSlice) <= nodule.radius;\r\n      } else if (currentAxis === 'coronal') {\r\n        // Check if the nodule's y-coordinate is close to this slice\r\n        return Math.abs(nodule.y - currentSlice) <= nodule.radius;\r\n      } else { // sagittal\r\n        // Check if the nodule's x-coordinate is close to this slice\r\n        return Math.abs(nodule.x - currentSlice) <= nodule.radius;\r\n      }\r\n    });\r\n    \r\n    setNodulesInSlice(sliceNodules);\r\n  }, [volumeInfo, currentAxis, currentSlice]);\r\n\r\n  // Draw nodule circles and center points when image loads or nodulesInSlice changes\r\n  useEffect(() => {\r\n    if (!sliceImage || !imageRef.current || nodulesInSlice.length === 0) return;\r\n    \r\n    // Skip drawing nodules on placeholder images\r\n    if (sliceImage.isPlaceholder) return;\r\n\r\n    // Check if we're using MHD format with server-rendered nodules\r\n    const isMhdFormat = caseId && (\r\n      caseId.endsWith('.mhd') || \r\n      caseId.includes('1.3.6.1.4.1.14519') || // LIDC-IDRI format\r\n      caseId.includes('1.2.826') // DICOM UID format\r\n    );\r\n\r\n    const drawNodules = () => {\r\n      // For MHD files with server-rendered nodules, we may not need to draw client-side\r\n      // Client-side drawing might interfere with server-rendered nodules\r\n      if (isMhdFormat) {\r\n        console.log('Using server-rendered nodules for MHD format');\r\n        // We'll still make the nodules clickable, but won't draw overlays\r\n        const img = imageRef.current;\r\n        if (!img.complete) {\r\n          img.onload = setupNoduleInteractions;\r\n          return;\r\n        }\r\n        setupNoduleInteractions();\r\n        return;\r\n      }\r\n      \r\n      // Normal drawing for non-MHD formats\r\n      const img = imageRef.current;\r\n      if (!img.complete) {\r\n        // Wait for image to load before drawing\r\n        img.onload = drawNodulesOnImage;\r\n        return;\r\n      }\r\n      \r\n      drawNodulesOnImage();\r\n    };\r\n\r\n    // This function just makes nodules clickable without drawing SVG overlays\r\n    const setupNoduleInteractions = () => {\r\n      const img = imageRef.current;\r\n      const container = containerRef.current;\r\n      \r\n      // Create overlay div for event handling\r\n      const existingOverlay = container.querySelector('.nodule-overlay');\r\n      if (existingOverlay) {\r\n        container.removeChild(existingOverlay);\r\n      }\r\n      \r\n      // Create a minimal overlay just for handling clicks\r\n      const overlay = document.createElement('div');\r\n      overlay.className = 'nodule-overlay';\r\n      overlay.style.position = 'absolute';\r\n      overlay.style.top = '0';\r\n      overlay.style.left = '0';\r\n      overlay.style.width = '100%';\r\n      overlay.style.height = '100%';\r\n      overlay.style.pointerEvents = 'auto';\r\n      \r\n      // Add click handler for the whole image\r\n      overlay.addEventListener('click', (event) => {\r\n        // Get click coordinates relative to the image\r\n        const rect = img.getBoundingClientRect();\r\n        const x = event.clientX - rect.left;\r\n        const y = event.clientY - rect.top;\r\n        \r\n        // Normalize to 0-1 range\r\n        const xNorm = x / rect.width;\r\n        const yNorm = y / rect.height;\r\n        \r\n        // Convert to image coordinates\r\n        const imgX = Math.round(xNorm * volumeInfo.dimensions.width);\r\n        const imgY = Math.round(yNorm * volumeInfo.dimensions.height);\r\n        \r\n        // Find closest nodule to click point\r\n        let closestNodule = null;\r\n        let minDistance = Infinity;\r\n        \r\n        nodulesInSlice.forEach(nodule => {\r\n          let nodeX, nodeY;\r\n          \r\n          if (currentAxis === 'axial') {\r\n            nodeX = nodule.x;\r\n            nodeY = nodule.y;\r\n          } else if (currentAxis === 'coronal') {\r\n            nodeX = nodule.x;\r\n            nodeY = nodule.z;\r\n          } else { // sagittal\r\n            nodeX = nodule.y;\r\n            nodeY = nodule.z;\r\n          }\r\n          \r\n          const distance = Math.sqrt(\r\n            Math.pow(nodeX - imgX, 2) + \r\n            Math.pow(nodeY - imgY, 2)\r\n          );\r\n          \r\n          // Consider a nodule clicked if within 30px of its center\r\n          if (distance < nodule.radius * 2 && distance < minDistance) {\r\n            minDistance = distance;\r\n            closestNodule = nodule;\r\n          }\r\n        });\r\n        \r\n        if (closestNodule) {\r\n          setSelectedNoduleState(closestNodule.id);\r\n          \r\n          if (onNoduleClick) {\r\n            onNoduleClick(closestNodule.id);\r\n          } else {\r\n            goToNoduleSlice(closestNodule.id);\r\n          }\r\n        }\r\n      });\r\n      \r\n      container.appendChild(overlay);\r\n    };\r\n\r\n    // Original function for drawing nodules with SVG overlays\r\n    const drawNodulesOnImage = () => {\r\n      const img = imageRef.current;\r\n      const container = containerRef.current;\r\n      \r\n      // Clear any existing overlay elements\r\n      const existingOverlay = container.querySelector('.nodule-overlay');\r\n      if (existingOverlay) {\r\n        container.removeChild(existingOverlay);\r\n      }\r\n      \r\n      // Create overlay div that will contain the SVG with nodule circles\r\n      const overlay = document.createElement('div');\r\n      overlay.className = 'nodule-overlay';\r\n      overlay.style.position = 'absolute';\r\n      overlay.style.top = '0';\r\n      overlay.style.left = '0';\r\n      overlay.style.width = '100%';\r\n      overlay.style.height = '100%';\r\n      overlay.style.pointerEvents = 'auto';\r\n      \r\n      // Calculate image display dimensions and position\r\n      const imgRect = img.getBoundingClientRect();\r\n      const containerRect = container.getBoundingClientRect();\r\n      \r\n      // Calculate aspect ratio for the current view\r\n      let aspectRatio = 1.0;\r\n      if (volumeInfo && volumeInfo.spacing) {\r\n        if (currentAxis === 'axial') {\r\n          // Y/X aspect ratio for axial view\r\n          aspectRatio = volumeInfo.spacing[1] / volumeInfo.spacing[0];\r\n        } else if (currentAxis === 'coronal') {\r\n          // Z/X aspect ratio for coronal view\r\n          aspectRatio = volumeInfo.spacing[2] / volumeInfo.spacing[0];\r\n        } else { // sagittal\r\n          // Z/Y aspect ratio for sagittal view\r\n          aspectRatio = volumeInfo.spacing[2] / volumeInfo.spacing[1];\r\n        }\r\n      }\r\n      \r\n      // Create SVG element for drawing\r\n      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\r\n      svg.setAttribute('width', '100%');\r\n      svg.setAttribute('height', '100%');\r\n      svg.style.position = 'absolute';\r\n      svg.style.top = '0';\r\n      svg.style.left = '0';\r\n      \r\n      // Get display dimensions for scaling\r\n      const displayWidth = imgRect.width;\r\n      const displayHeight = imgRect.height;\r\n      \r\n      // Draw each nodule\r\n      nodulesInSlice.forEach(nodule => {\r\n        let x, y, slicePos;\r\n        \r\n        // Calculate 2D coordinates based on the current viewing axis\r\n        if (currentAxis === 'axial') {\r\n          x = nodule.x;\r\n          y = nodule.y;\r\n          slicePos = currentSlice;\r\n        } else if (currentAxis === 'coronal') {\r\n          x = nodule.x;\r\n          y = nodule.z;\r\n          slicePos = currentSlice;\r\n        } else { // sagittal\r\n          x = nodule.y;\r\n          y = nodule.z;\r\n          slicePos = currentSlice;\r\n        }\r\n        \r\n        // Calculate the position in normalized coordinates (0-1 range)\r\n        let xNorm, yNorm;\r\n        \r\n        if (currentAxis === 'axial') {\r\n          xNorm = x / volumeInfo.dimensions.width;\r\n          yNorm = y / volumeInfo.dimensions.height;\r\n        } else if (currentAxis === 'coronal') {\r\n          xNorm = x / volumeInfo.dimensions.width;\r\n          yNorm = y / volumeInfo.dimensions.depth;\r\n        } else { // sagittal\r\n          xNorm = y / volumeInfo.dimensions.height;\r\n          yNorm = nodule.z / volumeInfo.dimensions.depth;\r\n        }\r\n        \r\n        // Apply proper scaling for the current view resolution\r\n        // Convert from normalized coordinates to display pixels\r\n        const xPx = xNorm * displayWidth;\r\n        \r\n        // Apply aspect ratio correction to y-coordinate\r\n        // This ensures that the nodule appears at the right vertical position\r\n        // regardless of how the image is stretched or squeezed\r\n        const yPx = yNorm * displayHeight;\r\n        \r\n        // Calculate radius in pixels based on the nodule's radius in mm\r\n        // Scale according to the current display size\r\n        let radiusMm = nodule.radius || 5; // Default to 5mm if not specified\r\n        let pixelsPerMm;\r\n        \r\n        // Calculate pixels per mm based on the current view's spacing\r\n        if (currentAxis === 'axial') {\r\n          // Use the minimum of width and height spacing for consistent sizing\r\n          const spacingX = volumeInfo.spacing ? volumeInfo.spacing[0] : 1;\r\n          const spacingY = volumeInfo.spacing ? volumeInfo.spacing[1] : 1;\r\n          const mmPerPixel = Math.min(spacingX, spacingY);\r\n          // Calculate how many display pixels correspond to one mm in the CT scan\r\n          const widthInMm = volumeInfo.dimensions.width * spacingX;\r\n          pixelsPerMm = displayWidth / widthInMm;\r\n        } else if (currentAxis === 'coronal') {\r\n          const spacingX = volumeInfo.spacing ? volumeInfo.spacing[0] : 1;\r\n          const spacingZ = volumeInfo.spacing ? volumeInfo.spacing[2] : 1;\r\n          const mmPerPixel = Math.min(spacingX, spacingZ);\r\n          // Calculate how many display pixels correspond to one mm in the CT scan\r\n          const widthInMm = volumeInfo.dimensions.width * spacingX;\r\n          pixelsPerMm = displayWidth / widthInMm;\r\n        } else { // sagittal\r\n          const spacingY = volumeInfo.spacing ? volumeInfo.spacing[1] : 1;\r\n          const spacingZ = volumeInfo.spacing ? volumeInfo.spacing[2] : 1;\r\n          const mmPerPixel = Math.min(spacingY, spacingZ);\r\n          // Calculate how many display pixels correspond to one mm in the CT scan\r\n          const heightInMm = volumeInfo.dimensions.height * spacingY;\r\n          pixelsPerMm = displayHeight / heightInMm;\r\n        }\r\n        \r\n        // Calculate the radius in display pixels\r\n        let radiusPixels = radiusMm * pixelsPerMm;\r\n        \r\n        // Make circles more appropriately sized for visualization\r\n        radiusPixels = Math.max(8, radiusPixels * 0.75); // Increase from 0.5 to 0.75 multiplier with larger minimum radius\r\n        \r\n        // Adjust the radius based on how far the nodule is from the current slice\r\n        let distanceFromSlice;\r\n        if (currentAxis === 'axial') {\r\n          distanceFromSlice = Math.abs(nodule.z - slicePos);\r\n        } else if (currentAxis === 'coronal') {\r\n          distanceFromSlice = Math.abs(nodule.y - slicePos);\r\n        } else { // sagittal\r\n          distanceFromSlice = Math.abs(nodule.x - slicePos);\r\n        }\r\n        \r\n        // Calculate the nodule color based on confidence\r\n        // Use a lighter red for better visibility\r\n        const color = '#FF5555'; // Lighter red color for all nodules\r\n        \r\n        // Create circle element for nodule outline\r\n        const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n        circle.setAttribute('cx', xPx);\r\n        circle.setAttribute('cy', yPx);\r\n        circle.setAttribute('r', radiusPixels);\r\n        circle.setAttribute('fill', 'rgba(255, 150, 150, 0.15)'); // Lighter red fill with lower opacity\r\n        circle.setAttribute('stroke', color);\r\n        circle.setAttribute('stroke-width', '1.5'); // Thinner stroke\r\n        circle.setAttribute('data-nodule-id', nodule.id); // Add nodule ID as data attribute\r\n        \r\n        // Make nodules interactive - turn off pointer-events: none on the overlay\r\n        overlay.style.pointerEvents = 'auto';\r\n        \r\n        // Create dot element for center point\r\n        const centerDot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n        centerDot.setAttribute('cx', xPx);\r\n        centerDot.setAttribute('cy', yPx);\r\n        centerDot.setAttribute('r', '3');\r\n        centerDot.setAttribute('fill', color);\r\n        centerDot.setAttribute('data-nodule-id', nodule.id); // Add nodule ID to center dot too\r\n        \r\n        // Highlight selected nodule with a thicker stroke\r\n        if (selectedNoduleState === nodule.id) {\r\n            circle.setAttribute('stroke-width', '3');  // Still thicker for selected but reduced\r\n            circle.setAttribute('stroke-dasharray', '5,3');\r\n            circle.setAttribute('fill', 'rgba(255, 150, 150, 0.35)'); // Lighter red fill for selected nodule\r\n            centerDot.setAttribute('r', '4'); // Slightly smaller center dot for selected nodule\r\n        }\r\n        \r\n        // Add click event listeners to circle and centerDot\r\n        const handleClick = (event) => {\r\n            event.stopPropagation(); // Prevent click from propagating to container\r\n            const noduleId = event.target.getAttribute('data-nodule-id');\r\n            if (noduleId) {\r\n                // Set selected nodule state locally\r\n                setSelectedNoduleState(noduleId);\r\n                \r\n                // Call the parent's handler if provided\r\n                if (onNoduleClick) {\r\n                    onNoduleClick(noduleId);\r\n                } else {\r\n                    // Otherwise use our own navigation\r\n                    goToNoduleSlice(noduleId);\r\n                }\r\n                \r\n                // Redraw nodules to update selection highlighting\r\n                setTimeout(() => drawNodulesOnImage(), 0);\r\n            }\r\n        };\r\n        \r\n        // Add event listeners\r\n        circle.addEventListener('click', handleClick);\r\n        centerDot.addEventListener('click', handleClick);\r\n        \r\n        // Add tooltip with nodule info\r\n        const tooltip = document.createElementNS('http://www.w3.org/2000/svg', 'title');\r\n        const confidence = nodule.confidence ? (nodule.confidence * 100).toFixed(0) + '%' : 'N/A';\r\n        const malignancy = nodule.malignancy || 'Unknown';\r\n        tooltip.textContent = `Nodule ${nodule.id}\\nConfidence: ${confidence}\\nMalignancy: ${malignancy}`;\r\n        circle.appendChild(tooltip);\r\n        \r\n        // Add mouseover/mouseout effects for better interaction\r\n        circle.addEventListener('mouseover', () => {\r\n            circle.setAttribute('stroke-width', '2.5');\r\n            circle.setAttribute('fill', 'rgba(255, 150, 150, 0.25)');\r\n            centerDot.setAttribute('r', '4');\r\n        });\r\n        \r\n        circle.addEventListener('mouseout', () => {\r\n            if (selectedNoduleState === nodule.id) {\r\n                circle.setAttribute('stroke-width', '3');\r\n                circle.setAttribute('fill', 'rgba(255, 150, 150, 0.35)');\r\n                centerDot.setAttribute('r', '4');\r\n            } else {\r\n                circle.setAttribute('stroke-width', '1.5');\r\n                circle.setAttribute('fill', 'rgba(255, 150, 150, 0.15)');\r\n                centerDot.setAttribute('r', '3');\r\n            }\r\n        });\r\n        \r\n        centerDot.addEventListener('mouseover', () => {\r\n            circle.setAttribute('stroke-width', '2.5');\r\n            circle.setAttribute('fill', 'rgba(255, 150, 150, 0.25)');\r\n            centerDot.setAttribute('r', '4');\r\n        });\r\n        \r\n        centerDot.addEventListener('mouseout', () => {\r\n            if (selectedNoduleState === nodule.id) {\r\n                circle.setAttribute('stroke-width', '3');\r\n                circle.setAttribute('fill', 'rgba(255, 150, 150, 0.35)');\r\n                centerDot.setAttribute('r', '4');\r\n            } else {\r\n                circle.setAttribute('stroke-width', '1.5');\r\n                circle.setAttribute('fill', 'rgba(255, 150, 150, 0.15)');\r\n                centerDot.setAttribute('r', '3');\r\n            }\r\n        });\r\n        \r\n        svg.appendChild(circle);\r\n        svg.appendChild(centerDot);\r\n      });\r\n      \r\n      overlay.appendChild(svg);\r\n      container.appendChild(overlay);\r\n    };\r\n\r\n    drawNodules();\r\n    \r\n    // Cleanup function\r\n    return () => {\r\n      const container = containerRef.current;\r\n      if (container) {\r\n        const overlay = container.querySelector('.nodule-overlay');\r\n        if (overlay) {\r\n          container.removeChild(overlay);\r\n        }\r\n      }\r\n    };\r\n  }, [sliceImage, nodulesInSlice, currentAxis, selectedNoduleState, volumeInfo, resultsPageView]);\r\n\r\n  // Get max slice index for current axis\r\n  const getMaxSliceIndex = () => {\r\n    if (!volumeInfo) return 0;\r\n    \r\n    try {\r\n      if (currentAxis === 'axial') {\r\n        return Math.max(0, volumeInfo.dimensions.depth - 1);\r\n      } else if (currentAxis === 'coronal') {\r\n        return Math.max(0, volumeInfo.dimensions.height - 1);\r\n      } else { // sagittal\r\n        return Math.max(0, volumeInfo.dimensions.width - 1);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error determining max slice index:', error);\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  const handleAxisChange = (axis) => {\r\n    setCurrentAxis(axis);\r\n    // Reset to middle slice when changing axis\r\n    if (!volumeInfo) return;\r\n    \r\n    let middle;\r\n    if (axis === 'axial') {\r\n      middle = Math.floor(volumeInfo.dimensions.depth / 2);\r\n    } else if (axis === 'coronal') {\r\n      middle = Math.floor(volumeInfo.dimensions.height / 2);\r\n    } else { // sagittal\r\n      middle = Math.floor(volumeInfo.dimensions.width / 2);\r\n    }\r\n    \r\n    // Ensure we're setting a valid number, not NaN\r\n    if (!isNaN(middle) && middle >= 0) {\r\n      setCurrentSlice(middle);\r\n    }\r\n  };\r\n\r\n  const handleSliceChange = (e) => {\r\n    const value = parseInt(e.target.value, 10);\r\n    // Validate before setting\r\n    if (!isNaN(value) && value >= 0 && value <= getMaxSliceIndex()) {\r\n      setCurrentSlice(value);\r\n    }\r\n  };\r\n\r\n  // Track which slices have nodules to highlight them on the slider\r\n  const slicesWithNodules = () => {\r\n    if (!volumeInfo || !volumeInfo.nodules) return [];\r\n    \r\n    // Don't show nodule indicators on the slider in results page view\r\n    if (resultsPageView) return [];\r\n    \r\n    const noduleSlices = new Set();\r\n    volumeInfo.nodules.forEach(nodule => {\r\n      if (currentAxis === 'axial') {\r\n        // Mark all slices within the nodule's radius\r\n        const start = Math.max(0, Math.floor(nodule.z - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.depth - 1, Math.ceil(nodule.z + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      } else if (currentAxis === 'coronal') {\r\n        const start = Math.max(0, Math.floor(nodule.y - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.height - 1, Math.ceil(nodule.y + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      } else { // sagittal\r\n        const start = Math.max(0, Math.floor(nodule.x - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.width - 1, Math.ceil(nodule.x + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      }\r\n    });\r\n    \r\n    return Array.from(noduleSlices);\r\n  };\r\n\r\n  // Nodule colors for different confidence levels\r\n  const getNoduleColor = (confidence) => {\r\n    if (confidence >= 0.8) return 'rgba(220, 38, 38, 0.8)';  // Red for high confidence\r\n    if (confidence >= 0.6) return 'rgba(234, 88, 12, 0.8)';  // Orange for medium confidence\r\n    return 'rgba(234, 179, 8, 0.8)';  // Yellow for lower confidence\r\n  };\r\n\r\n  return (\r\n    <div className={`relative w-full h-full ${resultsPageView ? 'results-page-view' : ''}`} ref={containerRef}>\r\n      {/* If in results page mode, only show the image without controls */}\r\n      {resultsPageView ? (\r\n        <>\r\n          {isLoading ? (\r\n            <div className=\"flex items-center justify-center w-full h-full bg-gray-200\">\r\n              <ArrowPathIcon className=\"h-8 w-8 animate-spin text-gray-400\" />\r\n            </div>\r\n          ) : error ? (\r\n            <div className=\"flex items-center justify-center w-full h-full bg-gray-200\">\r\n              <div className=\"text-center p-4\">\r\n                <ExclamationCircleIcon className=\"h-8 w-8 mx-auto mb-2 text-red-500\" />\r\n                <p className=\"text-sm text-gray-600\">Error loading scan</p>\r\n              </div>\r\n            </div>\r\n          ) : sliceImage ? (\r\n            <div className=\"w-full h-full overflow-hidden relative\">\r\n              <div className=\"flex items-center justify-center h-full\">\r\n                <img \r\n                  ref={imageRef}\r\n                  src={sliceImage.data} \r\n                  alt={`Axial view of scan ${caseId}`}\r\n                  className=\"object-contain max-h-full max-w-full\"\r\n                  style={{ \r\n                    objectPosition: 'center center',\r\n                    maxHeight: '260px'\r\n                  }}\r\n                />\r\n              </div>\r\n              {sliceImage.isPlaceholder && (\r\n                <div className=\"absolute bottom-0 left-0 right-0 bg-red-500 bg-opacity-70 text-white text-center py-1 text-sm\">\r\n                  Placeholder Image - Scan Data Unavailable\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className=\"flex items-center justify-center w-full h-full bg-gray-200\">\r\n              <p className=\"text-sm text-gray-500\">No image available</p>\r\n            </div>\r\n          )}\r\n        </>\r\n      ) : (\r\n        // Original interactive viewer with all controls for the detail page\r\n        <>\r\n          {/* Axis selection */}\r\n          <div className={`absolute top-2 left-2 z-10 rounded-lg shadow-md ${darkMode ? 'bg-gray-800' : 'bg-white'}`}>\r\n            <div className=\"flex p-1 space-x-1\">\r\n              <button\r\n                onClick={() => handleAxisChange('axial')}\r\n                className={`px-3 py-1.5 text-xs font-medium rounded-md ${\r\n                  currentAxis === 'axial' \r\n                    ? darkMode\r\n                      ? 'bg-indigo-600 text-white'\r\n                      : 'bg-indigo-100 text-indigo-700'\r\n                    : darkMode\r\n                      ? 'text-gray-300 hover:bg-gray-700'\r\n                      : 'text-gray-700 hover:bg-gray-100'\r\n                }`}\r\n              >\r\n                Axial\r\n              </button>\r\n              <button\r\n                onClick={() => handleAxisChange('coronal')}\r\n                className={`px-3 py-1.5 text-xs font-medium rounded-md ${\r\n                  currentAxis === 'coronal' \r\n                    ? darkMode\r\n                      ? 'bg-indigo-600 text-white'\r\n                      : 'bg-indigo-100 text-indigo-700'\r\n                    : darkMode\r\n                      ? 'text-gray-300 hover:bg-gray-700'\r\n                      : 'text-gray-700 hover:bg-gray-100'\r\n                }`}\r\n              >\r\n                Coronal\r\n              </button>\r\n              <button\r\n                onClick={() => handleAxisChange('sagittal')}\r\n                className={`px-3 py-1.5 text-xs font-medium rounded-md ${\r\n                  currentAxis === 'sagittal' \r\n                    ? darkMode\r\n                      ? 'bg-indigo-600 text-white'\r\n                      : 'bg-indigo-100 text-indigo-700'\r\n                    : darkMode\r\n                      ? 'text-gray-300 hover:bg-gray-700'\r\n                      : 'text-gray-700 hover:bg-gray-100'\r\n                }`}\r\n              >\r\n                Sagittal\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Slice slider */}\r\n          <div className={`absolute bottom-2 left-1/2 transform -translate-x-1/2 z-10 p-2 rounded-lg shadow-md ${darkMode ? 'bg-gray-800' : 'bg-white'}`} style={{ width: '90%', maxWidth: '400px' }}>\r\n            <input \r\n              type=\"range\"\r\n              min=\"0\"\r\n              max={getMaxSliceIndex()}\r\n              value={currentSlice}\r\n              onChange={handleSliceChange}\r\n              className=\"w-full h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"\r\n            />\r\n            <div className=\"flex justify-between text-xs mt-1\">\r\n              <span className={darkMode ? 'text-gray-400' : 'text-gray-500'}>Slice: {currentSlice + 1}/{getMaxSliceIndex() + 1}</span>\r\n              <span className={darkMode ? 'text-gray-400' : 'text-gray-500'}>\r\n                {slicesWithNodules().includes(currentSlice) ? '🔴 Nodule present' : ''}\r\n                {sliceImage && sliceImage.isPlaceholder ? '⚠️ Placeholder' : ''}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Main image display */}\r\n          <div className=\"w-full h-full relative\">\r\n            {sliceImage ? (\r\n              <div className=\"relative w-full h-full\">\r\n                <img \r\n                  ref={imageRef}\r\n                  src={sliceImage.data} \r\n                  alt={`${currentAxis.charAt(0).toUpperCase() + currentAxis.slice(1)} slice of CT scan`}\r\n                  className=\"w-full h-full object-contain\"\r\n                />\r\n                {sliceImage.isPlaceholder && (\r\n                  <div className=\"absolute bottom-0 left-0 right-0 bg-red-500 bg-opacity-70 text-white text-center py-1 text-sm\">\r\n                    Placeholder Image - Scan Data Unavailable\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <div className=\"flex items-center justify-center w-full h-full bg-gray-200\">\r\n                <p className=\"text-sm text-gray-500\">No image available</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InteractiveViewer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}