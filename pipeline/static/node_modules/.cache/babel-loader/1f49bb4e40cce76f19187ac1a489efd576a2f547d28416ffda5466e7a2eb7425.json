{"ast":null,"code":"var _jsxFileName = \"D:\\\\Segmentation\\\\pipeline\\\\webapp\\\\static\\\\src\\\\components\\\\InteractiveViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { ArrowPathIcon, ExclamationCircleIcon } from '@heroicons/react/24/outline';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst InteractiveViewer = ({\n  caseId,\n  selectedNoduleId\n}) => {\n  _s();\n  const [volumeInfo, setVolumeInfo] = useState(null);\n  const [currentAxis, setCurrentAxis] = useState('axial');\n  const [currentSlice, setCurrentSlice] = useState(0);\n  const [sliceImage, setSliceImage] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [nodulesInSlice, setNodulesInSlice] = useState([]);\n  const imageRef = useRef(null);\n  const containerRef = useRef(null);\n  const {\n    darkMode\n  } = useTheme();\n\n  // Function to go to a specific nodule slice\n  const goToNoduleSlice = noduleId => {\n    if (!volumeInfo || !volumeInfo.nodules) return;\n\n    // Find the nodule by ID\n    const nodule = volumeInfo.nodules.find(n => n.id === noduleId);\n    if (!nodule) return;\n\n    // Set the axis to axial (z)\n    setCurrentAxis('axial');\n\n    // Set the slice to the nodule's z-coordinate\n    setCurrentSlice(Math.round(nodule.z));\n  };\n\n  // Navigate to selected nodule when selectedNoduleId or volumeInfo changes\n  useEffect(() => {\n    if (selectedNoduleId && volumeInfo && volumeInfo.nodules) {\n      goToNoduleSlice(selectedNoduleId);\n    }\n  }, [selectedNoduleId, volumeInfo]);\n\n  // Fetch volume metadata\n  useEffect(() => {\n    const fetchVolumeInfo = async () => {\n      try {\n        setIsLoading(true);\n        const response = await axios.get(`/api/results/${caseId}/slices`);\n        setVolumeInfo(response.data.volume_info);\n\n        // Set initial slice to middle of volume\n        const initialSlice = Math.floor(response.data.volume_info.dimensions.depth / 2);\n        setCurrentSlice(initialSlice);\n        setIsLoading(false);\n      } catch (error) {\n        var _error$response, _error$response$data;\n        console.error('Error fetching volume info:', error);\n        setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to load volume data');\n        setIsLoading(false);\n      }\n    };\n    fetchVolumeInfo();\n  }, [caseId]);\n\n  // Fetch slice when axis or slice index changes\n  useEffect(() => {\n    const fetchSlice = async () => {\n      if (!volumeInfo) return;\n      try {\n        setIsLoading(true);\n        const response = await axios.get(`/api/results/${caseId}/slices/${currentAxis}/${currentSlice}`);\n        setSliceImage(response.data.slice_data);\n        setIsLoading(false);\n      } catch (error) {\n        var _error$response2, _error$response2$data;\n        console.error('Error fetching slice:', error);\n        setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to load slice');\n        setIsLoading(false);\n      }\n    };\n    fetchSlice();\n  }, [caseId, currentAxis, currentSlice, volumeInfo]);\n\n  // Find nodules in the current slice\n  useEffect(() => {\n    if (!volumeInfo || !volumeInfo.nodules) return;\n\n    // Determine which nodules are visible in this slice\n    const sliceNodules = volumeInfo.nodules.filter(nodule => {\n      // Check if this nodule is visible in the current slice\n      if (currentAxis === 'axial') {\n        // Check if the nodule's z-coordinate is close to this slice\n        return Math.abs(nodule.z - currentSlice) <= nodule.radius;\n      } else if (currentAxis === 'coronal') {\n        // Check if the nodule's y-coordinate is close to this slice\n        return Math.abs(nodule.y - currentSlice) <= nodule.radius;\n      } else {\n        // sagittal\n        // Check if the nodule's x-coordinate is close to this slice\n        return Math.abs(nodule.x - currentSlice) <= nodule.radius;\n      }\n    });\n    setNodulesInSlice(sliceNodules);\n  }, [volumeInfo, currentAxis, currentSlice]);\n\n  // Draw nodule circles and center points when image loads or nodulesInSlice changes\n  useEffect(() => {\n    if (!sliceImage || !imageRef.current || nodulesInSlice.length === 0) return;\n    const drawNodules = () => {\n      const img = imageRef.current;\n      if (!img.complete) {\n        // Wait for image to load before drawing\n        img.onload = drawNodulesOnImage;\n        return;\n      }\n      drawNodulesOnImage();\n    };\n    const drawNodulesOnImage = () => {\n      const img = imageRef.current;\n      const container = containerRef.current;\n\n      // Clear any existing overlay elements\n      const existingOverlay = container.querySelector('.nodule-overlay');\n      if (existingOverlay) {\n        container.removeChild(existingOverlay);\n      }\n\n      // Create overlay div that will contain the SVG with nodule circles\n      const overlay = document.createElement('div');\n      overlay.className = 'nodule-overlay';\n      overlay.style.position = 'absolute';\n      overlay.style.top = '0';\n      overlay.style.left = '0';\n      overlay.style.width = '100%';\n      overlay.style.height = '100%';\n      overlay.style.pointerEvents = 'none';\n\n      // Calculate image display dimensions and position\n      const imgRect = img.getBoundingClientRect();\n      const containerRect = container.getBoundingClientRect();\n\n      // Create SVG element for drawing\n      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n      svg.setAttribute('width', '100%');\n      svg.setAttribute('height', '100%');\n      svg.style.position = 'absolute';\n      svg.style.top = '0';\n      svg.style.left = '0';\n\n      // Get display dimensions for scaling\n      const displayWidth = imgRect.width;\n      const displayHeight = imgRect.height;\n\n      // Draw each nodule\n      nodulesInSlice.forEach(nodule => {\n        let x, y, slicePos;\n\n        // Calculate 2D coordinates based on the current viewing axis\n        if (currentAxis === 'axial') {\n          x = nodule.x;\n          y = nodule.y;\n          slicePos = currentSlice;\n        } else if (currentAxis === 'coronal') {\n          x = nodule.x;\n          y = nodule.z;\n          slicePos = currentSlice;\n        } else {\n          // sagittal\n          x = nodule.y;\n          y = nodule.z;\n          slicePos = currentSlice;\n        }\n\n        // Calculate the position in normalized coordinates (0-1 range)\n        let xNorm, yNorm;\n        if (currentAxis === 'axial') {\n          xNorm = x / volumeInfo.dimensions.width;\n          yNorm = y / volumeInfo.dimensions.height;\n        } else if (currentAxis === 'coronal') {\n          xNorm = x / volumeInfo.dimensions.width;\n          yNorm = y / volumeInfo.dimensions.depth;\n        } else {\n          // sagittal\n          xNorm = y / volumeInfo.dimensions.height;\n          yNorm = z / volumeInfo.dimensions.depth;\n        }\n\n        // Apply proper scaling for the current view resolution\n        // Convert from normalized coordinates to display pixels\n        const xPx = xNorm * displayWidth;\n        const yPx = yNorm * displayHeight;\n\n        // Calculate radius in pixels based on the nodule's radius in mm\n        // Scale according to the current display size\n        let radiusMm = nodule.radius || 5; // Default to 5mm if not specified\n        let pixelsPerMm;\n\n        // Calculate pixels per mm based on the current view's spacing\n        if (currentAxis === 'axial') {\n          // Use the minimum of width and height spacing for consistent sizing\n          const spacingX = volumeInfo.spacing ? volumeInfo.spacing[0] : 1;\n          const spacingY = volumeInfo.spacing ? volumeInfo.spacing[1] : 1;\n          const mmPerPixel = Math.min(spacingX, spacingY);\n          pixelsPerMm = displayWidth / (volumeInfo.dimensions.width * mmPerPixel);\n        } else if (currentAxis === 'coronal') {\n          const spacingX = volumeInfo.spacing ? volumeInfo.spacing[0] : 1;\n          const spacingZ = volumeInfo.spacing ? volumeInfo.spacing[2] : 1;\n          const mmPerPixel = Math.min(spacingX, spacingZ);\n          pixelsPerMm = displayWidth / (volumeInfo.dimensions.width * mmPerPixel);\n        } else {\n          // sagittal\n          const spacingY = volumeInfo.spacing ? volumeInfo.spacing[1] : 1;\n          const spacingZ = volumeInfo.spacing ? volumeInfo.spacing[2] : 1;\n          const mmPerPixel = Math.min(spacingY, spacingZ);\n          pixelsPerMm = displayHeight / (volumeInfo.dimensions.height * mmPerPixel);\n        }\n\n        // Calculate the radius in display pixels\n        let radiusPixels = radiusMm * pixelsPerMm;\n\n        // Make circles more appropriately sized for visualization\n        radiusPixels = Math.max(5, radiusPixels * 0.5); // Minimum 5px radius for visibility\n\n        // Adjust the radius based on how far the nodule is from the current slice\n        let distanceFromSlice;\n        if (currentAxis === 'axial') {\n          distanceFromSlice = Math.abs(nodule.z - slicePos);\n        } else if (currentAxis === 'coronal') {\n          distanceFromSlice = Math.abs(nodule.y - slicePos);\n        } else {\n          // sagittal\n          distanceFromSlice = Math.abs(nodule.x - slicePos);\n        }\n\n        // Calculate the nodule color based on confidence\n        const color = getNoduleColor(nodule.confidence);\n\n        // Create circle element for nodule outline\n        const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        circle.setAttribute('cx', xPx);\n        circle.setAttribute('cy', yPx);\n        circle.setAttribute('r', radiusPixels);\n        circle.setAttribute('fill', 'none');\n        circle.setAttribute('stroke', color);\n        circle.setAttribute('stroke-width', '2');\n\n        // Create dot element for center point\n        const centerDot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        centerDot.setAttribute('cx', xPx);\n        centerDot.setAttribute('cy', yPx);\n        centerDot.setAttribute('r', '3');\n        centerDot.setAttribute('fill', color);\n\n        // Highlight selected nodule with a thicker stroke\n        if (selectedNoduleId === nodule.id) {\n          circle.setAttribute('stroke-width', '3');\n          circle.setAttribute('stroke-dasharray', '5,3');\n        }\n        svg.appendChild(circle);\n        svg.appendChild(centerDot);\n      });\n      overlay.appendChild(svg);\n      container.appendChild(overlay);\n    };\n    drawNodules();\n\n    // Cleanup function\n    return () => {\n      const container = containerRef.current;\n      if (container) {\n        const overlay = container.querySelector('.nodule-overlay');\n        if (overlay) {\n          container.removeChild(overlay);\n        }\n      }\n    };\n  }, [sliceImage, nodulesInSlice, currentAxis, selectedNoduleId, volumeInfo]);\n\n  // Get max slice index for current axis\n  const getMaxSliceIndex = () => {\n    if (!volumeInfo) return 0;\n    if (currentAxis === 'axial') {\n      return volumeInfo.dimensions.depth - 1;\n    } else if (currentAxis === 'coronal') {\n      return volumeInfo.dimensions.height - 1;\n    } else {\n      // sagittal\n      return volumeInfo.dimensions.width - 1;\n    }\n  };\n  const handleAxisChange = axis => {\n    setCurrentAxis(axis);\n    // Reset to middle slice when changing axis\n    const middle = Math.floor(axis === 'axial' ? volumeInfo.dimensions.depth / 2 : axis === 'coronal' ? volumeInfo.dimensions.height / 2 : volumeInfo.dimensions.width / 2);\n    setCurrentSlice(middle);\n  };\n  const handleSliceChange = e => {\n    setCurrentSlice(parseInt(e.target.value, 10));\n  };\n\n  // Track which slices have nodules to highlight them on the slider\n  const slicesWithNodules = () => {\n    if (!volumeInfo || !volumeInfo.nodules) return [];\n    const noduleSlices = new Set();\n    volumeInfo.nodules.forEach(nodule => {\n      if (currentAxis === 'axial') {\n        // Mark all slices within the nodule's radius\n        const start = Math.max(0, Math.floor(nodule.z - nodule.radius));\n        const end = Math.min(volumeInfo.dimensions.depth - 1, Math.ceil(nodule.z + nodule.radius));\n        for (let i = start; i <= end; i++) {\n          noduleSlices.add(i);\n        }\n      } else if (currentAxis === 'coronal') {\n        const start = Math.max(0, Math.floor(nodule.y - nodule.radius));\n        const end = Math.min(volumeInfo.dimensions.height - 1, Math.ceil(nodule.y + nodule.radius));\n        for (let i = start; i <= end; i++) {\n          noduleSlices.add(i);\n        }\n      } else {\n        // sagittal\n        const start = Math.max(0, Math.floor(nodule.x - nodule.radius));\n        const end = Math.min(volumeInfo.dimensions.width - 1, Math.ceil(nodule.x + nodule.radius));\n        for (let i = start; i <= end; i++) {\n          noduleSlices.add(i);\n        }\n      }\n    });\n    return Array.from(noduleSlices);\n  };\n\n  // Nodule colors for different confidence levels\n  const getNoduleColor = confidence => {\n    if (confidence >= 0.8) return 'rgba(220, 38, 38, 0.8)'; // Red for high confidence\n    if (confidence >= 0.6) return 'rgba(234, 88, 12, 0.8)'; // Orange for medium confidence\n    return 'rgba(234, 179, 8, 0.8)'; // Yellow for lower confidence\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${darkMode ? 'bg-red-900' : 'bg-red-50'} p-4 rounded-md`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex\",\n        children: [/*#__PURE__*/_jsxDEV(ExclamationCircleIcon, {\n          className: `h-5 w-5 ${darkMode ? 'text-red-300' : 'text-red-400'}`,\n          \"aria-hidden\": \"true\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: `text-sm font-medium ${darkMode ? 'text-red-300' : 'text-red-800'}`,\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: `mt-2 text-sm ${darkMode ? 'text-red-200' : 'text-red-700'}`,\n            children: \"Interactive visualization is not available. Please refer to the static image results.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this);\n  }\n  if (isLoading && !volumeInfo) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `text-center py-12 ${darkMode ? 'text-white' : 'text-gray-600'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-indigo-600 border-r-transparent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: `mt-4 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`,\n        children: \"Loading volume data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${darkMode ? 'bg-gray-800' : 'bg-white'} shadow rounded-lg overflow-hidden`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `px-4 py-5 border-b ${darkMode ? 'border-gray-700' : 'border-gray-200'} sm:px-6 flex justify-between items-center`,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: `text-lg font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`,\n        children: \"Interactive Visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAxisChange('axial'),\n          className: `px-3 py-1 rounded-md text-sm font-medium ${currentAxis === 'axial' ? 'bg-indigo-600 text-white' : darkMode ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`,\n          children: \"Axial\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAxisChange('coronal'),\n          className: `px-3 py-1 rounded-md text-sm font-medium ${currentAxis === 'coronal' ? 'bg-indigo-600 text-white' : darkMode ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`,\n          children: \"Coronal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAxisChange('sagittal'),\n          className: `px-3 py-1 rounded-md text-sm font-medium ${currentAxis === 'sagittal' ? 'bg-indigo-600 text-white' : darkMode ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`,\n          children: \"Sagittal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `mb-4 text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Interactive visualization shows enhanced CT scan slices with detected nodules highlighted. Navigate through slices using the controls.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"mt-2 list-disc pl-5 space-y-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Blue markers on slider: Slices containing nodules\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Colored circles: Detected nodules (color indicates confidence level)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Center dots: Center point of the detected nodule\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Enhanced contrast: Adaptive window/level settings improve nodule visibility\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Use slider or buttons to navigate slices and jump between nodules\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"View planes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 17\n            }, this), \":\", /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"ml-2 mt-1\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Axial: Top-down view (transverse plane)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Coronal: Front-to-back view (rotated for better orientation)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Sagittal: Side view (left-to-right)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col lg:flex-row gap-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-1 relative max-w-4xl mx-auto lg:mx-0\",\n          ref: containerRef,\n          children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `absolute inset-0 flex items-center justify-center ${darkMode ? 'bg-gray-700' : 'bg-gray-100'} rounded-md`,\n            children: /*#__PURE__*/_jsxDEV(ArrowPathIcon, {\n              className: \"h-8 w-8 text-indigo-500 animate-spin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: sliceImage && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"relative\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                ref: imageRef,\n                src: sliceImage,\n                alt: `${currentAxis} slice ${currentSlice}`,\n                className: \"w-full rounded-md shadow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 19\n            }, this)\n          }, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `w-full lg:w-64 ${darkMode ? 'text-white' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"slice-slider\",\n              className: `block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`,\n              children: [\"Slice Navigator\", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ml-2 text-xs font-normal\",\n                children: [\"(\", currentSlice, \" / \", getMaxSliceIndex(), \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"relative mt-1\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"range\",\n                id: \"slice-slider\",\n                min: \"0\",\n                max: getMaxSliceIndex(),\n                value: currentSlice,\n                onChange: handleSliceChange,\n                className: `w-full h-2 rounded-lg appearance-none cursor-pointer ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`,\n                style: {\n                  background: `linear-gradient(to right, \n                      ${darkMode ? '#4f46e5' : '#6366f1'} 0%, \n                      ${darkMode ? '#4f46e5' : '#6366f1'} ${currentSlice / getMaxSliceIndex() * 100}%, \n                      ${darkMode ? '#374151' : '#e5e7eb'} ${currentSlice / getMaxSliceIndex() * 100}%, \n                      ${darkMode ? '#374151' : '#e5e7eb'} 100%)`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 478,\n                columnNumber: 17\n              }, this), slicesWithNodules().map(slice => /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  position: 'absolute',\n                  left: `${slice / getMaxSliceIndex() * 100}%`,\n                  top: '0px',\n                  width: '4px',\n                  height: '8px',\n                  backgroundColor: '#3b82f6',\n                  borderRadius: '2px',\n                  transform: 'translateX(-50%)',\n                  zIndex: 10\n                },\n                title: `Nodule at slice ${slice}`,\n                onClick: () => setCurrentSlice(slice)\n              }, `marker-${slice}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 497,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: `text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-2`,\n              children: \"Nodules In View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 15\n            }, this), nodulesInSlice.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: `space-y-2 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`,\n              children: nodulesInSlice.map(nodule => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"flex items-center justify-between\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"inline-block w-3 h-3 rounded-full mr-2\",\n                    style: {\n                      backgroundColor: getNoduleColor(nodule.confidence)\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 528,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text-sm\",\n                    children: [nodule.id, /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: `ml-2 ${darkMode ? 'text-gray-400' : 'text-gray-500'} text-xs`,\n                      children: [\"(conf: \", (nodule.confidence * 100).toFixed(1), \"%)\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 534,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 532,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 527,\n                  columnNumber: 23\n                }, this)\n              }, `nodule-${nodule.id}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 526,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              className: `text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`,\n              children: \"No nodules in current slice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-between mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setCurrentSlice(Math.max(0, currentSlice - 1)),\n              disabled: currentSlice === 0,\n              className: `px-3 py-1 rounded text-sm ${currentSlice === 0 ? `${darkMode ? 'bg-gray-700 text-gray-500' : 'bg-gray-200 text-gray-400'} cursor-not-allowed` : `${darkMode ? 'bg-gray-700 text-white hover:bg-gray-600' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`}`,\n              children: \"Previous\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setCurrentSlice(Math.min(getMaxSliceIndex(), currentSlice + 1)),\n              disabled: currentSlice === getMaxSliceIndex(),\n              className: `px-3 py-1 rounded text-sm ${currentSlice === getMaxSliceIndex() ? `${darkMode ? 'bg-gray-700 text-gray-500' : 'bg-gray-200 text-gray-400'} cursor-not-allowed` : `${darkMode ? 'bg-gray-700 text-white hover:bg-gray-600' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`}`,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 375,\n    columnNumber: 5\n  }, this);\n};\n_s(InteractiveViewer, \"pAHi5wIvULDSVn08OhTsDk/TEzA=\", false, function () {\n  return [useTheme];\n});\n_c = InteractiveViewer;\nexport default InteractiveViewer;\nvar _c;\n$RefreshReg$(_c, \"InteractiveViewer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","ArrowPathIcon","ExclamationCircleIcon","useTheme","jsxDEV","_jsxDEV","Fragment","_Fragment","InteractiveViewer","caseId","selectedNoduleId","_s","volumeInfo","setVolumeInfo","currentAxis","setCurrentAxis","currentSlice","setCurrentSlice","sliceImage","setSliceImage","isLoading","setIsLoading","error","setError","nodulesInSlice","setNodulesInSlice","imageRef","containerRef","darkMode","goToNoduleSlice","noduleId","nodules","nodule","find","n","id","Math","round","z","fetchVolumeInfo","response","get","data","volume_info","initialSlice","floor","dimensions","depth","_error$response","_error$response$data","console","message","fetchSlice","slice_data","_error$response2","_error$response2$data","sliceNodules","filter","abs","radius","y","x","current","length","drawNodules","img","complete","onload","drawNodulesOnImage","container","existingOverlay","querySelector","removeChild","overlay","document","createElement","className","style","position","top","left","width","height","pointerEvents","imgRect","getBoundingClientRect","containerRect","svg","createElementNS","setAttribute","displayWidth","displayHeight","forEach","slicePos","xNorm","yNorm","xPx","yPx","radiusMm","pixelsPerMm","spacingX","spacing","spacingY","mmPerPixel","min","spacingZ","radiusPixels","max","distanceFromSlice","color","getNoduleColor","confidence","circle","centerDot","appendChild","getMaxSliceIndex","handleAxisChange","axis","middle","handleSliceChange","e","parseInt","target","value","slicesWithNodules","noduleSlices","Set","start","end","ceil","i","add","Array","from","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","src","alt","htmlFor","type","onChange","background","map","slice","backgroundColor","borderRadius","transform","zIndex","title","toFixed","disabled","_c","$RefreshReg$"],"sources":["D:/Segmentation/pipeline/webapp/static/src/components/InteractiveViewer.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { ArrowPathIcon, ExclamationCircleIcon } from '@heroicons/react/24/outline';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\n\r\nconst InteractiveViewer = ({ caseId, selectedNoduleId }) => {\r\n  const [volumeInfo, setVolumeInfo] = useState(null);\r\n  const [currentAxis, setCurrentAxis] = useState('axial');\r\n  const [currentSlice, setCurrentSlice] = useState(0);\r\n  const [sliceImage, setSliceImage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [nodulesInSlice, setNodulesInSlice] = useState([]);\r\n  const imageRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n  const { darkMode } = useTheme();\r\n\r\n  // Function to go to a specific nodule slice\r\n  const goToNoduleSlice = (noduleId) => {\r\n    if (!volumeInfo || !volumeInfo.nodules) return;\r\n    \r\n    // Find the nodule by ID\r\n    const nodule = volumeInfo.nodules.find(n => n.id === noduleId);\r\n    if (!nodule) return;\r\n    \r\n    // Set the axis to axial (z)\r\n    setCurrentAxis('axial');\r\n    \r\n    // Set the slice to the nodule's z-coordinate\r\n    setCurrentSlice(Math.round(nodule.z));\r\n  };\r\n\r\n  // Navigate to selected nodule when selectedNoduleId or volumeInfo changes\r\n  useEffect(() => {\r\n    if (selectedNoduleId && volumeInfo && volumeInfo.nodules) {\r\n      goToNoduleSlice(selectedNoduleId);\r\n    }\r\n  }, [selectedNoduleId, volumeInfo]);\r\n\r\n  // Fetch volume metadata\r\n  useEffect(() => {\r\n    const fetchVolumeInfo = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const response = await axios.get(`/api/results/${caseId}/slices`);\r\n        setVolumeInfo(response.data.volume_info);\r\n        \r\n        // Set initial slice to middle of volume\r\n        const initialSlice = Math.floor(response.data.volume_info.dimensions.depth / 2);\r\n        setCurrentSlice(initialSlice);\r\n        \r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching volume info:', error);\r\n        setError(error.response?.data?.message || 'Failed to load volume data');\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchVolumeInfo();\r\n  }, [caseId]);\r\n\r\n  // Fetch slice when axis or slice index changes\r\n  useEffect(() => {\r\n    const fetchSlice = async () => {\r\n      if (!volumeInfo) return;\r\n      \r\n      try {\r\n        setIsLoading(true);\r\n        const response = await axios.get(`/api/results/${caseId}/slices/${currentAxis}/${currentSlice}`);\r\n        setSliceImage(response.data.slice_data);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching slice:', error);\r\n        setError(error.response?.data?.message || 'Failed to load slice');\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchSlice();\r\n  }, [caseId, currentAxis, currentSlice, volumeInfo]);\r\n\r\n  // Find nodules in the current slice\r\n  useEffect(() => {\r\n    if (!volumeInfo || !volumeInfo.nodules) return;\r\n    \r\n    // Determine which nodules are visible in this slice\r\n    const sliceNodules = volumeInfo.nodules.filter(nodule => {\r\n      // Check if this nodule is visible in the current slice\r\n      if (currentAxis === 'axial') {\r\n        // Check if the nodule's z-coordinate is close to this slice\r\n        return Math.abs(nodule.z - currentSlice) <= nodule.radius;\r\n      } else if (currentAxis === 'coronal') {\r\n        // Check if the nodule's y-coordinate is close to this slice\r\n        return Math.abs(nodule.y - currentSlice) <= nodule.radius;\r\n      } else { // sagittal\r\n        // Check if the nodule's x-coordinate is close to this slice\r\n        return Math.abs(nodule.x - currentSlice) <= nodule.radius;\r\n      }\r\n    });\r\n    \r\n    setNodulesInSlice(sliceNodules);\r\n  }, [volumeInfo, currentAxis, currentSlice]);\r\n\r\n  // Draw nodule circles and center points when image loads or nodulesInSlice changes\r\n  useEffect(() => {\r\n    if (!sliceImage || !imageRef.current || nodulesInSlice.length === 0) return;\r\n\r\n    const drawNodules = () => {\r\n      const img = imageRef.current;\r\n      if (!img.complete) {\r\n        // Wait for image to load before drawing\r\n        img.onload = drawNodulesOnImage;\r\n        return;\r\n      }\r\n      \r\n      drawNodulesOnImage();\r\n    };\r\n\r\n    const drawNodulesOnImage = () => {\r\n      const img = imageRef.current;\r\n      const container = containerRef.current;\r\n      \r\n      // Clear any existing overlay elements\r\n      const existingOverlay = container.querySelector('.nodule-overlay');\r\n      if (existingOverlay) {\r\n        container.removeChild(existingOverlay);\r\n      }\r\n      \r\n      // Create overlay div that will contain the SVG with nodule circles\r\n      const overlay = document.createElement('div');\r\n      overlay.className = 'nodule-overlay';\r\n      overlay.style.position = 'absolute';\r\n      overlay.style.top = '0';\r\n      overlay.style.left = '0';\r\n      overlay.style.width = '100%';\r\n      overlay.style.height = '100%';\r\n      overlay.style.pointerEvents = 'none';\r\n      \r\n      // Calculate image display dimensions and position\r\n      const imgRect = img.getBoundingClientRect();\r\n      const containerRect = container.getBoundingClientRect();\r\n      \r\n      // Create SVG element for drawing\r\n      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\r\n      svg.setAttribute('width', '100%');\r\n      svg.setAttribute('height', '100%');\r\n      svg.style.position = 'absolute';\r\n      svg.style.top = '0';\r\n      svg.style.left = '0';\r\n      \r\n      // Get display dimensions for scaling\r\n      const displayWidth = imgRect.width;\r\n      const displayHeight = imgRect.height;\r\n      \r\n      // Draw each nodule\r\n      nodulesInSlice.forEach(nodule => {\r\n        let x, y, slicePos;\r\n        \r\n        // Calculate 2D coordinates based on the current viewing axis\r\n        if (currentAxis === 'axial') {\r\n          x = nodule.x;\r\n          y = nodule.y;\r\n          slicePos = currentSlice;\r\n        } else if (currentAxis === 'coronal') {\r\n          x = nodule.x;\r\n          y = nodule.z;\r\n          slicePos = currentSlice;\r\n        } else { // sagittal\r\n          x = nodule.y;\r\n          y = nodule.z;\r\n          slicePos = currentSlice;\r\n        }\r\n        \r\n        // Calculate the position in normalized coordinates (0-1 range)\r\n        let xNorm, yNorm;\r\n        \r\n        if (currentAxis === 'axial') {\r\n          xNorm = x / volumeInfo.dimensions.width;\r\n          yNorm = y / volumeInfo.dimensions.height;\r\n        } else if (currentAxis === 'coronal') {\r\n          xNorm = x / volumeInfo.dimensions.width;\r\n          yNorm = y / volumeInfo.dimensions.depth;\r\n        } else { // sagittal\r\n          xNorm = y / volumeInfo.dimensions.height;\r\n          yNorm = z / volumeInfo.dimensions.depth;\r\n        }\r\n        \r\n        // Apply proper scaling for the current view resolution\r\n        // Convert from normalized coordinates to display pixels\r\n        const xPx = xNorm * displayWidth;\r\n        const yPx = yNorm * displayHeight;\r\n        \r\n        // Calculate radius in pixels based on the nodule's radius in mm\r\n        // Scale according to the current display size\r\n        let radiusMm = nodule.radius || 5; // Default to 5mm if not specified\r\n        let pixelsPerMm;\r\n        \r\n        // Calculate pixels per mm based on the current view's spacing\r\n        if (currentAxis === 'axial') {\r\n          // Use the minimum of width and height spacing for consistent sizing\r\n          const spacingX = volumeInfo.spacing ? volumeInfo.spacing[0] : 1;\r\n          const spacingY = volumeInfo.spacing ? volumeInfo.spacing[1] : 1;\r\n          const mmPerPixel = Math.min(spacingX, spacingY);\r\n          pixelsPerMm = displayWidth / (volumeInfo.dimensions.width * mmPerPixel);\r\n        } else if (currentAxis === 'coronal') {\r\n          const spacingX = volumeInfo.spacing ? volumeInfo.spacing[0] : 1;\r\n          const spacingZ = volumeInfo.spacing ? volumeInfo.spacing[2] : 1;\r\n          const mmPerPixel = Math.min(spacingX, spacingZ);\r\n          pixelsPerMm = displayWidth / (volumeInfo.dimensions.width * mmPerPixel);\r\n        } else { // sagittal\r\n          const spacingY = volumeInfo.spacing ? volumeInfo.spacing[1] : 1;\r\n          const spacingZ = volumeInfo.spacing ? volumeInfo.spacing[2] : 1;\r\n          const mmPerPixel = Math.min(spacingY, spacingZ);\r\n          pixelsPerMm = displayHeight / (volumeInfo.dimensions.height * mmPerPixel);\r\n        }\r\n        \r\n        // Calculate the radius in display pixels\r\n        let radiusPixels = radiusMm * pixelsPerMm;\r\n        \r\n        // Make circles more appropriately sized for visualization\r\n        radiusPixels = Math.max(5, radiusPixels * 0.5); // Minimum 5px radius for visibility\r\n        \r\n        // Adjust the radius based on how far the nodule is from the current slice\r\n        let distanceFromSlice;\r\n        if (currentAxis === 'axial') {\r\n          distanceFromSlice = Math.abs(nodule.z - slicePos);\r\n        } else if (currentAxis === 'coronal') {\r\n          distanceFromSlice = Math.abs(nodule.y - slicePos);\r\n        } else { // sagittal\r\n          distanceFromSlice = Math.abs(nodule.x - slicePos);\r\n        }\r\n        \r\n        // Calculate the nodule color based on confidence\r\n        const color = getNoduleColor(nodule.confidence);\r\n        \r\n        // Create circle element for nodule outline\r\n        const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n        circle.setAttribute('cx', xPx);\r\n        circle.setAttribute('cy', yPx);\r\n        circle.setAttribute('r', radiusPixels);\r\n        circle.setAttribute('fill', 'none');\r\n        circle.setAttribute('stroke', color);\r\n        circle.setAttribute('stroke-width', '2');\r\n        \r\n        // Create dot element for center point\r\n        const centerDot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n        centerDot.setAttribute('cx', xPx);\r\n        centerDot.setAttribute('cy', yPx);\r\n        centerDot.setAttribute('r', '3');\r\n        centerDot.setAttribute('fill', color);\r\n        \r\n        // Highlight selected nodule with a thicker stroke\r\n        if (selectedNoduleId === nodule.id) {\r\n          circle.setAttribute('stroke-width', '3');\r\n          circle.setAttribute('stroke-dasharray', '5,3');\r\n        }\r\n        \r\n        svg.appendChild(circle);\r\n        svg.appendChild(centerDot);\r\n      });\r\n      \r\n      overlay.appendChild(svg);\r\n      container.appendChild(overlay);\r\n    };\r\n\r\n    drawNodules();\r\n    \r\n    // Cleanup function\r\n    return () => {\r\n      const container = containerRef.current;\r\n      if (container) {\r\n        const overlay = container.querySelector('.nodule-overlay');\r\n        if (overlay) {\r\n          container.removeChild(overlay);\r\n        }\r\n      }\r\n    };\r\n  }, [sliceImage, nodulesInSlice, currentAxis, selectedNoduleId, volumeInfo]);\r\n\r\n  // Get max slice index for current axis\r\n  const getMaxSliceIndex = () => {\r\n    if (!volumeInfo) return 0;\r\n    \r\n    if (currentAxis === 'axial') {\r\n      return volumeInfo.dimensions.depth - 1;\r\n    } else if (currentAxis === 'coronal') {\r\n      return volumeInfo.dimensions.height - 1;\r\n    } else { // sagittal\r\n      return volumeInfo.dimensions.width - 1;\r\n    }\r\n  };\r\n\r\n  const handleAxisChange = (axis) => {\r\n    setCurrentAxis(axis);\r\n    // Reset to middle slice when changing axis\r\n    const middle = Math.floor(\r\n      axis === 'axial' \r\n        ? volumeInfo.dimensions.depth / 2\r\n        : axis === 'coronal'\r\n          ? volumeInfo.dimensions.height / 2\r\n          : volumeInfo.dimensions.width / 2\r\n    );\r\n    setCurrentSlice(middle);\r\n  };\r\n\r\n  const handleSliceChange = (e) => {\r\n    setCurrentSlice(parseInt(e.target.value, 10));\r\n  };\r\n\r\n  // Track which slices have nodules to highlight them on the slider\r\n  const slicesWithNodules = () => {\r\n    if (!volumeInfo || !volumeInfo.nodules) return [];\r\n    \r\n    const noduleSlices = new Set();\r\n    volumeInfo.nodules.forEach(nodule => {\r\n      if (currentAxis === 'axial') {\r\n        // Mark all slices within the nodule's radius\r\n        const start = Math.max(0, Math.floor(nodule.z - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.depth - 1, Math.ceil(nodule.z + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      } else if (currentAxis === 'coronal') {\r\n        const start = Math.max(0, Math.floor(nodule.y - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.height - 1, Math.ceil(nodule.y + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      } else { // sagittal\r\n        const start = Math.max(0, Math.floor(nodule.x - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.width - 1, Math.ceil(nodule.x + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      }\r\n    });\r\n    \r\n    return Array.from(noduleSlices);\r\n  };\r\n\r\n  // Nodule colors for different confidence levels\r\n  const getNoduleColor = (confidence) => {\r\n    if (confidence >= 0.8) return 'rgba(220, 38, 38, 0.8)';  // Red for high confidence\r\n    if (confidence >= 0.6) return 'rgba(234, 88, 12, 0.8)';  // Orange for medium confidence\r\n    return 'rgba(234, 179, 8, 0.8)';  // Yellow for lower confidence\r\n  };\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`${darkMode ? 'bg-red-900' : 'bg-red-50'} p-4 rounded-md`}>\r\n        <div className=\"flex\">\r\n          <ExclamationCircleIcon className={`h-5 w-5 ${darkMode ? 'text-red-300' : 'text-red-400'}`} aria-hidden=\"true\" />\r\n          <div className=\"ml-3\">\r\n            <h3 className={`text-sm font-medium ${darkMode ? 'text-red-300' : 'text-red-800'}`}>{error}</h3>\r\n            <p className={`mt-2 text-sm ${darkMode ? 'text-red-200' : 'text-red-700'}`}>\r\n              Interactive visualization is not available. Please refer to the static image results.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isLoading && !volumeInfo) {\r\n    return (\r\n      <div className={`text-center py-12 ${darkMode ? 'text-white' : 'text-gray-600'}`}>\r\n        <div className=\"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-indigo-600 border-r-transparent\"></div>\r\n        <p className={`mt-4 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Loading volume data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} shadow rounded-lg overflow-hidden`}>\r\n      <div className={`px-4 py-5 border-b ${darkMode ? 'border-gray-700' : 'border-gray-200'} sm:px-6 flex justify-between items-center`}>\r\n        <h3 className={`text-lg font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>Interactive Visualization</h3>\r\n        \r\n        {/* Axis selection */}\r\n        <div className=\"flex space-x-2\">\r\n          <button\r\n            onClick={() => handleAxisChange('axial')}\r\n            className={`px-3 py-1 rounded-md text-sm font-medium ${\r\n              currentAxis === 'axial'\r\n                ? 'bg-indigo-600 text-white'\r\n                : darkMode \r\n                  ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' \r\n                  : 'bg-gray-200 text-gray-800 hover:bg-gray-300'\r\n            }`}\r\n          >\r\n            Axial\r\n          </button>\r\n          <button\r\n            onClick={() => handleAxisChange('coronal')}\r\n            className={`px-3 py-1 rounded-md text-sm font-medium ${\r\n              currentAxis === 'coronal'\r\n                ? 'bg-indigo-600 text-white'\r\n                : darkMode \r\n                  ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' \r\n                  : 'bg-gray-200 text-gray-800 hover:bg-gray-300'\r\n            }`}\r\n          >\r\n            Coronal\r\n          </button>\r\n          <button\r\n            onClick={() => handleAxisChange('sagittal')}\r\n            className={`px-3 py-1 rounded-md text-sm font-medium ${\r\n              currentAxis === 'sagittal'\r\n                ? 'bg-indigo-600 text-white'\r\n                : darkMode \r\n                  ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' \r\n                  : 'bg-gray-200 text-gray-800 hover:bg-gray-300'\r\n            }`}\r\n          >\r\n            Sagittal\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"p-6\">\r\n        {/* Description of view */}\r\n        <div className={`mb-4 text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>\r\n          <p>Interactive visualization shows enhanced CT scan slices with detected nodules highlighted. Navigate through slices using the controls.</p>\r\n          <ul className=\"mt-2 list-disc pl-5 space-y-1\">\r\n            <li>Blue markers on slider: Slices containing nodules</li>\r\n            <li>Colored circles: Detected nodules (color indicates confidence level)</li>\r\n            <li>Center dots: Center point of the detected nodule</li>\r\n            <li>Enhanced contrast: Adaptive window/level settings improve nodule visibility</li>\r\n            <li>Use slider or buttons to navigate slices and jump between nodules</li>\r\n            <li><strong>View planes</strong>: \r\n              <ul className=\"ml-2 mt-1\">\r\n                <li>Axial: Top-down view (transverse plane)</li>\r\n                <li>Coronal: Front-to-back view (rotated for better orientation)</li>\r\n                <li>Sagittal: Side view (left-to-right)</li>\r\n              </ul>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        \r\n        {/* Slice viewer */}\r\n        <div className=\"flex flex-col lg:flex-row gap-6\">\r\n          {/* Slice image */}\r\n          <div className=\"flex-1 relative max-w-4xl mx-auto lg:mx-0\" ref={containerRef}>\r\n            {isLoading ? (\r\n              <div className={`absolute inset-0 flex items-center justify-center ${darkMode ? 'bg-gray-700' : 'bg-gray-100'} rounded-md`}>\r\n                <ArrowPathIcon className=\"h-8 w-8 text-indigo-500 animate-spin\" />\r\n              </div>\r\n            ) : (\r\n              <>\r\n                {sliceImage && (\r\n                  <div className=\"relative\">\r\n                    <img\r\n                      ref={imageRef}\r\n                      src={sliceImage}\r\n                      alt={`${currentAxis} slice ${currentSlice}`}\r\n                      className=\"w-full rounded-md shadow\"\r\n                    />\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n          \r\n          {/* Controls */}\r\n          <div className={`w-full lg:w-64 ${darkMode ? 'text-white' : ''}`}>\r\n            <div className=\"mb-4\">\r\n              <label\r\n                htmlFor=\"slice-slider\"\r\n                className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}\r\n              >\r\n                Slice Navigator \r\n                <span className=\"ml-2 text-xs font-normal\">\r\n                  ({currentSlice} / {getMaxSliceIndex()})\r\n                </span>\r\n              </label>\r\n              \r\n              <div className=\"relative mt-1\">\r\n                <input\r\n                  type=\"range\"\r\n                  id=\"slice-slider\"\r\n                  min=\"0\"\r\n                  max={getMaxSliceIndex()}\r\n                  value={currentSlice}\r\n                  onChange={handleSliceChange}\r\n                  className={`w-full h-2 rounded-lg appearance-none cursor-pointer ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}\r\n                  style={{\r\n                    background: `linear-gradient(to right, \r\n                      ${darkMode ? '#4f46e5' : '#6366f1'} 0%, \r\n                      ${darkMode ? '#4f46e5' : '#6366f1'} ${(currentSlice / getMaxSliceIndex()) * 100}%, \r\n                      ${darkMode ? '#374151' : '#e5e7eb'} ${(currentSlice / getMaxSliceIndex()) * 100}%, \r\n                      ${darkMode ? '#374151' : '#e5e7eb'} 100%)`\r\n                  }}\r\n                />\r\n                \r\n                {/* Markers for slices with nodules */}\r\n                {slicesWithNodules().map(slice => (\r\n                  <div\r\n                    key={`marker-${slice}`}\r\n                    style={{\r\n                      position: 'absolute',\r\n                      left: `${(slice / getMaxSliceIndex()) * 100}%`,\r\n                      top: '0px',\r\n                      width: '4px',\r\n                      height: '8px',\r\n                      backgroundColor: '#3b82f6',\r\n                      borderRadius: '2px',\r\n                      transform: 'translateX(-50%)',\r\n                      zIndex: 10\r\n                    }}\r\n                    title={`Nodule at slice ${slice}`}\r\n                    onClick={() => setCurrentSlice(slice)}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Nodules in current slice */}\r\n            <div className=\"mt-6\">\r\n              <h4 className={`text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-2`}>\r\n                Nodules In View\r\n              </h4>\r\n              \r\n              {nodulesInSlice.length > 0 ? (\r\n                <ul className={`space-y-2 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>\r\n                  {nodulesInSlice.map(nodule => (\r\n                    <li key={`nodule-${nodule.id}`} className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <span \r\n                          className=\"inline-block w-3 h-3 rounded-full mr-2\"\r\n                          style={{ backgroundColor: getNoduleColor(nodule.confidence) }}\r\n                        />\r\n                        <span className=\"text-sm\">\r\n                          {nodule.id} \r\n                          <span className={`ml-2 ${darkMode ? 'text-gray-400' : 'text-gray-500'} text-xs`}>\r\n                            (conf: {(nodule.confidence * 100).toFixed(1)}%)\r\n                          </span>\r\n                        </span>\r\n                      </div>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              ) : (\r\n                <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>\r\n                  No nodules in current slice\r\n                </p>\r\n              )}\r\n            </div>\r\n            \r\n            {/* Navigation buttons */}\r\n            <div className=\"flex justify-between mt-4\">\r\n              <button\r\n                onClick={() => setCurrentSlice(Math.max(0, currentSlice - 1))}\r\n                disabled={currentSlice === 0}\r\n                className={`px-3 py-1 rounded text-sm ${\r\n                  currentSlice === 0\r\n                    ? `${darkMode ? 'bg-gray-700 text-gray-500' : 'bg-gray-200 text-gray-400'} cursor-not-allowed`\r\n                    : `${darkMode ? 'bg-gray-700 text-white hover:bg-gray-600' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`\r\n                }`}\r\n              >\r\n                Previous\r\n              </button>\r\n              \r\n              <button\r\n                onClick={() => setCurrentSlice(Math.min(getMaxSliceIndex(), currentSlice + 1))}\r\n                disabled={currentSlice === getMaxSliceIndex()}\r\n                className={`px-3 py-1 rounded text-sm ${\r\n                  currentSlice === getMaxSliceIndex()\r\n                    ? `${darkMode ? 'bg-gray-700 text-gray-500' : 'bg-gray-200 text-gray-400'} cursor-not-allowed`\r\n                    : `${darkMode ? 'bg-gray-700 text-white hover:bg-gray-600' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`\r\n                }`}\r\n              >\r\n                Next\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InteractiveViewer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}