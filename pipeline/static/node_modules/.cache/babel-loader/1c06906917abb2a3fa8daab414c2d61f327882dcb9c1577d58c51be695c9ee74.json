{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext();export const useTheme=()=>useContext(ThemeContext);export const ThemeProvider=_ref=>{let{children}=_ref;// Check if user has a theme preference saved in localStorage\nconst[darkMode,setDarkMode]=useState(()=>{const savedTheme=localStorage.getItem('theme');// If user has a saved preference, use it\nif(savedTheme){return savedTheme==='dark';}// Otherwise check for system preference\nreturn window.matchMedia('(prefers-color-scheme: dark)').matches;});// Update localStorage and apply theme when darkMode changes\nuseEffect(()=>{localStorage.setItem('theme',darkMode?'dark':'light');const root=window.document.documentElement;if(darkMode){root.classList.add('dark');}else{root.classList.remove('dark');}},[darkMode]);const toggleDarkMode=()=>{setDarkMode(prevMode=>!prevMode);};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{darkMode,toggleDarkMode},children:children});};export default ThemeContext;","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","ThemeContext","useTheme","ThemeProvider","_ref","children","darkMode","setDarkMode","savedTheme","localStorage","getItem","window","matchMedia","matches","setItem","root","document","documentElement","classList","add","remove","toggleDarkMode","prevMode","Provider","value"],"sources":["C:/Users/kouss/Desktop/Cursor/Segmentation/pipeline/webapp/static/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nexport const useTheme = () => useContext(ThemeContext);\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  // Check if user has a theme preference saved in localStorage\r\n  const [darkMode, setDarkMode] = useState(() => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    // If user has a saved preference, use it\r\n    if (savedTheme) {\r\n      return savedTheme === 'dark';\r\n    }\r\n    // Otherwise check for system preference\r\n    return window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n  });\r\n\r\n  // Update localStorage and apply theme when darkMode changes\r\n  useEffect(() => {\r\n    localStorage.setItem('theme', darkMode ? 'dark' : 'light');\r\n    const root = window.document.documentElement;\r\n    \r\n    if (darkMode) {\r\n      root.classList.add('dark');\r\n    } else {\r\n      root.classList.remove('dark');\r\n    }\r\n  }, [darkMode]);\r\n\r\n  const toggleDarkMode = () => {\r\n    setDarkMode(prevMode => !prevMode);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ darkMode, toggleDarkMode }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ThemeContext; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE9E,KAAM,CAAAC,YAAY,cAAGN,aAAa,CAAC,CAAC,CAEpC,MAAO,MAAM,CAAAO,QAAQ,CAAGA,CAAA,GAAMN,UAAU,CAACK,YAAY,CAAC,CAEtD,MAAO,MAAM,CAAAE,aAAa,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACxC;AACA,KAAM,CAACE,QAAQ,CAAEC,WAAW,CAAC,CAAGV,QAAQ,CAAC,IAAM,CAC7C,KAAM,CAAAW,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAChD;AACA,GAAIF,UAAU,CAAE,CACd,MAAO,CAAAA,UAAU,GAAK,MAAM,CAC9B,CACA;AACA,MAAO,CAAAG,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,CAClE,CAAC,CAAC,CAEF;AACAf,SAAS,CAAC,IAAM,CACdW,YAAY,CAACK,OAAO,CAAC,OAAO,CAAER,QAAQ,CAAG,MAAM,CAAG,OAAO,CAAC,CAC1D,KAAM,CAAAS,IAAI,CAAGJ,MAAM,CAACK,QAAQ,CAACC,eAAe,CAE5C,GAAIX,QAAQ,CAAE,CACZS,IAAI,CAACG,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC,CAC5B,CAAC,IAAM,CACLJ,IAAI,CAACG,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC,CAC/B,CACF,CAAC,CAAE,CAACd,QAAQ,CAAC,CAAC,CAEd,KAAM,CAAAe,cAAc,CAAGA,CAAA,GAAM,CAC3Bd,WAAW,CAACe,QAAQ,EAAI,CAACA,QAAQ,CAAC,CACpC,CAAC,CAED,mBACEtB,IAAA,CAACC,YAAY,CAACsB,QAAQ,EAACC,KAAK,CAAE,CAAElB,QAAQ,CAAEe,cAAe,CAAE,CAAAhB,QAAA,CACxDA,QAAQ,CACY,CAAC,CAE5B,CAAC,CAED,cAAe,CAAAJ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}