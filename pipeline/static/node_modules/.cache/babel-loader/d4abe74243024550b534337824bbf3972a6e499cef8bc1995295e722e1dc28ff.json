{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import axios from'axios';import{ArrowPathIcon,ExclamationCircleIcon}from'@heroicons/react/24/outline';import{useTheme}from'../contexts/ThemeContext';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const InteractiveViewer=_ref=>{let{caseId,selectedNoduleId}=_ref;const[volumeInfo,setVolumeInfo]=useState(null);const[currentAxis,setCurrentAxis]=useState('axial');const[currentSlice,setCurrentSlice]=useState(0);const[sliceImage,setSliceImage]=useState(null);const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);const[nodulesInSlice,setNodulesInSlice]=useState([]);const imageRef=useRef(null);const containerRef=useRef(null);const{darkMode}=useTheme();// Function to go to a specific nodule slice\nconst goToNoduleSlice=noduleId=>{if(!volumeInfo||!volumeInfo.nodules)return;// Find the nodule by ID\nconst nodule=volumeInfo.nodules.find(n=>n.id===noduleId);if(!nodule)return;// Set the axis to axial (z)\nsetCurrentAxis('axial');// Set the slice to the nodule's z-coordinate\nsetCurrentSlice(Math.round(nodule.z));};// Navigate to selected nodule when selectedNoduleId or volumeInfo changes\nuseEffect(()=>{if(selectedNoduleId&&volumeInfo&&volumeInfo.nodules){goToNoduleSlice(selectedNoduleId);}},[selectedNoduleId,volumeInfo]);// Fetch volume metadata\nuseEffect(()=>{const fetchVolumeInfo=async()=>{try{setIsLoading(true);const response=await axios.get(`/api/results/${caseId}/slices`);setVolumeInfo(response.data.volume_info);// Set initial slice to middle of volume\nconst initialSlice=Math.floor(response.data.volume_info.dimensions.depth/2);setCurrentSlice(initialSlice);setIsLoading(false);}catch(error){var _error$response,_error$response$data;console.error('Error fetching volume info:',error);setError(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Failed to load volume data');setIsLoading(false);}};fetchVolumeInfo();},[caseId]);// Fetch slice when axis or slice index changes\nuseEffect(()=>{const fetchSlice=async()=>{if(!volumeInfo)return;try{setIsLoading(true);const response=await axios.get(`/api/results/${caseId}/slices/${currentAxis}/${currentSlice}`);setSliceImage(response.data.slice_data);setIsLoading(false);}catch(error){var _error$response2,_error$response2$data;console.error('Error fetching slice:',error);setError(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Failed to load slice');setIsLoading(false);}};fetchSlice();},[caseId,currentAxis,currentSlice,volumeInfo]);// Find nodules in the current slice\nuseEffect(()=>{if(!volumeInfo||!volumeInfo.nodules)return;// Determine which nodules are visible in this slice\nconst sliceNodules=volumeInfo.nodules.filter(nodule=>{// Check if this nodule is visible in the current slice\nif(currentAxis==='axial'){// Check if the nodule's z-coordinate is close to this slice\nreturn Math.abs(nodule.z-currentSlice)<=nodule.radius;}else if(currentAxis==='coronal'){// Check if the nodule's y-coordinate is close to this slice\nreturn Math.abs(nodule.y-currentSlice)<=nodule.radius;}else{// sagittal\n// Check if the nodule's x-coordinate is close to this slice\nreturn Math.abs(nodule.x-currentSlice)<=nodule.radius;}});setNodulesInSlice(sliceNodules);},[volumeInfo,currentAxis,currentSlice]);// Draw nodule circles and center points when image loads or nodulesInSlice changes\nuseEffect(()=>{if(!sliceImage||!imageRef.current||nodulesInSlice.length===0)return;const drawNodules=()=>{const img=imageRef.current;if(!img.complete){// Wait for image to load before drawing\nimg.onload=drawNodulesOnImage;return;}drawNodulesOnImage();};const drawNodulesOnImage=()=>{const img=imageRef.current;const container=containerRef.current;// Clear any existing overlay elements\nconst existingOverlay=container.querySelector('.nodule-overlay');if(existingOverlay){container.removeChild(existingOverlay);}// Create overlay div that will contain the SVG with nodule circles\nconst overlay=document.createElement('div');overlay.className='nodule-overlay';overlay.style.position='absolute';overlay.style.top='0';overlay.style.left='0';overlay.style.width='100%';overlay.style.height='100%';overlay.style.pointerEvents='none';// Calculate image display dimensions and position\nconst imgRect=img.getBoundingClientRect();const containerRect=container.getBoundingClientRect();// Calculate aspect ratio for the current view\nlet aspectRatio=1.0;if(volumeInfo&&volumeInfo.spacing){if(currentAxis==='axial'){// Y/X aspect ratio for axial view\naspectRatio=volumeInfo.spacing[1]/volumeInfo.spacing[0];}else if(currentAxis==='coronal'){// Z/X aspect ratio for coronal view\naspectRatio=volumeInfo.spacing[2]/volumeInfo.spacing[0];}else{// sagittal\n// Z/Y aspect ratio for sagittal view\naspectRatio=volumeInfo.spacing[2]/volumeInfo.spacing[1];}}// Create SVG element for drawing\nconst svg=document.createElementNS('http://www.w3.org/2000/svg','svg');svg.setAttribute('width','100%');svg.setAttribute('height','100%');svg.style.position='absolute';svg.style.top='0';svg.style.left='0';// Get display dimensions for scaling\nconst displayWidth=imgRect.width;const displayHeight=imgRect.height;// Draw each nodule\nnodulesInSlice.forEach(nodule=>{let x,y,slicePos;// Calculate 2D coordinates based on the current viewing axis\nif(currentAxis==='axial'){x=nodule.x;y=nodule.y;slicePos=currentSlice;}else if(currentAxis==='coronal'){x=nodule.x;y=nodule.z;slicePos=currentSlice;}else{// sagittal\nx=nodule.y;y=nodule.z;slicePos=currentSlice;}// Calculate the position in normalized coordinates (0-1 range)\nlet xNorm,yNorm;if(currentAxis==='axial'){xNorm=x/volumeInfo.dimensions.width;yNorm=y/volumeInfo.dimensions.height;}else if(currentAxis==='coronal'){xNorm=x/volumeInfo.dimensions.width;yNorm=y/volumeInfo.dimensions.depth;}else{// sagittal\nxNorm=y/volumeInfo.dimensions.height;yNorm=nodule.z/volumeInfo.dimensions.depth;}// Apply proper scaling for the current view resolution\n// Convert from normalized coordinates to display pixels\nconst xPx=xNorm*displayWidth;// Apply aspect ratio correction to y-coordinate\n// This ensures that the nodule appears at the right vertical position\n// regardless of how the image is stretched or squeezed\nconst yPx=yNorm*displayHeight;// Calculate radius in pixels based on the nodule's radius in mm\n// Scale according to the current display size\nlet radiusMm=nodule.radius||5;// Default to 5mm if not specified\nlet pixelsPerMm;// Calculate pixels per mm based on the current view's spacing\nif(currentAxis==='axial'){// Use the minimum of width and height spacing for consistent sizing\nconst spacingX=volumeInfo.spacing?volumeInfo.spacing[0]:1;const spacingY=volumeInfo.spacing?volumeInfo.spacing[1]:1;const mmPerPixel=Math.min(spacingX,spacingY);// Calculate how many display pixels correspond to one mm in the CT scan\nconst widthInMm=volumeInfo.dimensions.width*spacingX;pixelsPerMm=displayWidth/widthInMm;}else if(currentAxis==='coronal'){const spacingX=volumeInfo.spacing?volumeInfo.spacing[0]:1;const spacingZ=volumeInfo.spacing?volumeInfo.spacing[2]:1;const mmPerPixel=Math.min(spacingX,spacingZ);// Calculate how many display pixels correspond to one mm in the CT scan\nconst widthInMm=volumeInfo.dimensions.width*spacingX;pixelsPerMm=displayWidth/widthInMm;}else{// sagittal\nconst spacingY=volumeInfo.spacing?volumeInfo.spacing[1]:1;const spacingZ=volumeInfo.spacing?volumeInfo.spacing[2]:1;const mmPerPixel=Math.min(spacingY,spacingZ);// Calculate how many display pixels correspond to one mm in the CT scan\nconst heightInMm=volumeInfo.dimensions.height*spacingY;pixelsPerMm=displayHeight/heightInMm;}// Calculate the radius in display pixels\nlet radiusPixels=radiusMm*pixelsPerMm;// Make circles more appropriately sized for visualization\nradiusPixels=Math.max(5,radiusPixels*0.5);// Minimum 5px radius for visibility\n// Adjust the radius based on how far the nodule is from the current slice\nlet distanceFromSlice;if(currentAxis==='axial'){distanceFromSlice=Math.abs(nodule.z-slicePos);}else if(currentAxis==='coronal'){distanceFromSlice=Math.abs(nodule.y-slicePos);}else{// sagittal\ndistanceFromSlice=Math.abs(nodule.x-slicePos);}// Calculate the nodule color based on confidence\nconst color=getNoduleColor(nodule.confidence);// Create circle element for nodule outline\nconst circle=document.createElementNS('http://www.w3.org/2000/svg','circle');circle.setAttribute('cx',xPx);circle.setAttribute('cy',yPx);circle.setAttribute('r',radiusPixels);circle.setAttribute('fill','none');circle.setAttribute('stroke',color);circle.setAttribute('stroke-width','2');// Create dot element for center point\nconst centerDot=document.createElementNS('http://www.w3.org/2000/svg','circle');centerDot.setAttribute('cx',xPx);centerDot.setAttribute('cy',yPx);centerDot.setAttribute('r','3');centerDot.setAttribute('fill',color);// Highlight selected nodule with a thicker stroke\nif(selectedNoduleId===nodule.id){circle.setAttribute('stroke-width','3');circle.setAttribute('stroke-dasharray','5,3');}svg.appendChild(circle);svg.appendChild(centerDot);});overlay.appendChild(svg);container.appendChild(overlay);};drawNodules();// Cleanup function\nreturn()=>{const container=containerRef.current;if(container){const overlay=container.querySelector('.nodule-overlay');if(overlay){container.removeChild(overlay);}}};},[sliceImage,nodulesInSlice,currentAxis,selectedNoduleId,volumeInfo]);// Get max slice index for current axis\nconst getMaxSliceIndex=()=>{if(!volumeInfo)return 0;if(currentAxis==='axial'){return volumeInfo.dimensions.depth-1;}else if(currentAxis==='coronal'){return volumeInfo.dimensions.height-1;}else{// sagittal\nreturn volumeInfo.dimensions.width-1;}};const handleAxisChange=axis=>{setCurrentAxis(axis);// Reset to middle slice when changing axis\nconst middle=Math.floor(axis==='axial'?volumeInfo.dimensions.depth/2:axis==='coronal'?volumeInfo.dimensions.height/2:volumeInfo.dimensions.width/2);setCurrentSlice(middle);};const handleSliceChange=e=>{setCurrentSlice(parseInt(e.target.value,10));};// Track which slices have nodules to highlight them on the slider\nconst slicesWithNodules=()=>{if(!volumeInfo||!volumeInfo.nodules)return[];const noduleSlices=new Set();volumeInfo.nodules.forEach(nodule=>{if(currentAxis==='axial'){// Mark all slices within the nodule's radius\nconst start=Math.max(0,Math.floor(nodule.z-nodule.radius));const end=Math.min(volumeInfo.dimensions.depth-1,Math.ceil(nodule.z+nodule.radius));for(let i=start;i<=end;i++){noduleSlices.add(i);}}else if(currentAxis==='coronal'){const start=Math.max(0,Math.floor(nodule.y-nodule.radius));const end=Math.min(volumeInfo.dimensions.height-1,Math.ceil(nodule.y+nodule.radius));for(let i=start;i<=end;i++){noduleSlices.add(i);}}else{// sagittal\nconst start=Math.max(0,Math.floor(nodule.x-nodule.radius));const end=Math.min(volumeInfo.dimensions.width-1,Math.ceil(nodule.x+nodule.radius));for(let i=start;i<=end;i++){noduleSlices.add(i);}}});return Array.from(noduleSlices);};// Nodule colors for different confidence levels\nconst getNoduleColor=confidence=>{if(confidence>=0.8)return'rgba(220, 38, 38, 0.8)';// Red for high confidence\nif(confidence>=0.6)return'rgba(234, 88, 12, 0.8)';// Orange for medium confidence\nreturn'rgba(234, 179, 8, 0.8)';// Yellow for lower confidence\n};if(error){return/*#__PURE__*/_jsx(\"div\",{className:`${darkMode?'bg-red-900':'bg-red-50'} p-4 rounded-md`,children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex\",children:[/*#__PURE__*/_jsx(ExclamationCircleIcon,{className:`h-5 w-5 ${darkMode?'text-red-300':'text-red-400'}`,\"aria-hidden\":\"true\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"ml-3\",children:[/*#__PURE__*/_jsx(\"h3\",{className:`text-sm font-medium ${darkMode?'text-red-300':'text-red-800'}`,children:error}),/*#__PURE__*/_jsx(\"p\",{className:`mt-2 text-sm ${darkMode?'text-red-200':'text-red-700'}`,children:\"Interactive visualization is not available. Please refer to the static image results.\"})]})]})});}if(isLoading&&!volumeInfo){return/*#__PURE__*/_jsxs(\"div\",{className:`text-center py-12 ${darkMode?'text-white':'text-gray-600'}`,children:[/*#__PURE__*/_jsx(\"div\",{className:\"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-indigo-600 border-r-transparent\"}),/*#__PURE__*/_jsx(\"p\",{className:`mt-4 ${darkMode?'text-gray-300':'text-gray-600'}`,children:\"Loading volume data...\"})]});}return/*#__PURE__*/_jsxs(\"div\",{className:`${darkMode?'bg-gray-800':'bg-white'} shadow rounded-lg overflow-hidden`,children:[/*#__PURE__*/_jsxs(\"div\",{className:`px-4 py-5 border-b ${darkMode?'border-gray-700':'border-gray-200'} sm:px-6 flex justify-between items-center`,children:[/*#__PURE__*/_jsx(\"h3\",{className:`text-lg font-medium ${darkMode?'text-white':'text-gray-900'}`,children:\"Interactive Visualization\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex space-x-2\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleAxisChange('axial'),className:`px-3 py-1 rounded-md text-sm font-medium ${currentAxis==='axial'?'bg-indigo-600 text-white':darkMode?'bg-gray-700 text-gray-300 hover:bg-gray-600':'bg-gray-200 text-gray-800 hover:bg-gray-300'}`,children:\"Axial\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleAxisChange('coronal'),className:`px-3 py-1 rounded-md text-sm font-medium ${currentAxis==='coronal'?'bg-indigo-600 text-white':darkMode?'bg-gray-700 text-gray-300 hover:bg-gray-600':'bg-gray-200 text-gray-800 hover:bg-gray-300'}`,children:\"Coronal\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleAxisChange('sagittal'),className:`px-3 py-1 rounded-md text-sm font-medium ${currentAxis==='sagittal'?'bg-indigo-600 text-white':darkMode?'bg-gray-700 text-gray-300 hover:bg-gray-600':'bg-gray-200 text-gray-800 hover:bg-gray-300'}`,children:\"Sagittal\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"p-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:`mb-4 text-sm ${darkMode?'text-gray-300':'text-gray-600'}`,children:[/*#__PURE__*/_jsx(\"p\",{children:\"Interactive visualization shows enhanced CT scan slices with detected nodules highlighted. Navigate through slices using the controls.\"}),/*#__PURE__*/_jsxs(\"ul\",{className:\"mt-2 list-disc pl-5 space-y-1\",children:[/*#__PURE__*/_jsx(\"li\",{children:\"Blue markers on slider: Slices containing nodules\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Colored circles: Detected nodules (color indicates confidence level)\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Center dots: Center point of the detected nodule\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Enhanced contrast: Adaptive window/level settings improve nodule visibility\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Use slider or buttons to navigate slices and jump between nodules\"}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"View planes\"}),\":\",/*#__PURE__*/_jsxs(\"ul\",{className:\"ml-2 mt-1\",children:[/*#__PURE__*/_jsx(\"li\",{children:\"Axial: Top-down view (transverse plane)\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Coronal: Front-to-back view (rotated for better orientation)\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Sagittal: Side view (left-to-right)\"})]})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col lg:flex-row gap-6\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"flex-1 relative max-w-4xl mx-auto lg:mx-0\",ref:containerRef,children:isLoading?/*#__PURE__*/_jsx(\"div\",{className:`absolute inset-0 flex items-center justify-center ${darkMode?'bg-gray-700':'bg-gray-100'} rounded-md`,children:/*#__PURE__*/_jsx(ArrowPathIcon,{className:\"h-8 w-8 text-indigo-500 animate-spin\"})}):/*#__PURE__*/_jsx(_Fragment,{children:sliceImage&&/*#__PURE__*/_jsx(\"div\",{className:\"relative\",children:/*#__PURE__*/_jsx(\"img\",{ref:imageRef,src:sliceImage,alt:`${currentAxis} slice ${currentSlice}`,className:\"w-full rounded-md shadow\"})})})}),/*#__PURE__*/_jsxs(\"div\",{className:`w-full lg:w-64 ${darkMode?'text-white':''}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mb-4\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"slice-slider\",className:`block text-sm font-medium ${darkMode?'text-gray-300':'text-gray-700'} mb-1`,children:[\"Slice Navigator\",/*#__PURE__*/_jsxs(\"span\",{className:\"ml-2 text-xs font-normal\",children:[\"(\",currentSlice,\" / \",getMaxSliceIndex(),\")\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"relative mt-1\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"range\",id:\"slice-slider\",min:\"0\",max:getMaxSliceIndex(),value:currentSlice,onChange:handleSliceChange,className:`w-full h-2 rounded-lg appearance-none cursor-pointer ${darkMode?'bg-gray-700':'bg-gray-200'}`,style:{background:`linear-gradient(to right, \n                      ${darkMode?'#4f46e5':'#6366f1'} 0%, \n                      ${darkMode?'#4f46e5':'#6366f1'} ${currentSlice/getMaxSliceIndex()*100}%, \n                      ${darkMode?'#374151':'#e5e7eb'} ${currentSlice/getMaxSliceIndex()*100}%, \n                      ${darkMode?'#374151':'#e5e7eb'} 100%)`}}),slicesWithNodules().map(slice=>/*#__PURE__*/_jsx(\"div\",{style:{position:'absolute',left:`${slice/getMaxSliceIndex()*100}%`,top:'0px',width:'4px',height:'8px',backgroundColor:'#3b82f6',borderRadius:'2px',transform:'translateX(-50%)',zIndex:10},title:`Nodule at slice ${slice}`,onClick:()=>setCurrentSlice(slice)},`marker-${slice}`))]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-6\",children:[/*#__PURE__*/_jsx(\"h4\",{className:`text-sm font-medium ${darkMode?'text-gray-300':'text-gray-700'} mb-2`,children:\"Nodules In View\"}),nodulesInSlice.length>0?/*#__PURE__*/_jsx(\"ul\",{className:`space-y-2 ${darkMode?'text-gray-300':'text-gray-700'}`,children:nodulesInSlice.map(nodule=>/*#__PURE__*/_jsx(\"li\",{className:\"flex items-center justify-between\",children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"inline-block w-3 h-3 rounded-full mr-2\",style:{backgroundColor:getNoduleColor(nodule.confidence)}}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-sm\",children:[nodule.id,/*#__PURE__*/_jsxs(\"span\",{className:`ml-2 ${darkMode?'text-gray-400':'text-gray-500'} text-xs`,children:[\"(conf: \",(nodule.confidence*100).toFixed(1),\"%)\"]})]})]})},`nodule-${nodule.id}`))}):/*#__PURE__*/_jsx(\"p\",{className:`text-sm ${darkMode?'text-gray-400':'text-gray-500'}`,children:\"No nodules in current slice\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between mt-4\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>setCurrentSlice(Math.max(0,currentSlice-1)),disabled:currentSlice===0,className:`px-3 py-1 rounded text-sm ${currentSlice===0?`${darkMode?'bg-gray-700 text-gray-500':'bg-gray-200 text-gray-400'} cursor-not-allowed`:`${darkMode?'bg-gray-700 text-white hover:bg-gray-600':'bg-gray-200 text-gray-800 hover:bg-gray-300'}`}`,children:\"Previous\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setCurrentSlice(Math.min(getMaxSliceIndex(),currentSlice+1)),disabled:currentSlice===getMaxSliceIndex(),className:`px-3 py-1 rounded text-sm ${currentSlice===getMaxSliceIndex()?`${darkMode?'bg-gray-700 text-gray-500':'bg-gray-200 text-gray-400'} cursor-not-allowed`:`${darkMode?'bg-gray-700 text-white hover:bg-gray-600':'bg-gray-200 text-gray-800 hover:bg-gray-300'}`}`,children:\"Next\"})]})]})]})]})]});};export default InteractiveViewer;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","ArrowPathIcon","ExclamationCircleIcon","useTheme","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","InteractiveViewer","_ref","caseId","selectedNoduleId","volumeInfo","setVolumeInfo","currentAxis","setCurrentAxis","currentSlice","setCurrentSlice","sliceImage","setSliceImage","isLoading","setIsLoading","error","setError","nodulesInSlice","setNodulesInSlice","imageRef","containerRef","darkMode","goToNoduleSlice","noduleId","nodules","nodule","find","n","id","Math","round","z","fetchVolumeInfo","response","get","data","volume_info","initialSlice","floor","dimensions","depth","_error$response","_error$response$data","console","message","fetchSlice","slice_data","_error$response2","_error$response2$data","sliceNodules","filter","abs","radius","y","x","current","length","drawNodules","img","complete","onload","drawNodulesOnImage","container","existingOverlay","querySelector","removeChild","overlay","document","createElement","className","style","position","top","left","width","height","pointerEvents","imgRect","getBoundingClientRect","containerRect","aspectRatio","spacing","svg","createElementNS","setAttribute","displayWidth","displayHeight","forEach","slicePos","xNorm","yNorm","xPx","yPx","radiusMm","pixelsPerMm","spacingX","spacingY","mmPerPixel","min","widthInMm","spacingZ","heightInMm","radiusPixels","max","distanceFromSlice","color","getNoduleColor","confidence","circle","centerDot","appendChild","getMaxSliceIndex","handleAxisChange","axis","middle","handleSliceChange","e","parseInt","target","value","slicesWithNodules","noduleSlices","Set","start","end","ceil","i","add","Array","from","children","onClick","ref","src","alt","htmlFor","type","onChange","background","map","slice","backgroundColor","borderRadius","transform","zIndex","title","toFixed","disabled"],"sources":["D:/Segmentation/pipeline/webapp/static/src/components/InteractiveViewer.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { ArrowPathIcon, ExclamationCircleIcon } from '@heroicons/react/24/outline';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\n\r\nconst InteractiveViewer = ({ caseId, selectedNoduleId }) => {\r\n  const [volumeInfo, setVolumeInfo] = useState(null);\r\n  const [currentAxis, setCurrentAxis] = useState('axial');\r\n  const [currentSlice, setCurrentSlice] = useState(0);\r\n  const [sliceImage, setSliceImage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [nodulesInSlice, setNodulesInSlice] = useState([]);\r\n  const imageRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n  const { darkMode } = useTheme();\r\n\r\n  // Function to go to a specific nodule slice\r\n  const goToNoduleSlice = (noduleId) => {\r\n    if (!volumeInfo || !volumeInfo.nodules) return;\r\n    \r\n    // Find the nodule by ID\r\n    const nodule = volumeInfo.nodules.find(n => n.id === noduleId);\r\n    if (!nodule) return;\r\n    \r\n    // Set the axis to axial (z)\r\n    setCurrentAxis('axial');\r\n    \r\n    // Set the slice to the nodule's z-coordinate\r\n    setCurrentSlice(Math.round(nodule.z));\r\n  };\r\n\r\n  // Navigate to selected nodule when selectedNoduleId or volumeInfo changes\r\n  useEffect(() => {\r\n    if (selectedNoduleId && volumeInfo && volumeInfo.nodules) {\r\n      goToNoduleSlice(selectedNoduleId);\r\n    }\r\n  }, [selectedNoduleId, volumeInfo]);\r\n\r\n  // Fetch volume metadata\r\n  useEffect(() => {\r\n    const fetchVolumeInfo = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const response = await axios.get(`/api/results/${caseId}/slices`);\r\n        setVolumeInfo(response.data.volume_info);\r\n        \r\n        // Set initial slice to middle of volume\r\n        const initialSlice = Math.floor(response.data.volume_info.dimensions.depth / 2);\r\n        setCurrentSlice(initialSlice);\r\n        \r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching volume info:', error);\r\n        setError(error.response?.data?.message || 'Failed to load volume data');\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchVolumeInfo();\r\n  }, [caseId]);\r\n\r\n  // Fetch slice when axis or slice index changes\r\n  useEffect(() => {\r\n    const fetchSlice = async () => {\r\n      if (!volumeInfo) return;\r\n      \r\n      try {\r\n        setIsLoading(true);\r\n        const response = await axios.get(`/api/results/${caseId}/slices/${currentAxis}/${currentSlice}`);\r\n        setSliceImage(response.data.slice_data);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching slice:', error);\r\n        setError(error.response?.data?.message || 'Failed to load slice');\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchSlice();\r\n  }, [caseId, currentAxis, currentSlice, volumeInfo]);\r\n\r\n  // Find nodules in the current slice\r\n  useEffect(() => {\r\n    if (!volumeInfo || !volumeInfo.nodules) return;\r\n    \r\n    // Determine which nodules are visible in this slice\r\n    const sliceNodules = volumeInfo.nodules.filter(nodule => {\r\n      // Check if this nodule is visible in the current slice\r\n      if (currentAxis === 'axial') {\r\n        // Check if the nodule's z-coordinate is close to this slice\r\n        return Math.abs(nodule.z - currentSlice) <= nodule.radius;\r\n      } else if (currentAxis === 'coronal') {\r\n        // Check if the nodule's y-coordinate is close to this slice\r\n        return Math.abs(nodule.y - currentSlice) <= nodule.radius;\r\n      } else { // sagittal\r\n        // Check if the nodule's x-coordinate is close to this slice\r\n        return Math.abs(nodule.x - currentSlice) <= nodule.radius;\r\n      }\r\n    });\r\n    \r\n    setNodulesInSlice(sliceNodules);\r\n  }, [volumeInfo, currentAxis, currentSlice]);\r\n\r\n  // Draw nodule circles and center points when image loads or nodulesInSlice changes\r\n  useEffect(() => {\r\n    if (!sliceImage || !imageRef.current || nodulesInSlice.length === 0) return;\r\n\r\n    const drawNodules = () => {\r\n      const img = imageRef.current;\r\n      if (!img.complete) {\r\n        // Wait for image to load before drawing\r\n        img.onload = drawNodulesOnImage;\r\n        return;\r\n      }\r\n      \r\n      drawNodulesOnImage();\r\n    };\r\n\r\n    const drawNodulesOnImage = () => {\r\n      const img = imageRef.current;\r\n      const container = containerRef.current;\r\n      \r\n      // Clear any existing overlay elements\r\n      const existingOverlay = container.querySelector('.nodule-overlay');\r\n      if (existingOverlay) {\r\n        container.removeChild(existingOverlay);\r\n      }\r\n      \r\n      // Create overlay div that will contain the SVG with nodule circles\r\n      const overlay = document.createElement('div');\r\n      overlay.className = 'nodule-overlay';\r\n      overlay.style.position = 'absolute';\r\n      overlay.style.top = '0';\r\n      overlay.style.left = '0';\r\n      overlay.style.width = '100%';\r\n      overlay.style.height = '100%';\r\n      overlay.style.pointerEvents = 'none';\r\n      \r\n      // Calculate image display dimensions and position\r\n      const imgRect = img.getBoundingClientRect();\r\n      const containerRect = container.getBoundingClientRect();\r\n      \r\n      // Calculate aspect ratio for the current view\r\n      let aspectRatio = 1.0;\r\n      if (volumeInfo && volumeInfo.spacing) {\r\n        if (currentAxis === 'axial') {\r\n          // Y/X aspect ratio for axial view\r\n          aspectRatio = volumeInfo.spacing[1] / volumeInfo.spacing[0];\r\n        } else if (currentAxis === 'coronal') {\r\n          // Z/X aspect ratio for coronal view\r\n          aspectRatio = volumeInfo.spacing[2] / volumeInfo.spacing[0];\r\n        } else { // sagittal\r\n          // Z/Y aspect ratio for sagittal view\r\n          aspectRatio = volumeInfo.spacing[2] / volumeInfo.spacing[1];\r\n        }\r\n      }\r\n      \r\n      // Create SVG element for drawing\r\n      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\r\n      svg.setAttribute('width', '100%');\r\n      svg.setAttribute('height', '100%');\r\n      svg.style.position = 'absolute';\r\n      svg.style.top = '0';\r\n      svg.style.left = '0';\r\n      \r\n      // Get display dimensions for scaling\r\n      const displayWidth = imgRect.width;\r\n      const displayHeight = imgRect.height;\r\n      \r\n      // Draw each nodule\r\n      nodulesInSlice.forEach(nodule => {\r\n        let x, y, slicePos;\r\n        \r\n        // Calculate 2D coordinates based on the current viewing axis\r\n        if (currentAxis === 'axial') {\r\n          x = nodule.x;\r\n          y = nodule.y;\r\n          slicePos = currentSlice;\r\n        } else if (currentAxis === 'coronal') {\r\n          x = nodule.x;\r\n          y = nodule.z;\r\n          slicePos = currentSlice;\r\n        } else { // sagittal\r\n          x = nodule.y;\r\n          y = nodule.z;\r\n          slicePos = currentSlice;\r\n        }\r\n        \r\n        // Calculate the position in normalized coordinates (0-1 range)\r\n        let xNorm, yNorm;\r\n        \r\n        if (currentAxis === 'axial') {\r\n          xNorm = x / volumeInfo.dimensions.width;\r\n          yNorm = y / volumeInfo.dimensions.height;\r\n        } else if (currentAxis === 'coronal') {\r\n          xNorm = x / volumeInfo.dimensions.width;\r\n          yNorm = y / volumeInfo.dimensions.depth;\r\n        } else { // sagittal\r\n          xNorm = y / volumeInfo.dimensions.height;\r\n          yNorm = nodule.z / volumeInfo.dimensions.depth;\r\n        }\r\n        \r\n        // Apply proper scaling for the current view resolution\r\n        // Convert from normalized coordinates to display pixels\r\n        const xPx = xNorm * displayWidth;\r\n        \r\n        // Apply aspect ratio correction to y-coordinate\r\n        // This ensures that the nodule appears at the right vertical position\r\n        // regardless of how the image is stretched or squeezed\r\n        const yPx = yNorm * displayHeight;\r\n        \r\n        // Calculate radius in pixels based on the nodule's radius in mm\r\n        // Scale according to the current display size\r\n        let radiusMm = nodule.radius || 5; // Default to 5mm if not specified\r\n        let pixelsPerMm;\r\n        \r\n        // Calculate pixels per mm based on the current view's spacing\r\n        if (currentAxis === 'axial') {\r\n          // Use the minimum of width and height spacing for consistent sizing\r\n          const spacingX = volumeInfo.spacing ? volumeInfo.spacing[0] : 1;\r\n          const spacingY = volumeInfo.spacing ? volumeInfo.spacing[1] : 1;\r\n          const mmPerPixel = Math.min(spacingX, spacingY);\r\n          // Calculate how many display pixels correspond to one mm in the CT scan\r\n          const widthInMm = volumeInfo.dimensions.width * spacingX;\r\n          pixelsPerMm = displayWidth / widthInMm;\r\n        } else if (currentAxis === 'coronal') {\r\n          const spacingX = volumeInfo.spacing ? volumeInfo.spacing[0] : 1;\r\n          const spacingZ = volumeInfo.spacing ? volumeInfo.spacing[2] : 1;\r\n          const mmPerPixel = Math.min(spacingX, spacingZ);\r\n          // Calculate how many display pixels correspond to one mm in the CT scan\r\n          const widthInMm = volumeInfo.dimensions.width * spacingX;\r\n          pixelsPerMm = displayWidth / widthInMm;\r\n        } else { // sagittal\r\n          const spacingY = volumeInfo.spacing ? volumeInfo.spacing[1] : 1;\r\n          const spacingZ = volumeInfo.spacing ? volumeInfo.spacing[2] : 1;\r\n          const mmPerPixel = Math.min(spacingY, spacingZ);\r\n          // Calculate how many display pixels correspond to one mm in the CT scan\r\n          const heightInMm = volumeInfo.dimensions.height * spacingY;\r\n          pixelsPerMm = displayHeight / heightInMm;\r\n        }\r\n        \r\n        // Calculate the radius in display pixels\r\n        let radiusPixels = radiusMm * pixelsPerMm;\r\n        \r\n        // Make circles more appropriately sized for visualization\r\n        radiusPixels = Math.max(5, radiusPixels * 0.5); // Minimum 5px radius for visibility\r\n        \r\n        // Adjust the radius based on how far the nodule is from the current slice\r\n        let distanceFromSlice;\r\n        if (currentAxis === 'axial') {\r\n          distanceFromSlice = Math.abs(nodule.z - slicePos);\r\n        } else if (currentAxis === 'coronal') {\r\n          distanceFromSlice = Math.abs(nodule.y - slicePos);\r\n        } else { // sagittal\r\n          distanceFromSlice = Math.abs(nodule.x - slicePos);\r\n        }\r\n        \r\n        // Calculate the nodule color based on confidence\r\n        const color = getNoduleColor(nodule.confidence);\r\n        \r\n        // Create circle element for nodule outline\r\n        const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n        circle.setAttribute('cx', xPx);\r\n        circle.setAttribute('cy', yPx);\r\n        circle.setAttribute('r', radiusPixels);\r\n        circle.setAttribute('fill', 'none');\r\n        circle.setAttribute('stroke', color);\r\n        circle.setAttribute('stroke-width', '2');\r\n        \r\n        // Create dot element for center point\r\n        const centerDot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n        centerDot.setAttribute('cx', xPx);\r\n        centerDot.setAttribute('cy', yPx);\r\n        centerDot.setAttribute('r', '3');\r\n        centerDot.setAttribute('fill', color);\r\n        \r\n        // Highlight selected nodule with a thicker stroke\r\n        if (selectedNoduleId === nodule.id) {\r\n          circle.setAttribute('stroke-width', '3');\r\n          circle.setAttribute('stroke-dasharray', '5,3');\r\n        }\r\n        \r\n        svg.appendChild(circle);\r\n        svg.appendChild(centerDot);\r\n      });\r\n      \r\n      overlay.appendChild(svg);\r\n      container.appendChild(overlay);\r\n    };\r\n\r\n    drawNodules();\r\n    \r\n    // Cleanup function\r\n    return () => {\r\n      const container = containerRef.current;\r\n      if (container) {\r\n        const overlay = container.querySelector('.nodule-overlay');\r\n        if (overlay) {\r\n          container.removeChild(overlay);\r\n        }\r\n      }\r\n    };\r\n  }, [sliceImage, nodulesInSlice, currentAxis, selectedNoduleId, volumeInfo]);\r\n\r\n  // Get max slice index for current axis\r\n  const getMaxSliceIndex = () => {\r\n    if (!volumeInfo) return 0;\r\n    \r\n    if (currentAxis === 'axial') {\r\n      return volumeInfo.dimensions.depth - 1;\r\n    } else if (currentAxis === 'coronal') {\r\n      return volumeInfo.dimensions.height - 1;\r\n    } else { // sagittal\r\n      return volumeInfo.dimensions.width - 1;\r\n    }\r\n  };\r\n\r\n  const handleAxisChange = (axis) => {\r\n    setCurrentAxis(axis);\r\n    // Reset to middle slice when changing axis\r\n    const middle = Math.floor(\r\n      axis === 'axial' \r\n        ? volumeInfo.dimensions.depth / 2\r\n        : axis === 'coronal'\r\n          ? volumeInfo.dimensions.height / 2\r\n          : volumeInfo.dimensions.width / 2\r\n    );\r\n    setCurrentSlice(middle);\r\n  };\r\n\r\n  const handleSliceChange = (e) => {\r\n    setCurrentSlice(parseInt(e.target.value, 10));\r\n  };\r\n\r\n  // Track which slices have nodules to highlight them on the slider\r\n  const slicesWithNodules = () => {\r\n    if (!volumeInfo || !volumeInfo.nodules) return [];\r\n    \r\n    const noduleSlices = new Set();\r\n    volumeInfo.nodules.forEach(nodule => {\r\n      if (currentAxis === 'axial') {\r\n        // Mark all slices within the nodule's radius\r\n        const start = Math.max(0, Math.floor(nodule.z - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.depth - 1, Math.ceil(nodule.z + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      } else if (currentAxis === 'coronal') {\r\n        const start = Math.max(0, Math.floor(nodule.y - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.height - 1, Math.ceil(nodule.y + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      } else { // sagittal\r\n        const start = Math.max(0, Math.floor(nodule.x - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.width - 1, Math.ceil(nodule.x + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      }\r\n    });\r\n    \r\n    return Array.from(noduleSlices);\r\n  };\r\n\r\n  // Nodule colors for different confidence levels\r\n  const getNoduleColor = (confidence) => {\r\n    if (confidence >= 0.8) return 'rgba(220, 38, 38, 0.8)';  // Red for high confidence\r\n    if (confidence >= 0.6) return 'rgba(234, 88, 12, 0.8)';  // Orange for medium confidence\r\n    return 'rgba(234, 179, 8, 0.8)';  // Yellow for lower confidence\r\n  };\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`${darkMode ? 'bg-red-900' : 'bg-red-50'} p-4 rounded-md`}>\r\n        <div className=\"flex\">\r\n          <ExclamationCircleIcon className={`h-5 w-5 ${darkMode ? 'text-red-300' : 'text-red-400'}`} aria-hidden=\"true\" />\r\n          <div className=\"ml-3\">\r\n            <h3 className={`text-sm font-medium ${darkMode ? 'text-red-300' : 'text-red-800'}`}>{error}</h3>\r\n            <p className={`mt-2 text-sm ${darkMode ? 'text-red-200' : 'text-red-700'}`}>\r\n              Interactive visualization is not available. Please refer to the static image results.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isLoading && !volumeInfo) {\r\n    return (\r\n      <div className={`text-center py-12 ${darkMode ? 'text-white' : 'text-gray-600'}`}>\r\n        <div className=\"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-indigo-600 border-r-transparent\"></div>\r\n        <p className={`mt-4 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Loading volume data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} shadow rounded-lg overflow-hidden`}>\r\n      <div className={`px-4 py-5 border-b ${darkMode ? 'border-gray-700' : 'border-gray-200'} sm:px-6 flex justify-between items-center`}>\r\n        <h3 className={`text-lg font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>Interactive Visualization</h3>\r\n        \r\n        {/* Axis selection */}\r\n        <div className=\"flex space-x-2\">\r\n          <button\r\n            onClick={() => handleAxisChange('axial')}\r\n            className={`px-3 py-1 rounded-md text-sm font-medium ${\r\n              currentAxis === 'axial'\r\n                ? 'bg-indigo-600 text-white'\r\n                : darkMode \r\n                  ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' \r\n                  : 'bg-gray-200 text-gray-800 hover:bg-gray-300'\r\n            }`}\r\n          >\r\n            Axial\r\n          </button>\r\n          <button\r\n            onClick={() => handleAxisChange('coronal')}\r\n            className={`px-3 py-1 rounded-md text-sm font-medium ${\r\n              currentAxis === 'coronal'\r\n                ? 'bg-indigo-600 text-white'\r\n                : darkMode \r\n                  ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' \r\n                  : 'bg-gray-200 text-gray-800 hover:bg-gray-300'\r\n            }`}\r\n          >\r\n            Coronal\r\n          </button>\r\n          <button\r\n            onClick={() => handleAxisChange('sagittal')}\r\n            className={`px-3 py-1 rounded-md text-sm font-medium ${\r\n              currentAxis === 'sagittal'\r\n                ? 'bg-indigo-600 text-white'\r\n                : darkMode \r\n                  ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' \r\n                  : 'bg-gray-200 text-gray-800 hover:bg-gray-300'\r\n            }`}\r\n          >\r\n            Sagittal\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"p-6\">\r\n        {/* Description of view */}\r\n        <div className={`mb-4 text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>\r\n          <p>Interactive visualization shows enhanced CT scan slices with detected nodules highlighted. Navigate through slices using the controls.</p>\r\n          <ul className=\"mt-2 list-disc pl-5 space-y-1\">\r\n            <li>Blue markers on slider: Slices containing nodules</li>\r\n            <li>Colored circles: Detected nodules (color indicates confidence level)</li>\r\n            <li>Center dots: Center point of the detected nodule</li>\r\n            <li>Enhanced contrast: Adaptive window/level settings improve nodule visibility</li>\r\n            <li>Use slider or buttons to navigate slices and jump between nodules</li>\r\n            <li><strong>View planes</strong>: \r\n              <ul className=\"ml-2 mt-1\">\r\n                <li>Axial: Top-down view (transverse plane)</li>\r\n                <li>Coronal: Front-to-back view (rotated for better orientation)</li>\r\n                <li>Sagittal: Side view (left-to-right)</li>\r\n              </ul>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        \r\n        {/* Slice viewer */}\r\n        <div className=\"flex flex-col lg:flex-row gap-6\">\r\n          {/* Slice image */}\r\n          <div className=\"flex-1 relative max-w-4xl mx-auto lg:mx-0\" ref={containerRef}>\r\n            {isLoading ? (\r\n              <div className={`absolute inset-0 flex items-center justify-center ${darkMode ? 'bg-gray-700' : 'bg-gray-100'} rounded-md`}>\r\n                <ArrowPathIcon className=\"h-8 w-8 text-indigo-500 animate-spin\" />\r\n              </div>\r\n            ) : (\r\n              <>\r\n                {sliceImage && (\r\n                  <div className=\"relative\">\r\n                    <img\r\n                      ref={imageRef}\r\n                      src={sliceImage}\r\n                      alt={`${currentAxis} slice ${currentSlice}`}\r\n                      className=\"w-full rounded-md shadow\"\r\n                    />\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n          \r\n          {/* Controls */}\r\n          <div className={`w-full lg:w-64 ${darkMode ? 'text-white' : ''}`}>\r\n            <div className=\"mb-4\">\r\n              <label\r\n                htmlFor=\"slice-slider\"\r\n                className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}\r\n              >\r\n                Slice Navigator \r\n                <span className=\"ml-2 text-xs font-normal\">\r\n                  ({currentSlice} / {getMaxSliceIndex()})\r\n                </span>\r\n              </label>\r\n              \r\n              <div className=\"relative mt-1\">\r\n                <input\r\n                  type=\"range\"\r\n                  id=\"slice-slider\"\r\n                  min=\"0\"\r\n                  max={getMaxSliceIndex()}\r\n                  value={currentSlice}\r\n                  onChange={handleSliceChange}\r\n                  className={`w-full h-2 rounded-lg appearance-none cursor-pointer ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}\r\n                  style={{\r\n                    background: `linear-gradient(to right, \r\n                      ${darkMode ? '#4f46e5' : '#6366f1'} 0%, \r\n                      ${darkMode ? '#4f46e5' : '#6366f1'} ${(currentSlice / getMaxSliceIndex()) * 100}%, \r\n                      ${darkMode ? '#374151' : '#e5e7eb'} ${(currentSlice / getMaxSliceIndex()) * 100}%, \r\n                      ${darkMode ? '#374151' : '#e5e7eb'} 100%)`\r\n                  }}\r\n                />\r\n                \r\n                {/* Markers for slices with nodules */}\r\n                {slicesWithNodules().map(slice => (\r\n                  <div\r\n                    key={`marker-${slice}`}\r\n                    style={{\r\n                      position: 'absolute',\r\n                      left: `${(slice / getMaxSliceIndex()) * 100}%`,\r\n                      top: '0px',\r\n                      width: '4px',\r\n                      height: '8px',\r\n                      backgroundColor: '#3b82f6',\r\n                      borderRadius: '2px',\r\n                      transform: 'translateX(-50%)',\r\n                      zIndex: 10\r\n                    }}\r\n                    title={`Nodule at slice ${slice}`}\r\n                    onClick={() => setCurrentSlice(slice)}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Nodules in current slice */}\r\n            <div className=\"mt-6\">\r\n              <h4 className={`text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-2`}>\r\n                Nodules In View\r\n              </h4>\r\n              \r\n              {nodulesInSlice.length > 0 ? (\r\n                <ul className={`space-y-2 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>\r\n                  {nodulesInSlice.map(nodule => (\r\n                    <li key={`nodule-${nodule.id}`} className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <span \r\n                          className=\"inline-block w-3 h-3 rounded-full mr-2\"\r\n                          style={{ backgroundColor: getNoduleColor(nodule.confidence) }}\r\n                        />\r\n                        <span className=\"text-sm\">\r\n                          {nodule.id} \r\n                          <span className={`ml-2 ${darkMode ? 'text-gray-400' : 'text-gray-500'} text-xs`}>\r\n                            (conf: {(nodule.confidence * 100).toFixed(1)}%)\r\n                          </span>\r\n                        </span>\r\n                      </div>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              ) : (\r\n                <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>\r\n                  No nodules in current slice\r\n                </p>\r\n              )}\r\n            </div>\r\n            \r\n            {/* Navigation buttons */}\r\n            <div className=\"flex justify-between mt-4\">\r\n              <button\r\n                onClick={() => setCurrentSlice(Math.max(0, currentSlice - 1))}\r\n                disabled={currentSlice === 0}\r\n                className={`px-3 py-1 rounded text-sm ${\r\n                  currentSlice === 0\r\n                    ? `${darkMode ? 'bg-gray-700 text-gray-500' : 'bg-gray-200 text-gray-400'} cursor-not-allowed`\r\n                    : `${darkMode ? 'bg-gray-700 text-white hover:bg-gray-600' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`\r\n                }`}\r\n              >\r\n                Previous\r\n              </button>\r\n              \r\n              <button\r\n                onClick={() => setCurrentSlice(Math.min(getMaxSliceIndex(), currentSlice + 1))}\r\n                disabled={currentSlice === getMaxSliceIndex()}\r\n                className={`px-3 py-1 rounded text-sm ${\r\n                  currentSlice === getMaxSliceIndex()\r\n                    ? `${darkMode ? 'bg-gray-700 text-gray-500' : 'bg-gray-200 text-gray-400'} cursor-not-allowed`\r\n                    : `${darkMode ? 'bg-gray-700 text-white hover:bg-gray-600' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`\r\n                }`}\r\n              >\r\n                Next\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InteractiveViewer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}