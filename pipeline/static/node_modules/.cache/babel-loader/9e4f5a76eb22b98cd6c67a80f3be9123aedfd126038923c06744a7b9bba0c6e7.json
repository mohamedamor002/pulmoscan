{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import axios from'axios';// Create auth context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();// Custom hook to use the auth context\nexport const useAuth=()=>useContext(AuthContext);// Auth provider component\nexport const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isAuthenticated,setIsAuthenticated]=useState(false);const[isLoading,setIsLoading]=useState(true);// Initialize auth state from local storage\nuseEffect(()=>{const token=localStorage.getItem('token');const userData=localStorage.getItem('user');if(token&&userData){setUser(JSON.parse(userData));setIsAuthenticated(true);// Set the authorization header for all requests\naxios.defaults.headers.common['Authorization']=`Bearer ${token}`;}setIsLoading(false);},[]);// Login function\nconst login=async(username,password)=>{try{const response=await axios.post('/api/auth/login',{username,password});const{access_token,username:user,role}=response.data;// Store token and user data\nlocalStorage.setItem('token',access_token);localStorage.setItem('user',JSON.stringify({username,role}));// Set the authorization header for all requests\naxios.defaults.headers.common['Authorization']=`Bearer ${access_token}`;// Update state\nsetUser({username,role});setIsAuthenticated(true);return{success:true};}catch(error){var _error$response,_error$response$data;return{success:false,message:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.msg)||'Login failed. Please check your credentials.'};}};// Logout function\nconst logout=()=>{// Remove token and user data\nlocalStorage.removeItem('token');localStorage.removeItem('user');// Remove the authorization header\ndelete axios.defaults.headers.common['Authorization'];// Update state\nsetUser(null);setIsAuthenticated(false);};// Value to be provided to consumers\nconst value={user,isAuthenticated,isLoading,login,logout};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:!isLoading&&children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsx","_jsx","AuthContext","useAuth","AuthProvider","_ref","children","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","token","localStorage","getItem","userData","JSON","parse","defaults","headers","common","login","username","password","response","post","access_token","role","data","setItem","stringify","success","error","_error$response","_error$response$data","message","msg","logout","removeItem","value","Provider"],"sources":["D:/Segmentation/pipeline/webapp/static/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Create auth context\r\nconst AuthContext = createContext();\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n// Auth provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Initialize auth state from local storage\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const userData = localStorage.getItem('user');\r\n    \r\n    if (token && userData) {\r\n      setUser(JSON.parse(userData));\r\n      setIsAuthenticated(true);\r\n      \r\n      // Set the authorization header for all requests\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    \r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (username, password) => {\r\n    try {\r\n      const response = await axios.post('/api/auth/login', { username, password });\r\n      const { access_token, username: user, role } = response.data;\r\n      \r\n      // Store token and user data\r\n      localStorage.setItem('token', access_token);\r\n      localStorage.setItem('user', JSON.stringify({ username, role }));\r\n      \r\n      // Set the authorization header for all requests\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\r\n      \r\n      // Update state\r\n      setUser({ username, role });\r\n      setIsAuthenticated(true);\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: error.response?.data?.msg || 'Login failed. Please check your credentials.'\r\n      };\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    // Remove token and user data\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    \r\n    // Remove the authorization header\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    \r\n    // Update state\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  // Value to be provided to consumers\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    isLoading,\r\n    login,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!isLoading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}