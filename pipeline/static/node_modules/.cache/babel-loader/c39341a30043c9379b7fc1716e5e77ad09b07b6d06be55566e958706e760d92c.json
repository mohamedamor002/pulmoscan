{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import{useTheme}from'../contexts/ThemeContext';// Medical Background Component that adds animated visualizations\nimport{jsx as _jsx}from\"react/jsx-runtime\";const MedicalBackground=()=>{const canvasRef=useRef(null);const{darkMode}=useTheme();const[currentVariant,setCurrentVariant]=useState('default');const[transitionProgress,setTransitionProgress]=useState(0);const[isTransitioning,setIsTransitioning]=useState(false);// List of all available variants\nconst allVariants=['default','dna','cells','network','blood','brain'];const TRANSITION_DURATION=2000;// 2 seconds for transition\nconst VARIANT_DURATION=8000;// 8 seconds per variant\n// Special effect: Neural Network\nconst drawNeuralNetwork=(ctx,canvas,time,colors)=>{const centerX=canvas.width/2;const centerY=canvas.height/2;const radius=Math.min(canvas.width,canvas.height)*0.3;// Draw faint circular path\nctx.beginPath();ctx.arc(centerX,centerY,radius,0,Math.PI*2);ctx.strokeStyle=`${colors[0]}20`;ctx.lineWidth=1;ctx.stroke();// Draw neurons along the path\nconst neuronCount=10;const neurons=[];for(let i=0;i<neuronCount;i++){const angle=i/neuronCount*Math.PI*2+time;const x=centerX+Math.cos(angle)*radius;const y=centerY+Math.sin(angle)*radius;neurons.push({x,y});// Draw neuron\nctx.beginPath();ctx.arc(x,y,3,0,Math.PI*2);ctx.fillStyle=colors[i%colors.length];ctx.fill();}// Draw connections between neurons\nfor(let i=0;i<neurons.length;i++){for(let j=i+1;j<neurons.length;j++){ctx.beginPath();ctx.moveTo(neurons[i].x,neurons[i].y);ctx.lineTo(neurons[j].x,neurons[j].y);// Pulse effect along connections\nconst pulsePos=time*2%1;const gradient=ctx.createLinearGradient(neurons[i].x,neurons[i].y,neurons[j].x,neurons[j].y);gradient.addColorStop(Math.max(0,pulsePos-0.1),`${colors[0]}10`);gradient.addColorStop(pulsePos,`${colors[0]}80`);gradient.addColorStop(Math.min(1,pulsePos+0.1),`${colors[0]}10`);ctx.strokeStyle=gradient;ctx.lineWidth=0.5;ctx.stroke();}}};// Special effect: DNA Helix\nconst drawDNAHelix=(ctx,canvas,time,colors)=>{const centerX=canvas.width/2;const centerY=canvas.height/2;const width=Math.min(canvas.width,canvas.height)*0.6;const height=width*0.4;// Draw the double helix\nconst points=20;const leftStrand=[];const rightStrand=[];for(let i=0;i<points;i++){const t=i/points;const angle=t*Math.PI*4+time;// Left strand\nconst leftX=centerX+Math.cos(angle)*width/2;const leftY=centerY+t*height-height/2;leftStrand.push({x:leftX,y:leftY});// Right strand (opposite phase)\nconst rightX=centerX-Math.cos(angle)*width/2;const rightY=centerY+t*height-height/2;rightStrand.push({x:rightX,y:rightY});// Draw connections between strands (base pairs)\nif(i%2===0){ctx.beginPath();ctx.moveTo(leftX,leftY);ctx.lineTo(rightX,rightY);ctx.strokeStyle=`${colors[i%colors.length]}40`;ctx.lineWidth=1;ctx.stroke();// Draw nucleotides at each end\nctx.font='8px Arial';ctx.fillStyle=colors[i%colors.length];const baseA=i%4===0?'A':i%4===1?'T':i%4===2?'G':'C';const baseB=baseA==='A'?'T':baseA==='T'?'A':baseA==='G'?'C':'G';ctx.fillText(baseA,leftX-4,leftY+4);ctx.fillText(baseB,rightX-4,rightY+4);}}// Draw the strands\nctx.beginPath();ctx.moveTo(leftStrand[0].x,leftStrand[0].y);for(let i=1;i<leftStrand.length;i++){ctx.lineTo(leftStrand[i].x,leftStrand[i].y);}ctx.strokeStyle=`${colors[0]}80`;ctx.lineWidth=2;ctx.stroke();ctx.beginPath();ctx.moveTo(rightStrand[0].x,rightStrand[0].y);for(let i=1;i<rightStrand.length;i++){ctx.lineTo(rightStrand[i].x,rightStrand[i].y);}ctx.strokeStyle=`${colors[1]}80`;ctx.lineWidth=2;ctx.stroke();};// Special effect: Cell Division\nconst drawCellDivision=(ctx,canvas,time,colors)=>{const centerX=canvas.width/2;const centerY=canvas.height/2;const radius=Math.min(canvas.width,canvas.height)*0.15;// Draw main cell\nctx.beginPath();ctx.arc(centerX,centerY,radius,0,Math.PI*2);ctx.fillStyle=`${colors[0]}20`;ctx.fill();ctx.strokeStyle=`${colors[0]}60`;ctx.lineWidth=1;ctx.stroke();// Draw dividing cell effect\nconst divisionPhase=(Math.sin(time)+1)/2;// 0 to 1\nif(divisionPhase>0.3){// Draw constriction in the middle\nconst constrictionWidth=radius*(1-(divisionPhase-0.3)/0.7*0.8);ctx.beginPath();ctx.ellipse(centerX,centerY,constrictionWidth,radius,0,0,Math.PI*2);ctx.strokeStyle=`${colors[1]}70`;ctx.lineWidth=2;ctx.stroke();// Draw chromosomes\nif(divisionPhase<0.6){const chromosomeCount=5;for(let i=0;i<chromosomeCount;i++){const angle=i/chromosomeCount*Math.PI*2;const distance=radius*0.5;const x=centerX+Math.cos(angle)*distance;const y=centerY+Math.sin(angle)*distance;ctx.beginPath();ctx.moveTo(x-5,y-5);ctx.lineTo(x+5,y+5);ctx.moveTo(x-5,y+5);ctx.lineTo(x+5,y-5);ctx.strokeStyle=`${colors[2]}90`;ctx.lineWidth=2;ctx.stroke();}}else{// Draw two sets of chromosomes\nconst chromosomeCount=5;for(let i=0;i<chromosomeCount;i++){const angle=i/chromosomeCount*Math.PI*2;const distance=radius*0.3;// Left cell chromosomes\nconst x1=centerX-radius*0.5+Math.cos(angle)*distance;const y1=centerY+Math.sin(angle)*distance;ctx.beginPath();ctx.moveTo(x1-3,y1-3);ctx.lineTo(x1+3,y1+3);ctx.moveTo(x1-3,y1+3);ctx.lineTo(x1+3,y1-3);ctx.strokeStyle=`${colors[2]}90`;ctx.lineWidth=1;ctx.stroke();// Right cell chromosomes\nconst x2=centerX+radius*0.5+Math.cos(angle)*distance;const y2=centerY+Math.sin(angle)*distance;ctx.beginPath();ctx.moveTo(x2-3,y2-3);ctx.lineTo(x2+3,y2+3);ctx.moveTo(x2-3,y2+3);ctx.lineTo(x2+3,y2-3);ctx.strokeStyle=`${colors[2]}90`;ctx.lineWidth=1;ctx.stroke();}}}else{// Draw nucleus\nctx.beginPath();ctx.arc(centerX,centerY,radius*0.5,0,Math.PI*2);ctx.strokeStyle=`${colors[1]}40`;ctx.fillStyle=`${colors[1]}20`;ctx.fill();ctx.lineWidth=1;ctx.stroke();}};// Special effect: Pulse/Heartbeat\nconst drawPulseEffect=(ctx,canvas,time,colors)=>{const centerX=canvas.width/2;const centerY=canvas.height/2;// Draw ECG line\nconst lineWidth=Math.min(canvas.width,canvas.height)*0.6;const lineHeight=Math.min(canvas.width,canvas.height)*0.1;const startX=centerX-lineWidth/2;const endX=centerX+lineWidth/2;// Draw the baseline\nctx.beginPath();ctx.moveTo(startX,centerY);ctx.lineTo(endX,centerY);ctx.strokeStyle=`${colors[0]}30`;ctx.lineWidth=1;ctx.stroke();// Draw animated heartbeat\nconst heartbeatSpeed=2;const t=time*heartbeatSpeed%1;if(t<0.7){// Draw ECG pattern\nconst progress=t/0.7;// 0 to 1 during active phase\nctx.beginPath();ctx.moveTo(startX,centerY);// First segment - flat line\nconst segment1End=startX+lineWidth*0.3;ctx.lineTo(Math.min(segment1End,startX+progress*lineWidth),centerY);if(progress>0.3){// P wave\nconst pWaveStart=startX+lineWidth*0.3;const pWaveEnd=startX+lineWidth*0.4;ctx.quadraticCurveTo(pWaveStart+(pWaveEnd-pWaveStart)/2,centerY-lineHeight*0.2,Math.min(pWaveEnd,startX+progress*lineWidth),centerY);}if(progress>0.4){// Flat before QRS\nconst preQRSEnd=startX+lineWidth*0.5;ctx.lineTo(Math.min(preQRSEnd,startX+progress*lineWidth),centerY);}if(progress>0.5){// QRS complex\nconst qPeak=startX+lineWidth*0.52;const rPeak=startX+lineWidth*0.55;const sPeak=startX+lineWidth*0.58;const qrsEnd=startX+lineWidth*0.6;// Q dip\nif(progress>0.52){ctx.lineTo(qPeak,centerY+lineHeight*0.2);}// R peak\nif(progress>0.55){ctx.lineTo(rPeak,centerY-lineHeight*0.8);}// S dip\nif(progress>0.58){ctx.lineTo(sPeak,centerY+lineHeight*0.4);}// End of QRS\nif(progress>0.6){ctx.lineTo(Math.min(qrsEnd,startX+progress*lineWidth),centerY);}}if(progress>0.6){// T wave\nconst tWaveStart=startX+lineWidth*0.65;const tWaveEnd=startX+lineWidth*0.75;if(progress>0.65){ctx.lineTo(tWaveStart,centerY);if(progress>0.75){ctx.quadraticCurveTo(tWaveStart+(tWaveEnd-tWaveStart)/2,centerY-lineHeight*0.3,Math.min(tWaveEnd,startX+progress*lineWidth),centerY);}}}if(progress>0.75){// Final flat line\nctx.lineTo(startX+progress*lineWidth,centerY);}ctx.strokeStyle=colors[0];ctx.lineWidth=2;ctx.stroke();// Animate a pulse ring at QRS peak\nif(progress>0.55&&progress<0.9){const pulseProgress=(progress-0.55)/0.35;// 0 to 1\nconst pulseRadius=pulseProgress*lineHeight*2;ctx.beginPath();ctx.arc(startX+lineWidth*0.55,centerY-lineHeight*0.8,pulseRadius,0,Math.PI*2);ctx.fillStyle=`${colors[0]}${Math.floor((1-pulseProgress)*40).toString(16).padStart(2,'0')}`;ctx.fill();}}};// Special effect: Blood Flow\nconst drawBloodFlow=(ctx,canvas,time,colors)=>{const centerX=canvas.width/2;const centerY=canvas.height/2;const radius=Math.min(canvas.width,canvas.height)*0.3;// Draw blood vessels\nconst vesselCount=8;for(let i=0;i<vesselCount;i++){const angle=i/vesselCount*Math.PI*2;const startX=centerX+Math.cos(angle)*radius*0.3;const startY=centerY+Math.sin(angle)*radius*0.3;const endX=centerX+Math.cos(angle)*radius;const endY=centerY+Math.sin(angle)*radius;// Draw vessel\nctx.beginPath();ctx.moveTo(startX,startY);ctx.lineTo(endX,endY);ctx.strokeStyle=`${colors[0]}30`;ctx.lineWidth=3;ctx.stroke();// Draw blood cells flowing\nconst cellCount=5;for(let j=0;j<cellCount;j++){const progress=(time*2+j/cellCount)%1;const x=startX+(endX-startX)*progress;const y=startY+(endY-startY)*progress;ctx.beginPath();ctx.arc(x,y,3,0,Math.PI*2);ctx.fillStyle=colors[1];ctx.fill();}}};// Special effect: Brain Activity\nconst drawBrainActivity=(ctx,canvas,time,colors)=>{const centerX=canvas.width/2;const centerY=canvas.height/2;const radius=Math.min(canvas.width,canvas.height)*0.25;// Draw brain outline\nctx.beginPath();ctx.arc(centerX,centerY,radius,0,Math.PI*2);ctx.strokeStyle=`${colors[0]}40`;ctx.lineWidth=2;ctx.stroke();// Draw neural activity\nconst pointCount=20;for(let i=0;i<pointCount;i++){const angle=i/pointCount*Math.PI*2;const distance=radius*(0.7+Math.sin(time*3+i)*0.1);const x=centerX+Math.cos(angle)*distance;const y=centerY+Math.sin(angle)*distance;// Draw activity point\nctx.beginPath();ctx.arc(x,y,2+Math.sin(time*5+i)*2,0,Math.PI*2);ctx.fillStyle=`${colors[1]}${Math.floor((Math.sin(time*3+i)+1)*40+20).toString(16).padStart(2,'0')}`;ctx.fill();// Draw connections\nfor(let j=i+1;j<pointCount;j++){if(Math.random()>0.7){const angle2=j/pointCount*Math.PI*2;const distance2=radius*(0.7+Math.sin(time*3+j)*0.1);const x2=centerX+Math.cos(angle2)*distance2;const y2=centerY+Math.sin(angle2)*distance2;ctx.beginPath();ctx.moveTo(x,y);ctx.lineTo(x2,y2);ctx.strokeStyle=`${colors[2]}20`;ctx.lineWidth=0.5;ctx.stroke();}}}};// Different animation variants\nconst variants={default:{particleCount:40,connectionDistance:150,speed:0.5,size:3,colors:{light:['#3b82f6','#60a5fa','#93c5fd','#1e40af'],dark:['#1e40af','#3b82f6','#60a5fa','#93c5fd']},symbols:['●','▲','■'],// Basic shapes\ndrawSpecial:drawNeuralNetwork},dna:{particleCount:60,connectionDistance:100,speed:0.3,size:2,colors:{light:['#8b5cf6','#a78bfa','#c4b5fd','#7c3aed'],dark:['#7c3aed','#8b5cf6','#a78bfa','#c4b5fd']},symbols:['A','T','G','C'],// DNA nucleotides\ndrawSpecial:drawDNAHelix},cells:{particleCount:30,connectionDistance:200,speed:0.7,size:4,colors:{light:['#10b981','#34d399','#6ee7b7','#059669'],dark:['#059669','#10b981','#34d399','#6ee7b7']},symbols:['⬤','⚕','+','◉'],// Cell & medical symbols\ndrawSpecial:drawCellDivision},network:{particleCount:80,connectionDistance:120,speed:0.4,size:2,colors:{light:['#ef4444','#f87171','#fca5a5','#dc2626'],dark:['#dc2626','#ef4444','#f87171','#fca5a5']},symbols:['❤','🫁','🧠'],// Organ symbols\ndrawSpecial:drawPulseEffect},blood:{particleCount:50,connectionDistance:180,speed:0.6,size:3,colors:{light:['#dc2626','#ef4444','#f87171','#b91c1c'],dark:['#b91c1c','#dc2626','#ef4444','#f87171']},symbols:['🩸','💉','❤️'],drawSpecial:drawBloodFlow},brain:{particleCount:70,connectionDistance:140,speed:0.5,size:2,colors:{light:['#7c3aed','#8b5cf6','#a78bfa','#6d28d9'],dark:['#6d28d9','#7c3aed','#8b5cf6','#a78bfa']},symbols:['🧠','⚡','💭'],drawSpecial:drawBrainActivity}};// Add transition effect\nconst drawTransition=(ctx,canvas,progress,fromColors,toColors)=>{const centerX=canvas.width/2;const centerY=canvas.height/2;const radius=Math.min(canvas.width,canvas.height)*0.4;// Draw transition circle\nctx.beginPath();ctx.arc(centerX,centerY,radius*progress,0,Math.PI*2);ctx.strokeStyle=`${toColors[0]}${Math.floor(progress*40).toString(16).padStart(2,'0')}`;ctx.lineWidth=2;ctx.stroke();// Draw particles\nconst particleCount=20;for(let i=0;i<particleCount;i++){const angle=i/particleCount*Math.PI*2;const distance=radius*progress;const x=centerX+Math.cos(angle)*distance;const y=centerY+Math.sin(angle)*distance;ctx.beginPath();ctx.arc(x,y,2,0,Math.PI*2);ctx.fillStyle=`${toColors[1]}${Math.floor(progress*60).toString(16).padStart(2,'0')}`;ctx.fill();}};useEffect(()=>{const canvas=canvasRef.current;const ctx=canvas.getContext('2d');let animationFrameId;let particles=[];let time=0;let variantIndex=0;let lastVariantChange=Date.now();let transitionStartTime=0;// Set canvas dimensions\nconst handleResize=()=>{canvas.width=window.innerWidth;canvas.height=window.innerHeight;};window.addEventListener('resize',handleResize);handleResize();// Initialize particles\nconst initializeParticles=variantConfig=>{const colors=darkMode?variantConfig.colors.dark:variantConfig.colors.light;particles=[];for(let i=0;i<variantConfig.particleCount;i++){particles.push({x:Math.random()*canvas.width,y:Math.random()*canvas.height,vx:(Math.random()-0.5)*variantConfig.speed,vy:(Math.random()-0.5)*variantConfig.speed,radius:Math.random()*variantConfig.size+1,color:colors[Math.floor(Math.random()*colors.length)],symbol:variantConfig.symbols[Math.floor(Math.random()*variantConfig.symbols.length)],rotation:Math.random()*Math.PI*2,rotationSpeed:(Math.random()-0.5)*0.02,pulsePhase:Math.random()*Math.PI*2,scale:1+Math.random()*0.5});}};// Animation function\nconst animate=()=>{const currentTime=Date.now();time+=0.01;// Check if it's time to change variants\nif(currentTime-lastVariantChange>=VARIANT_DURATION&&!isTransitioning){setIsTransitioning(true);transitionStartTime=currentTime;variantIndex=(variantIndex+1)%allVariants.length;setCurrentVariant(allVariants[variantIndex]);}// Handle transition\nif(isTransitioning){const transitionTime=currentTime-transitionStartTime;const progress=Math.min(transitionTime/TRANSITION_DURATION,1);setTransitionProgress(progress);if(progress>=1){setIsTransitioning(false);lastVariantChange=currentTime;initializeParticles(variants[allVariants[variantIndex]]);}}ctx.clearRect(0,0,canvas.width,canvas.height);// Get current and next variant configs\nconst currentConfig=variants[allVariants[variantIndex]];const nextConfig=variants[allVariants[(variantIndex+1)%allVariants.length]];const currentColors=darkMode?currentConfig.colors.dark:currentConfig.colors.light;const nextColors=darkMode?nextConfig.colors.dark:nextConfig.colors.light;// Draw current visualization\nif(currentConfig.drawSpecial){currentConfig.drawSpecial(ctx,canvas,time,currentColors,darkMode);}// Draw transition effect if transitioning\nif(isTransitioning){drawTransition(ctx,canvas,transitionProgress,currentColors,nextColors);}// Draw and update particles\nparticles.forEach(particle=>{// Move particle\nparticle.x+=particle.vx;particle.y+=particle.vy;particle.rotation+=particle.rotationSpeed;// Boundary check\nif(particle.x<0||particle.x>canvas.width)particle.vx*=-1;if(particle.y<0||particle.y>canvas.height)particle.vy*=-1;// Draw particle - either as circle or symbol\nif(Math.random()>0.7){// Draw as circle\nctx.beginPath();ctx.arc(particle.x,particle.y,particle.radius,0,Math.PI*2);ctx.fillStyle=particle.color;ctx.fill();}else{// Draw as symbol\nctx.save();ctx.translate(particle.x,particle.y);ctx.rotate(particle.rotation);ctx.font=`${particle.radius*4*particle.scale}px Arial`;ctx.fillStyle=particle.color;ctx.fillText(particle.symbol,0,0);ctx.restore();}// Connect particles within range\nif(currentVariant==='dna'){drawDNAEffect(particle,particles,ctx,currentConfig,time);}else{drawConnections(particle,particles,ctx,currentConfig);}});animationFrameId=requestAnimationFrame(animate);};// Draw connections between nearby particles\nconst drawConnections=(particle,particles,ctx,config)=>{particles.forEach(other=>{if(particle===other)return;const dx=particle.x-other.x;const dy=particle.y-other.y;const distance=Math.sqrt(dx*dx+dy*dy);if(distance<config.connectionDistance){ctx.beginPath();ctx.moveTo(particle.x,particle.y);ctx.lineTo(other.x,other.y);ctx.strokeStyle=`${particle.color}${Math.floor((1-distance/config.connectionDistance)*255).toString(16).padStart(2,'0')}`;ctx.lineWidth=0.5;ctx.stroke();}});};// Special DNA-like effect\nconst drawDNAEffect=(particle,particles,ctx,config,time)=>{const wavelength=200;const amplitude=50;particles.forEach(other=>{if(particle===other)return;const dx=particle.x-other.x;const dy=particle.y-other.y;const distance=Math.sqrt(dx*dx+dy*dy);if(distance<config.connectionDistance){const wave1=Math.sin((particle.x+time*100)/wavelength)*amplitude;const wave2=Math.sin((other.x+time*100)/wavelength)*amplitude;ctx.beginPath();ctx.moveTo(particle.x,particle.y+wave1);ctx.lineTo(other.x,other.y+wave2);ctx.strokeStyle=`${particle.color}${Math.floor((1-distance/config.connectionDistance)*255).toString(16).padStart(2,'0')}`;ctx.lineWidth=0.5;ctx.stroke();}});};// Initialize first variant\ninitializeParticles(variants[allVariants[0]]);animate();return()=>{window.removeEventListener('resize',handleResize);cancelAnimationFrame(animationFrameId);};},[darkMode]);return/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,className:\"fixed top-0 left-0 w-full h-full -z-10 pointer-events-none\",style:{opacity:0.15}});};export default MedicalBackground;","map":{"version":3,"names":["React","useEffect","useRef","useState","useTheme","jsx","_jsx","MedicalBackground","canvasRef","darkMode","currentVariant","setCurrentVariant","transitionProgress","setTransitionProgress","isTransitioning","setIsTransitioning","allVariants","TRANSITION_DURATION","VARIANT_DURATION","drawNeuralNetwork","ctx","canvas","time","colors","centerX","width","centerY","height","radius","Math","min","beginPath","arc","PI","strokeStyle","lineWidth","stroke","neuronCount","neurons","i","angle","x","cos","y","sin","push","fillStyle","length","fill","j","moveTo","lineTo","pulsePos","gradient","createLinearGradient","addColorStop","max","drawDNAHelix","points","leftStrand","rightStrand","t","leftX","leftY","rightX","rightY","font","baseA","baseB","fillText","drawCellDivision","divisionPhase","constrictionWidth","ellipse","chromosomeCount","distance","x1","y1","x2","y2","drawPulseEffect","lineHeight","startX","endX","heartbeatSpeed","progress","segment1End","pWaveStart","pWaveEnd","quadraticCurveTo","preQRSEnd","qPeak","rPeak","sPeak","qrsEnd","tWaveStart","tWaveEnd","pulseProgress","pulseRadius","floor","toString","padStart","drawBloodFlow","vesselCount","startY","endY","cellCount","drawBrainActivity","pointCount","random","angle2","distance2","variants","default","particleCount","connectionDistance","speed","size","light","dark","symbols","drawSpecial","dna","cells","network","blood","brain","drawTransition","fromColors","toColors","current","getContext","animationFrameId","particles","variantIndex","lastVariantChange","Date","now","transitionStartTime","handleResize","window","innerWidth","innerHeight","addEventListener","initializeParticles","variantConfig","vx","vy","color","symbol","rotation","rotationSpeed","pulsePhase","scale","animate","currentTime","transitionTime","clearRect","currentConfig","nextConfig","currentColors","nextColors","forEach","particle","save","translate","rotate","restore","drawDNAEffect","drawConnections","requestAnimationFrame","config","other","dx","dy","sqrt","wavelength","amplitude","wave1","wave2","removeEventListener","cancelAnimationFrame","ref","className","style","opacity"],"sources":["C:/Users/kouss/Desktop/Cursor/Segmentation/pipeline/webapp/static/src/components/MedicalBackground.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\n\r\n// Medical Background Component that adds animated visualizations\r\nconst MedicalBackground = () => {\r\n  const canvasRef = useRef(null);\r\n  const { darkMode } = useTheme();\r\n  const [currentVariant, setCurrentVariant] = useState('default');\r\n  const [transitionProgress, setTransitionProgress] = useState(0);\r\n  const [isTransitioning, setIsTransitioning] = useState(false);\r\n\r\n  // List of all available variants\r\n  const allVariants = ['default', 'dna', 'cells', 'network', 'blood', 'brain'];\r\n  const TRANSITION_DURATION = 2000; // 2 seconds for transition\r\n  const VARIANT_DURATION = 8000; // 8 seconds per variant\r\n\r\n  // Special effect: Neural Network\r\n  const drawNeuralNetwork = (ctx, canvas, time, colors) => {\r\n    const centerX = canvas.width / 2;\r\n    const centerY = canvas.height / 2;\r\n    const radius = Math.min(canvas.width, canvas.height) * 0.3;\r\n    \r\n    // Draw faint circular path\r\n    ctx.beginPath();\r\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\r\n    ctx.strokeStyle = `${colors[0]}20`;\r\n    ctx.lineWidth = 1;\r\n    ctx.stroke();\r\n    \r\n    // Draw neurons along the path\r\n    const neuronCount = 10;\r\n    const neurons = [];\r\n    \r\n    for (let i = 0; i < neuronCount; i++) {\r\n      const angle = (i / neuronCount) * Math.PI * 2 + time;\r\n      const x = centerX + Math.cos(angle) * radius;\r\n      const y = centerY + Math.sin(angle) * radius;\r\n      neurons.push({x, y});\r\n      \r\n      // Draw neuron\r\n      ctx.beginPath();\r\n      ctx.arc(x, y, 3, 0, Math.PI * 2);\r\n      ctx.fillStyle = colors[i % colors.length];\r\n      ctx.fill();\r\n    }\r\n    \r\n    // Draw connections between neurons\r\n    for (let i = 0; i < neurons.length; i++) {\r\n      for (let j = i + 1; j < neurons.length; j++) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(neurons[i].x, neurons[i].y);\r\n        ctx.lineTo(neurons[j].x, neurons[j].y);\r\n        \r\n        // Pulse effect along connections\r\n        const pulsePos = (time * 2) % 1;\r\n        \r\n        const gradient = ctx.createLinearGradient(\r\n          neurons[i].x, neurons[i].y, \r\n          neurons[j].x, neurons[j].y\r\n        );\r\n        \r\n        gradient.addColorStop(Math.max(0, pulsePos - 0.1), `${colors[0]}10`);\r\n        gradient.addColorStop(pulsePos, `${colors[0]}80`);\r\n        gradient.addColorStop(Math.min(1, pulsePos + 0.1), `${colors[0]}10`);\r\n        \r\n        ctx.strokeStyle = gradient;\r\n        ctx.lineWidth = 0.5;\r\n        ctx.stroke();\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Special effect: DNA Helix\r\n  const drawDNAHelix = (ctx, canvas, time, colors) => {\r\n    const centerX = canvas.width / 2;\r\n    const centerY = canvas.height / 2;\r\n    \r\n    const width = Math.min(canvas.width, canvas.height) * 0.6;\r\n    const height = width * 0.4;\r\n    \r\n    // Draw the double helix\r\n    const points = 20;\r\n    const leftStrand = [];\r\n    const rightStrand = [];\r\n    \r\n    for (let i = 0; i < points; i++) {\r\n      const t = i / points;\r\n      const angle = t * Math.PI * 4 + time;\r\n      \r\n      // Left strand\r\n      const leftX = centerX + Math.cos(angle) * width / 2;\r\n      const leftY = centerY + t * height - height / 2;\r\n      leftStrand.push({x: leftX, y: leftY});\r\n      \r\n      // Right strand (opposite phase)\r\n      const rightX = centerX - Math.cos(angle) * width / 2;\r\n      const rightY = centerY + t * height - height / 2;\r\n      rightStrand.push({x: rightX, y: rightY});\r\n      \r\n      // Draw connections between strands (base pairs)\r\n      if (i % 2 === 0) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(leftX, leftY);\r\n        ctx.lineTo(rightX, rightY);\r\n        ctx.strokeStyle = `${colors[i % colors.length]}40`;\r\n        ctx.lineWidth = 1;\r\n        ctx.stroke();\r\n        \r\n        // Draw nucleotides at each end\r\n        ctx.font = '8px Arial';\r\n        ctx.fillStyle = colors[i % colors.length];\r\n        \r\n        const baseA = i % 4 === 0 ? 'A' : i % 4 === 1 ? 'T' : i % 4 === 2 ? 'G' : 'C';\r\n        const baseB = baseA === 'A' ? 'T' : baseA === 'T' ? 'A' : baseA === 'G' ? 'C' : 'G';\r\n        \r\n        ctx.fillText(baseA, leftX - 4, leftY + 4);\r\n        ctx.fillText(baseB, rightX - 4, rightY + 4);\r\n      }\r\n    }\r\n    \r\n    // Draw the strands\r\n    ctx.beginPath();\r\n    ctx.moveTo(leftStrand[0].x, leftStrand[0].y);\r\n    for (let i = 1; i < leftStrand.length; i++) {\r\n      ctx.lineTo(leftStrand[i].x, leftStrand[i].y);\r\n    }\r\n    ctx.strokeStyle = `${colors[0]}80`;\r\n    ctx.lineWidth = 2;\r\n    ctx.stroke();\r\n    \r\n    ctx.beginPath();\r\n    ctx.moveTo(rightStrand[0].x, rightStrand[0].y);\r\n    for (let i = 1; i < rightStrand.length; i++) {\r\n      ctx.lineTo(rightStrand[i].x, rightStrand[i].y);\r\n    }\r\n    ctx.strokeStyle = `${colors[1]}80`;\r\n    ctx.lineWidth = 2;\r\n    ctx.stroke();\r\n  };\r\n  \r\n  // Special effect: Cell Division\r\n  const drawCellDivision = (ctx, canvas, time, colors) => {\r\n    const centerX = canvas.width / 2;\r\n    const centerY = canvas.height / 2;\r\n    const radius = Math.min(canvas.width, canvas.height) * 0.15;\r\n    \r\n    // Draw main cell\r\n    ctx.beginPath();\r\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\r\n    ctx.fillStyle = `${colors[0]}20`;\r\n    ctx.fill();\r\n    ctx.strokeStyle = `${colors[0]}60`;\r\n    ctx.lineWidth = 1;\r\n    ctx.stroke();\r\n    \r\n    // Draw dividing cell effect\r\n    const divisionPhase = (Math.sin(time) + 1) / 2; // 0 to 1\r\n    \r\n    if (divisionPhase > 0.3) {\r\n      // Draw constriction in the middle\r\n      const constrictionWidth = radius * (1 - (divisionPhase - 0.3) / 0.7 * 0.8);\r\n      \r\n      ctx.beginPath();\r\n      ctx.ellipse(\r\n        centerX, \r\n        centerY, \r\n        constrictionWidth, \r\n        radius, \r\n        0, \r\n        0, \r\n        Math.PI * 2\r\n      );\r\n      ctx.strokeStyle = `${colors[1]}70`;\r\n      ctx.lineWidth = 2;\r\n      ctx.stroke();\r\n      \r\n      // Draw chromosomes\r\n      if (divisionPhase < 0.6) {\r\n        const chromosomeCount = 5;\r\n        for (let i = 0; i < chromosomeCount; i++) {\r\n          const angle = (i / chromosomeCount) * Math.PI * 2;\r\n          const distance = radius * 0.5;\r\n          const x = centerX + Math.cos(angle) * distance;\r\n          const y = centerY + Math.sin(angle) * distance;\r\n          \r\n          ctx.beginPath();\r\n          ctx.moveTo(x - 5, y - 5);\r\n          ctx.lineTo(x + 5, y + 5);\r\n          ctx.moveTo(x - 5, y + 5);\r\n          ctx.lineTo(x + 5, y - 5);\r\n          ctx.strokeStyle = `${colors[2]}90`;\r\n          ctx.lineWidth = 2;\r\n          ctx.stroke();\r\n        }\r\n      } else {\r\n        // Draw two sets of chromosomes\r\n        const chromosomeCount = 5;\r\n        for (let i = 0; i < chromosomeCount; i++) {\r\n          const angle = (i / chromosomeCount) * Math.PI * 2;\r\n          const distance = radius * 0.3;\r\n          \r\n          // Left cell chromosomes\r\n          const x1 = centerX - radius * 0.5 + Math.cos(angle) * distance;\r\n          const y1 = centerY + Math.sin(angle) * distance;\r\n          \r\n          ctx.beginPath();\r\n          ctx.moveTo(x1 - 3, y1 - 3);\r\n          ctx.lineTo(x1 + 3, y1 + 3);\r\n          ctx.moveTo(x1 - 3, y1 + 3);\r\n          ctx.lineTo(x1 + 3, y1 - 3);\r\n          ctx.strokeStyle = `${colors[2]}90`;\r\n          ctx.lineWidth = 1;\r\n          ctx.stroke();\r\n          \r\n          // Right cell chromosomes\r\n          const x2 = centerX + radius * 0.5 + Math.cos(angle) * distance;\r\n          const y2 = centerY + Math.sin(angle) * distance;\r\n          \r\n          ctx.beginPath();\r\n          ctx.moveTo(x2 - 3, y2 - 3);\r\n          ctx.lineTo(x2 + 3, y2 + 3);\r\n          ctx.moveTo(x2 - 3, y2 + 3);\r\n          ctx.lineTo(x2 + 3, y2 - 3);\r\n          ctx.strokeStyle = `${colors[2]}90`;\r\n          ctx.lineWidth = 1;\r\n          ctx.stroke();\r\n        }\r\n      }\r\n    } else {\r\n      // Draw nucleus\r\n      ctx.beginPath();\r\n      ctx.arc(centerX, centerY, radius * 0.5, 0, Math.PI * 2);\r\n      ctx.strokeStyle = `${colors[1]}40`;\r\n      ctx.fillStyle = `${colors[1]}20`;\r\n      ctx.fill();\r\n      ctx.lineWidth = 1;\r\n      ctx.stroke();\r\n    }\r\n  };\r\n  \r\n  // Special effect: Pulse/Heartbeat\r\n  const drawPulseEffect = (ctx, canvas, time, colors) => {\r\n    const centerX = canvas.width / 2;\r\n    const centerY = canvas.height / 2;\r\n    \r\n    // Draw ECG line\r\n    const lineWidth = Math.min(canvas.width, canvas.height) * 0.6;\r\n    const lineHeight = Math.min(canvas.width, canvas.height) * 0.1;\r\n    \r\n    const startX = centerX - lineWidth / 2;\r\n    const endX = centerX + lineWidth / 2;\r\n    \r\n    // Draw the baseline\r\n    ctx.beginPath();\r\n    ctx.moveTo(startX, centerY);\r\n    ctx.lineTo(endX, centerY);\r\n    ctx.strokeStyle = `${colors[0]}30`;\r\n    ctx.lineWidth = 1;\r\n    ctx.stroke();\r\n    \r\n    // Draw animated heartbeat\r\n    const heartbeatSpeed = 2;\r\n    const t = (time * heartbeatSpeed) % 1; \r\n    \r\n    if (t < 0.7) {\r\n      // Draw ECG pattern\r\n      const progress = t / 0.7; // 0 to 1 during active phase\r\n      \r\n      ctx.beginPath();\r\n      ctx.moveTo(startX, centerY);\r\n      \r\n      // First segment - flat line\r\n      const segment1End = startX + lineWidth * 0.3;\r\n      ctx.lineTo(Math.min(segment1End, startX + progress * lineWidth), centerY);\r\n      \r\n      if (progress > 0.3) {\r\n        // P wave\r\n        const pWaveStart = startX + lineWidth * 0.3;\r\n        const pWaveEnd = startX + lineWidth * 0.4;\r\n        \r\n        ctx.quadraticCurveTo(\r\n          pWaveStart + (pWaveEnd - pWaveStart) / 2, \r\n          centerY - lineHeight * 0.2,\r\n          Math.min(pWaveEnd, startX + progress * lineWidth), \r\n          centerY\r\n        );\r\n      }\r\n      \r\n      if (progress > 0.4) {\r\n        // Flat before QRS\r\n        const preQRSEnd = startX + lineWidth * 0.5;\r\n        ctx.lineTo(Math.min(preQRSEnd, startX + progress * lineWidth), centerY);\r\n      }\r\n      \r\n      if (progress > 0.5) {\r\n        // QRS complex\r\n        const qPeak = startX + lineWidth * 0.52;\r\n        const rPeak = startX + lineWidth * 0.55;\r\n        const sPeak = startX + lineWidth * 0.58;\r\n        const qrsEnd = startX + lineWidth * 0.6;\r\n        \r\n        // Q dip\r\n        if (progress > 0.52) {\r\n          ctx.lineTo(qPeak, centerY + lineHeight * 0.2);\r\n        }\r\n        \r\n        // R peak\r\n        if (progress > 0.55) {\r\n          ctx.lineTo(rPeak, centerY - lineHeight * 0.8);\r\n        }\r\n        \r\n        // S dip\r\n        if (progress > 0.58) {\r\n          ctx.lineTo(sPeak, centerY + lineHeight * 0.4);\r\n        }\r\n        \r\n        // End of QRS\r\n        if (progress > 0.6) {\r\n          ctx.lineTo(Math.min(qrsEnd, startX + progress * lineWidth), centerY);\r\n        }\r\n      }\r\n      \r\n      if (progress > 0.6) {\r\n        // T wave\r\n        const tWaveStart = startX + lineWidth * 0.65;\r\n        const tWaveEnd = startX + lineWidth * 0.75;\r\n        \r\n        if (progress > 0.65) {\r\n          ctx.lineTo(tWaveStart, centerY);\r\n          \r\n          if (progress > 0.75) {\r\n            ctx.quadraticCurveTo(\r\n              tWaveStart + (tWaveEnd - tWaveStart) / 2, \r\n              centerY - lineHeight * 0.3,\r\n              Math.min(tWaveEnd, startX + progress * lineWidth), \r\n              centerY\r\n            );\r\n          }\r\n        }\r\n      }\r\n      \r\n      if (progress > 0.75) {\r\n        // Final flat line\r\n        ctx.lineTo(startX + progress * lineWidth, centerY);\r\n      }\r\n      \r\n      ctx.strokeStyle = colors[0];\r\n      ctx.lineWidth = 2;\r\n      ctx.stroke();\r\n      \r\n      // Animate a pulse ring at QRS peak\r\n      if (progress > 0.55 && progress < 0.9) {\r\n        const pulseProgress = (progress - 0.55) / 0.35; // 0 to 1\r\n        const pulseRadius = pulseProgress * lineHeight * 2;\r\n        \r\n        ctx.beginPath();\r\n        ctx.arc(startX + lineWidth * 0.55, centerY - lineHeight * 0.8, pulseRadius, 0, Math.PI * 2);\r\n        ctx.fillStyle = `${colors[0]}${Math.floor((1 - pulseProgress) * 40).toString(16).padStart(2, '0')}`;\r\n        ctx.fill();\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Special effect: Blood Flow\r\n  const drawBloodFlow = (ctx, canvas, time, colors) => {\r\n    const centerX = canvas.width / 2;\r\n    const centerY = canvas.height / 2;\r\n    const radius = Math.min(canvas.width, canvas.height) * 0.3;\r\n    \r\n    // Draw blood vessels\r\n    const vesselCount = 8;\r\n    for (let i = 0; i < vesselCount; i++) {\r\n      const angle = (i / vesselCount) * Math.PI * 2;\r\n      const startX = centerX + Math.cos(angle) * radius * 0.3;\r\n      const startY = centerY + Math.sin(angle) * radius * 0.3;\r\n      const endX = centerX + Math.cos(angle) * radius;\r\n      const endY = centerY + Math.sin(angle) * radius;\r\n      \r\n      // Draw vessel\r\n      ctx.beginPath();\r\n      ctx.moveTo(startX, startY);\r\n      ctx.lineTo(endX, endY);\r\n      ctx.strokeStyle = `${colors[0]}30`;\r\n      ctx.lineWidth = 3;\r\n      ctx.stroke();\r\n      \r\n      // Draw blood cells flowing\r\n      const cellCount = 5;\r\n      for (let j = 0; j < cellCount; j++) {\r\n        const progress = ((time * 2 + j / cellCount) % 1);\r\n        const x = startX + (endX - startX) * progress;\r\n        const y = startY + (endY - startY) * progress;\r\n        \r\n        ctx.beginPath();\r\n        ctx.arc(x, y, 3, 0, Math.PI * 2);\r\n        ctx.fillStyle = colors[1];\r\n        ctx.fill();\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Special effect: Brain Activity\r\n  const drawBrainActivity = (ctx, canvas, time, colors) => {\r\n    const centerX = canvas.width / 2;\r\n    const centerY = canvas.height / 2;\r\n    const radius = Math.min(canvas.width, canvas.height) * 0.25;\r\n    \r\n    // Draw brain outline\r\n    ctx.beginPath();\r\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\r\n    ctx.strokeStyle = `${colors[0]}40`;\r\n    ctx.lineWidth = 2;\r\n    ctx.stroke();\r\n    \r\n    // Draw neural activity\r\n    const pointCount = 20;\r\n    for (let i = 0; i < pointCount; i++) {\r\n      const angle = (i / pointCount) * Math.PI * 2;\r\n      const distance = radius * (0.7 + Math.sin(time * 3 + i) * 0.1);\r\n      const x = centerX + Math.cos(angle) * distance;\r\n      const y = centerY + Math.sin(angle) * distance;\r\n      \r\n      // Draw activity point\r\n      ctx.beginPath();\r\n      ctx.arc(x, y, 2 + Math.sin(time * 5 + i) * 2, 0, Math.PI * 2);\r\n      ctx.fillStyle = `${colors[1]}${Math.floor((Math.sin(time * 3 + i) + 1) * 40 + 20).toString(16).padStart(2, '0')}`;\r\n      ctx.fill();\r\n      \r\n      // Draw connections\r\n      for (let j = i + 1; j < pointCount; j++) {\r\n        if (Math.random() > 0.7) {\r\n          const angle2 = (j / pointCount) * Math.PI * 2;\r\n          const distance2 = radius * (0.7 + Math.sin(time * 3 + j) * 0.1);\r\n          const x2 = centerX + Math.cos(angle2) * distance2;\r\n          const y2 = centerY + Math.sin(angle2) * distance2;\r\n          \r\n          ctx.beginPath();\r\n          ctx.moveTo(x, y);\r\n          ctx.lineTo(x2, y2);\r\n          ctx.strokeStyle = `${colors[2]}20`;\r\n          ctx.lineWidth = 0.5;\r\n          ctx.stroke();\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Different animation variants\r\n  const variants = {\r\n    default: {\r\n      particleCount: 40,\r\n      connectionDistance: 150,\r\n      speed: 0.5,\r\n      size: 3,\r\n      colors: {\r\n        light: ['#3b82f6', '#60a5fa', '#93c5fd', '#1e40af'],\r\n        dark: ['#1e40af', '#3b82f6', '#60a5fa', '#93c5fd'],\r\n      },\r\n      symbols: ['●', '▲', '■'], // Basic shapes\r\n      drawSpecial: drawNeuralNetwork\r\n    },\r\n    dna: {\r\n      particleCount: 60,\r\n      connectionDistance: 100,\r\n      speed: 0.3,\r\n      size: 2,\r\n      colors: {\r\n        light: ['#8b5cf6', '#a78bfa', '#c4b5fd', '#7c3aed'],\r\n        dark: ['#7c3aed', '#8b5cf6', '#a78bfa', '#c4b5fd'],\r\n      },\r\n      symbols: ['A', 'T', 'G', 'C'], // DNA nucleotides\r\n      drawSpecial: drawDNAHelix\r\n    },\r\n    cells: {\r\n      particleCount: 30,\r\n      connectionDistance: 200,\r\n      speed: 0.7,\r\n      size: 4,\r\n      colors: {\r\n        light: ['#10b981', '#34d399', '#6ee7b7', '#059669'],\r\n        dark: ['#059669', '#10b981', '#34d399', '#6ee7b7'],\r\n      },\r\n      symbols: ['⬤', '⚕', '+', '◉'],  // Cell & medical symbols\r\n      drawSpecial: drawCellDivision\r\n    },\r\n    network: {\r\n      particleCount: 80,\r\n      connectionDistance: 120,\r\n      speed: 0.4,\r\n      size: 2,\r\n      colors: {\r\n        light: ['#ef4444', '#f87171', '#fca5a5', '#dc2626'],\r\n        dark: ['#dc2626', '#ef4444', '#f87171', '#fca5a5'],\r\n      },\r\n      symbols: ['❤', '🫁', '🧠'], // Organ symbols\r\n      drawSpecial: drawPulseEffect\r\n    },\r\n    blood: {\r\n      particleCount: 50,\r\n      connectionDistance: 180,\r\n      speed: 0.6,\r\n      size: 3,\r\n      colors: {\r\n        light: ['#dc2626', '#ef4444', '#f87171', '#b91c1c'],\r\n        dark: ['#b91c1c', '#dc2626', '#ef4444', '#f87171'],\r\n      },\r\n      symbols: ['🩸', '💉', '❤️'],\r\n      drawSpecial: drawBloodFlow\r\n    },\r\n    brain: {\r\n      particleCount: 70,\r\n      connectionDistance: 140,\r\n      speed: 0.5,\r\n      size: 2,\r\n      colors: {\r\n        light: ['#7c3aed', '#8b5cf6', '#a78bfa', '#6d28d9'],\r\n        dark: ['#6d28d9', '#7c3aed', '#8b5cf6', '#a78bfa'],\r\n      },\r\n      symbols: ['🧠', '⚡', '💭'],\r\n      drawSpecial: drawBrainActivity\r\n    }\r\n  };\r\n\r\n  // Add transition effect\r\n  const drawTransition = (ctx, canvas, progress, fromColors, toColors) => {\r\n    const centerX = canvas.width / 2;\r\n    const centerY = canvas.height / 2;\r\n    const radius = Math.min(canvas.width, canvas.height) * 0.4;\r\n    \r\n    // Draw transition circle\r\n    ctx.beginPath();\r\n    ctx.arc(centerX, centerY, radius * progress, 0, Math.PI * 2);\r\n    ctx.strokeStyle = `${toColors[0]}${Math.floor(progress * 40).toString(16).padStart(2, '0')}`;\r\n    ctx.lineWidth = 2;\r\n    ctx.stroke();\r\n    \r\n    // Draw particles\r\n    const particleCount = 20;\r\n    for (let i = 0; i < particleCount; i++) {\r\n      const angle = (i / particleCount) * Math.PI * 2;\r\n      const distance = radius * progress;\r\n      const x = centerX + Math.cos(angle) * distance;\r\n      const y = centerY + Math.sin(angle) * distance;\r\n      \r\n      ctx.beginPath();\r\n      ctx.arc(x, y, 2, 0, Math.PI * 2);\r\n      ctx.fillStyle = `${toColors[1]}${Math.floor(progress * 60).toString(16).padStart(2, '0')}`;\r\n      ctx.fill();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    let animationFrameId;\r\n    let particles = [];\r\n    let time = 0;\r\n    let variantIndex = 0;\r\n    let lastVariantChange = Date.now();\r\n    let transitionStartTime = 0;\r\n    \r\n    // Set canvas dimensions\r\n    const handleResize = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    handleResize();\r\n    \r\n    // Initialize particles\r\n    const initializeParticles = (variantConfig) => {\r\n      const colors = darkMode ? variantConfig.colors.dark : variantConfig.colors.light;\r\n      particles = [];\r\n      \r\n      for (let i = 0; i < variantConfig.particleCount; i++) {\r\n        particles.push({\r\n          x: Math.random() * canvas.width,\r\n          y: Math.random() * canvas.height,\r\n          vx: (Math.random() - 0.5) * variantConfig.speed,\r\n          vy: (Math.random() - 0.5) * variantConfig.speed,\r\n          radius: Math.random() * variantConfig.size + 1,\r\n          color: colors[Math.floor(Math.random() * colors.length)],\r\n          symbol: variantConfig.symbols[Math.floor(Math.random() * variantConfig.symbols.length)],\r\n          rotation: Math.random() * Math.PI * 2,\r\n          rotationSpeed: (Math.random() - 0.5) * 0.02,\r\n          pulsePhase: Math.random() * Math.PI * 2,\r\n          scale: 1 + Math.random() * 0.5\r\n        });\r\n      }\r\n    };\r\n    \r\n    // Animation function\r\n    const animate = () => {\r\n      const currentTime = Date.now();\r\n      time += 0.01;\r\n      \r\n      // Check if it's time to change variants\r\n      if (currentTime - lastVariantChange >= VARIANT_DURATION && !isTransitioning) {\r\n        setIsTransitioning(true);\r\n        transitionStartTime = currentTime;\r\n        variantIndex = (variantIndex + 1) % allVariants.length;\r\n        setCurrentVariant(allVariants[variantIndex]);\r\n      }\r\n      \r\n      // Handle transition\r\n      if (isTransitioning) {\r\n        const transitionTime = currentTime - transitionStartTime;\r\n        const progress = Math.min(transitionTime / TRANSITION_DURATION, 1);\r\n        setTransitionProgress(progress);\r\n        \r\n        if (progress >= 1) {\r\n          setIsTransitioning(false);\r\n          lastVariantChange = currentTime;\r\n          initializeParticles(variants[allVariants[variantIndex]]);\r\n        }\r\n      }\r\n      \r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      // Get current and next variant configs\r\n      const currentConfig = variants[allVariants[variantIndex]];\r\n      const nextConfig = variants[allVariants[(variantIndex + 1) % allVariants.length]];\r\n      const currentColors = darkMode ? currentConfig.colors.dark : currentConfig.colors.light;\r\n      const nextColors = darkMode ? nextConfig.colors.dark : nextConfig.colors.light;\r\n      \r\n      // Draw current visualization\r\n      if (currentConfig.drawSpecial) {\r\n        currentConfig.drawSpecial(ctx, canvas, time, currentColors, darkMode);\r\n      }\r\n      \r\n      // Draw transition effect if transitioning\r\n      if (isTransitioning) {\r\n        drawTransition(ctx, canvas, transitionProgress, currentColors, nextColors);\r\n      }\r\n      \r\n      // Draw and update particles\r\n      particles.forEach(particle => {\r\n        // Move particle\r\n        particle.x += particle.vx;\r\n        particle.y += particle.vy;\r\n        particle.rotation += particle.rotationSpeed;\r\n        \r\n        // Boundary check\r\n        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;\r\n        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;\r\n        \r\n        // Draw particle - either as circle or symbol\r\n        if (Math.random() > 0.7) {\r\n          // Draw as circle\r\n          ctx.beginPath();\r\n          ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n          ctx.fillStyle = particle.color;\r\n          ctx.fill();\r\n        } else {\r\n          // Draw as symbol\r\n          ctx.save();\r\n          ctx.translate(particle.x, particle.y);\r\n          ctx.rotate(particle.rotation);\r\n          ctx.font = `${particle.radius * 4 * particle.scale}px Arial`;\r\n          ctx.fillStyle = particle.color;\r\n          ctx.fillText(particle.symbol, 0, 0);\r\n          ctx.restore();\r\n        }\r\n        \r\n        // Connect particles within range\r\n        if (currentVariant === 'dna') {\r\n          drawDNAEffect(particle, particles, ctx, currentConfig, time);\r\n        } else {\r\n          drawConnections(particle, particles, ctx, currentConfig);\r\n        }\r\n      });\r\n      \r\n      animationFrameId = requestAnimationFrame(animate);\r\n    };\r\n    \r\n    // Draw connections between nearby particles\r\n    const drawConnections = (particle, particles, ctx, config) => {\r\n      particles.forEach(other => {\r\n        if (particle === other) return;\r\n        \r\n        const dx = particle.x - other.x;\r\n        const dy = particle.y - other.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        \r\n        if (distance < config.connectionDistance) {\r\n          ctx.beginPath();\r\n          ctx.moveTo(particle.x, particle.y);\r\n          ctx.lineTo(other.x, other.y);\r\n          ctx.strokeStyle = `${particle.color}${Math.floor((1 - distance / config.connectionDistance) * 255).toString(16).padStart(2, '0')}`;\r\n          ctx.lineWidth = 0.5;\r\n          ctx.stroke();\r\n        }\r\n      });\r\n    };\r\n    \r\n    // Special DNA-like effect\r\n    const drawDNAEffect = (particle, particles, ctx, config, time) => {\r\n      const wavelength = 200;\r\n      const amplitude = 50;\r\n      \r\n      particles.forEach(other => {\r\n        if (particle === other) return;\r\n        \r\n        const dx = particle.x - other.x;\r\n        const dy = particle.y - other.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        \r\n        if (distance < config.connectionDistance) {\r\n          const wave1 = Math.sin((particle.x + time * 100) / wavelength) * amplitude;\r\n          const wave2 = Math.sin((other.x + time * 100) / wavelength) * amplitude;\r\n          \r\n          ctx.beginPath();\r\n          ctx.moveTo(particle.x, particle.y + wave1);\r\n          ctx.lineTo(other.x, other.y + wave2);\r\n          ctx.strokeStyle = `${particle.color}${Math.floor((1 - distance / config.connectionDistance) * 255).toString(16).padStart(2, '0')}`;\r\n          ctx.lineWidth = 0.5;\r\n          ctx.stroke();\r\n        }\r\n      });\r\n    };\r\n    \r\n    // Initialize first variant\r\n    initializeParticles(variants[allVariants[0]]);\r\n    animate();\r\n    \r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [darkMode]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      className=\"fixed top-0 left-0 w-full h-full -z-10 pointer-events-none\"\r\n      style={{ opacity: 0.15 }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MedicalBackground; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}