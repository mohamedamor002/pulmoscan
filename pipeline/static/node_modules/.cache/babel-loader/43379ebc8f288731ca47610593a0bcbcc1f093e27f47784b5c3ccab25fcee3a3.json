{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kouss\\\\Desktop\\\\Cursor\\\\Segmentation\\\\pipeline\\\\webapp\\\\static\\\\src\\\\components\\\\MedicalBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { useTheme } from '../contexts/ThemeContext';\n\n// Medical Background Component that adds animated visualizations\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MedicalBackground = ({\n  variant = 'default'\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const {\n    darkMode\n  } = useTheme();\n\n  // Different animation variants\n  const variants = {\n    default: {\n      particleCount: 40,\n      connectionDistance: 150,\n      speed: 0.5,\n      size: 3,\n      colors: {\n        light: ['#3b82f6', '#60a5fa', '#93c5fd', '#1e40af'],\n        dark: ['#1e40af', '#3b82f6', '#60a5fa', '#93c5fd']\n      },\n      symbols: ['●', '▲', '■'],\n      // Basic shapes\n      drawSpecial: drawNeuralNetwork\n    },\n    dna: {\n      particleCount: 60,\n      connectionDistance: 100,\n      speed: 0.3,\n      size: 2,\n      colors: {\n        light: ['#8b5cf6', '#a78bfa', '#c4b5fd', '#7c3aed'],\n        dark: ['#7c3aed', '#8b5cf6', '#a78bfa', '#c4b5fd']\n      },\n      symbols: ['A', 'T', 'G', 'C'],\n      // DNA nucleotides\n      drawSpecial: drawDNAHelix\n    },\n    cells: {\n      particleCount: 30,\n      connectionDistance: 200,\n      speed: 0.7,\n      size: 4,\n      colors: {\n        light: ['#10b981', '#34d399', '#6ee7b7', '#059669'],\n        dark: ['#059669', '#10b981', '#34d399', '#6ee7b7']\n      },\n      symbols: ['⬤', '⚕', '+', '◉'],\n      // Cell & medical symbols\n      drawSpecial: drawCellDivision\n    },\n    network: {\n      particleCount: 80,\n      connectionDistance: 120,\n      speed: 0.4,\n      size: 2,\n      colors: {\n        light: ['#ef4444', '#f87171', '#fca5a5', '#dc2626'],\n        dark: ['#dc2626', '#ef4444', '#f87171', '#fca5a5']\n      },\n      symbols: ['❤', '🫁', '🧠'],\n      // Organ symbols\n      drawSpecial: drawPulseEffect\n    }\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let animationFrameId;\n    let particles = [];\n    let time = 0;\n\n    // Set canvas dimensions\n    const handleResize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    window.addEventListener('resize', handleResize);\n    handleResize();\n\n    // Initialize particles\n    const variantConfig = variants[variant] || variants.default;\n    const colors = darkMode ? variantConfig.colors.dark : variantConfig.colors.light;\n    for (let i = 0; i < variantConfig.particleCount; i++) {\n      particles.push({\n        x: Math.random() * canvas.width,\n        y: Math.random() * canvas.height,\n        vx: (Math.random() - 0.5) * variantConfig.speed,\n        vy: (Math.random() - 0.5) * variantConfig.speed,\n        radius: Math.random() * variantConfig.size + 1,\n        color: colors[Math.floor(Math.random() * colors.length)],\n        symbol: variantConfig.symbols[Math.floor(Math.random() * variantConfig.symbols.length)],\n        rotation: Math.random() * Math.PI * 2,\n        rotationSpeed: (Math.random() - 0.5) * 0.02,\n        pulsePhase: Math.random() * Math.PI * 2,\n        scale: 1 + Math.random() * 0.5\n      });\n    }\n\n    // Animation function\n    const animate = () => {\n      time += 0.01;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Call special drawing effect if specified\n      if (variantConfig.drawSpecial) {\n        variantConfig.drawSpecial(ctx, canvas, time, colors, darkMode);\n      }\n\n      // Draw and update particles\n      particles.forEach(particle => {\n        // Move particle\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n        particle.rotation += particle.rotationSpeed;\n\n        // Boundary check\n        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;\n        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;\n\n        // Draw particle - either as circle or symbol\n        if (Math.random() > 0.7) {\n          // Draw as circle\n          ctx.beginPath();\n          ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\n          ctx.fillStyle = particle.color;\n          ctx.fill();\n        } else {\n          // Draw as symbol\n          ctx.save();\n          ctx.translate(particle.x, particle.y);\n          ctx.rotate(particle.rotation);\n          ctx.font = `${particle.radius * 4 * particle.scale}px Arial`;\n          ctx.fillStyle = particle.color;\n          ctx.fillText(particle.symbol, 0, 0);\n          ctx.restore();\n        }\n\n        // Connect particles within range\n        if (variant === 'dna') {\n          drawDNAEffect(particle, particles, ctx, variantConfig, time);\n        } else {\n          drawConnections(particle, particles, ctx, variantConfig);\n        }\n      });\n      animationFrameId = requestAnimationFrame(animate);\n    };\n\n    // Draw connections between nearby particles\n    const drawConnections = (particle, particles, ctx, config) => {\n      particles.forEach(other => {\n        if (particle === other) return;\n        const dx = particle.x - other.x;\n        const dy = particle.y - other.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < config.connectionDistance) {\n          ctx.beginPath();\n          ctx.moveTo(particle.x, particle.y);\n          ctx.lineTo(other.x, other.y);\n          ctx.strokeStyle = `${particle.color}${Math.floor((1 - distance / config.connectionDistance) * 255).toString(16).padStart(2, '0')}`;\n          ctx.lineWidth = 0.5;\n          ctx.stroke();\n        }\n      });\n    };\n\n    // Special DNA-like effect\n    const drawDNAEffect = (particle, particles, ctx, config, time) => {\n      const wavelength = 200;\n      const amplitude = 50;\n      particles.forEach(other => {\n        if (particle === other) return;\n        const dx = particle.x - other.x;\n        const dy = particle.y - other.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < config.connectionDistance) {\n          const wave1 = Math.sin((particle.x + time * 100) / wavelength) * amplitude;\n          const wave2 = Math.sin((other.x + time * 100) / wavelength) * amplitude;\n          ctx.beginPath();\n          ctx.moveTo(particle.x, particle.y + wave1);\n          ctx.lineTo(other.x, other.y + wave2);\n          ctx.strokeStyle = `${particle.color}${Math.floor((1 - distance / config.connectionDistance) * 255).toString(16).padStart(2, '0')}`;\n          ctx.lineWidth = 0.5;\n          ctx.stroke();\n        }\n      });\n    };\n\n    // Special effect: Neural Network\n    function drawNeuralNetwork(ctx, canvas, time, colors) {\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height / 2;\n      const radius = Math.min(canvas.width, canvas.height) * 0.3;\n\n      // Draw faint circular path\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n      ctx.strokeStyle = `${colors[0]}20`;\n      ctx.lineWidth = 1;\n      ctx.stroke();\n\n      // Draw neurons along the path\n      const neuronCount = 10;\n      const neurons = [];\n      for (let i = 0; i < neuronCount; i++) {\n        const angle = i / neuronCount * Math.PI * 2 + time;\n        const x = centerX + Math.cos(angle) * radius;\n        const y = centerY + Math.sin(angle) * radius;\n        neurons.push({\n          x,\n          y\n        });\n\n        // Draw neuron\n        ctx.beginPath();\n        ctx.arc(x, y, 3, 0, Math.PI * 2);\n        ctx.fillStyle = colors[i % colors.length];\n        ctx.fill();\n      }\n\n      // Draw connections between neurons\n      for (let i = 0; i < neurons.length; i++) {\n        for (let j = i + 1; j < neurons.length; j++) {\n          ctx.beginPath();\n          ctx.moveTo(neurons[i].x, neurons[i].y);\n          ctx.lineTo(neurons[j].x, neurons[j].y);\n\n          // Pulse effect along connections\n          const pulsePos = time * 2 % 1;\n          const gradientDistance = Math.sqrt(Math.pow(neurons[i].x - neurons[j].x, 2) + Math.pow(neurons[i].y - neurons[j].y, 2));\n          const gradient = ctx.createLinearGradient(neurons[i].x, neurons[i].y, neurons[j].x, neurons[j].y);\n          gradient.addColorStop(Math.max(0, pulsePos - 0.1), `${colors[0]}10`);\n          gradient.addColorStop(pulsePos, `${colors[0]}80`);\n          gradient.addColorStop(Math.min(1, pulsePos + 0.1), `${colors[0]}10`);\n          ctx.strokeStyle = gradient;\n          ctx.lineWidth = 0.5;\n          ctx.stroke();\n        }\n      }\n    }\n\n    // Special effect: DNA Helix\n    function drawDNAHelix(ctx, canvas, time, colors) {\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height / 2;\n      const width = Math.min(canvas.width, canvas.height) * 0.6;\n      const height = width * 0.4;\n      const depth = width * 0.1;\n\n      // Draw the double helix\n      const points = 20;\n      const leftStrand = [];\n      const rightStrand = [];\n      for (let i = 0; i < points; i++) {\n        const t = i / points;\n        const angle = t * Math.PI * 4 + time;\n\n        // Left strand\n        const leftX = centerX + Math.cos(angle) * width / 2;\n        const leftY = centerY + t * height - height / 2;\n        leftStrand.push({\n          x: leftX,\n          y: leftY\n        });\n\n        // Right strand (opposite phase)\n        const rightX = centerX - Math.cos(angle) * width / 2;\n        const rightY = centerY + t * height - height / 2;\n        rightStrand.push({\n          x: rightX,\n          y: rightY\n        });\n\n        // Draw connections between strands (base pairs)\n        if (i % 2 === 0) {\n          ctx.beginPath();\n          ctx.moveTo(leftX, leftY);\n          ctx.lineTo(rightX, rightY);\n          ctx.strokeStyle = `${colors[i % colors.length]}40`;\n          ctx.lineWidth = 1;\n          ctx.stroke();\n\n          // Draw nucleotides at each end\n          ctx.font = '8px Arial';\n          ctx.fillStyle = colors[i % colors.length];\n          const baseA = i % 4 === 0 ? 'A' : i % 4 === 1 ? 'T' : i % 4 === 2 ? 'G' : 'C';\n          const baseB = baseA === 'A' ? 'T' : baseA === 'T' ? 'A' : baseA === 'G' ? 'C' : 'G';\n          ctx.fillText(baseA, leftX - 4, leftY + 4);\n          ctx.fillText(baseB, rightX - 4, rightY + 4);\n        }\n      }\n\n      // Draw the strands\n      ctx.beginPath();\n      ctx.moveTo(leftStrand[0].x, leftStrand[0].y);\n      for (let i = 1; i < leftStrand.length; i++) {\n        ctx.lineTo(leftStrand[i].x, leftStrand[i].y);\n      }\n      ctx.strokeStyle = `${colors[0]}80`;\n      ctx.lineWidth = 2;\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(rightStrand[0].x, rightStrand[0].y);\n      for (let i = 1; i < rightStrand.length; i++) {\n        ctx.lineTo(rightStrand[i].x, rightStrand[i].y);\n      }\n      ctx.strokeStyle = `${colors[1]}80`;\n      ctx.lineWidth = 2;\n      ctx.stroke();\n    }\n\n    // Special effect: Cell Division\n    function drawCellDivision(ctx, canvas, time, colors) {\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height / 2;\n      const radius = Math.min(canvas.width, canvas.height) * 0.15;\n\n      // Draw main cell\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n      ctx.fillStyle = `${colors[0]}20`;\n      ctx.fill();\n      ctx.strokeStyle = `${colors[0]}60`;\n      ctx.lineWidth = 1;\n      ctx.stroke();\n\n      // Draw dividing cell effect\n      const divisionPhase = (Math.sin(time) + 1) / 2; // 0 to 1\n\n      if (divisionPhase > 0.3) {\n        // Draw constriction in the middle\n        const constrictionWidth = radius * (1 - (divisionPhase - 0.3) / 0.7 * 0.8);\n        ctx.beginPath();\n        ctx.ellipse(centerX, centerY, constrictionWidth, radius, 0, 0, Math.PI * 2);\n        ctx.strokeStyle = `${colors[1]}70`;\n        ctx.lineWidth = 2;\n        ctx.stroke();\n\n        // Draw chromosomes\n        if (divisionPhase < 0.6) {\n          const chromosomeCount = 5;\n          for (let i = 0; i < chromosomeCount; i++) {\n            const angle = i / chromosomeCount * Math.PI * 2;\n            const distance = radius * 0.5;\n            const x = centerX + Math.cos(angle) * distance;\n            const y = centerY + Math.sin(angle) * distance;\n            ctx.beginPath();\n            ctx.moveTo(x - 5, y - 5);\n            ctx.lineTo(x + 5, y + 5);\n            ctx.moveTo(x - 5, y + 5);\n            ctx.lineTo(x + 5, y - 5);\n            ctx.strokeStyle = `${colors[2]}90`;\n            ctx.lineWidth = 2;\n            ctx.stroke();\n          }\n        } else {\n          // Draw two sets of chromosomes\n          const chromosomeCount = 5;\n          for (let i = 0; i < chromosomeCount; i++) {\n            const angle = i / chromosomeCount * Math.PI * 2;\n            const distance = radius * 0.3;\n\n            // Left cell chromosomes\n            const x1 = centerX - radius * 0.5 + Math.cos(angle) * distance;\n            const y1 = centerY + Math.sin(angle) * distance;\n            ctx.beginPath();\n            ctx.moveTo(x1 - 3, y1 - 3);\n            ctx.lineTo(x1 + 3, y1 + 3);\n            ctx.moveTo(x1 - 3, y1 + 3);\n            ctx.lineTo(x1 + 3, y1 - 3);\n            ctx.strokeStyle = `${colors[2]}90`;\n            ctx.lineWidth = 1;\n            ctx.stroke();\n\n            // Right cell chromosomes\n            const x2 = centerX + radius * 0.5 + Math.cos(angle) * distance;\n            const y2 = centerY + Math.sin(angle) * distance;\n            ctx.beginPath();\n            ctx.moveTo(x2 - 3, y2 - 3);\n            ctx.lineTo(x2 + 3, y2 + 3);\n            ctx.moveTo(x2 - 3, y2 + 3);\n            ctx.lineTo(x2 + 3, y2 - 3);\n            ctx.strokeStyle = `${colors[2]}90`;\n            ctx.lineWidth = 1;\n            ctx.stroke();\n          }\n        }\n      } else {\n        // Draw nucleus\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, radius * 0.5, 0, Math.PI * 2);\n        ctx.strokeStyle = `${colors[1]}40`;\n        ctx.fillStyle = `${colors[1]}20`;\n        ctx.fill();\n        ctx.lineWidth = 1;\n        ctx.stroke();\n      }\n    }\n\n    // Special effect: Pulse/Heartbeat\n    function drawPulseEffect(ctx, canvas, time, colors) {\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height / 2;\n\n      // Draw ECG line\n      const lineWidth = Math.min(canvas.width, canvas.height) * 0.6;\n      const lineHeight = Math.min(canvas.width, canvas.height) * 0.1;\n      const startX = centerX - lineWidth / 2;\n      const endX = centerX + lineWidth / 2;\n\n      // Draw the baseline\n      ctx.beginPath();\n      ctx.moveTo(startX, centerY);\n      ctx.lineTo(endX, centerY);\n      ctx.strokeStyle = `${colors[0]}30`;\n      ctx.lineWidth = 1;\n      ctx.stroke();\n\n      // Draw animated heartbeat\n      const heartbeatSpeed = 2;\n      const t = time * heartbeatSpeed % 1;\n      if (t < 0.7) {\n        // Draw ECG pattern\n        const progress = t / 0.7; // 0 to 1 during active phase\n\n        ctx.beginPath();\n        ctx.moveTo(startX, centerY);\n\n        // First segment - flat line\n        const segment1End = startX + lineWidth * 0.3;\n        ctx.lineTo(Math.min(segment1End, startX + progress * lineWidth), centerY);\n        if (progress > 0.3) {\n          // P wave\n          const pWaveStart = startX + lineWidth * 0.3;\n          const pWaveEnd = startX + lineWidth * 0.4;\n          ctx.quadraticCurveTo(pWaveStart + (pWaveEnd - pWaveStart) / 2, centerY - lineHeight * 0.2, Math.min(pWaveEnd, startX + progress * lineWidth), centerY);\n        }\n        if (progress > 0.4) {\n          // Flat before QRS\n          const preQRSEnd = startX + lineWidth * 0.5;\n          ctx.lineTo(Math.min(preQRSEnd, startX + progress * lineWidth), centerY);\n        }\n        if (progress > 0.5) {\n          // QRS complex\n          const qrsStart = startX + lineWidth * 0.5;\n          const qPeak = startX + lineWidth * 0.52;\n          const rPeak = startX + lineWidth * 0.55;\n          const sPeak = startX + lineWidth * 0.58;\n          const qrsEnd = startX + lineWidth * 0.6;\n\n          // Q dip\n          if (progress > 0.52) {\n            ctx.lineTo(qPeak, centerY + lineHeight * 0.2);\n          }\n\n          // R peak\n          if (progress > 0.55) {\n            ctx.lineTo(rPeak, centerY - lineHeight * 0.8);\n          }\n\n          // S dip\n          if (progress > 0.58) {\n            ctx.lineTo(sPeak, centerY + lineHeight * 0.4);\n          }\n\n          // End of QRS\n          if (progress > 0.6) {\n            ctx.lineTo(Math.min(qrsEnd, startX + progress * lineWidth), centerY);\n          }\n        }\n        if (progress > 0.6) {\n          // T wave\n          const tWaveStart = startX + lineWidth * 0.65;\n          const tWaveEnd = startX + lineWidth * 0.75;\n          if (progress > 0.65) {\n            ctx.lineTo(tWaveStart, centerY);\n            if (progress > 0.75) {\n              ctx.quadraticCurveTo(tWaveStart + (tWaveEnd - tWaveStart) / 2, centerY - lineHeight * 0.3, Math.min(tWaveEnd, startX + progress * lineWidth), centerY);\n            }\n          }\n        }\n        if (progress > 0.75) {\n          // Final flat line\n          ctx.lineTo(startX + progress * lineWidth, centerY);\n        }\n        ctx.strokeStyle = colors[0];\n        ctx.lineWidth = 2;\n        ctx.stroke();\n\n        // Animate a pulse ring at QRS peak\n        if (progress > 0.55 && progress < 0.9) {\n          const pulseProgress = (progress - 0.55) / 0.35; // 0 to 1\n          const pulseRadius = pulseProgress * lineHeight * 2;\n          ctx.beginPath();\n          ctx.arc(startX + lineWidth * 0.55, centerY - lineHeight * 0.8, pulseRadius, 0, Math.PI * 2);\n          ctx.fillStyle = `${colors[0]}${Math.floor((1 - pulseProgress) * 40).toString(16).padStart(2, '0')}`;\n          ctx.fill();\n        }\n      }\n    }\n    animate();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [variant, darkMode]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"fixed top-0 left-0 w-full h-full -z-10 pointer-events-none\",\n    style: {\n      opacity: 0.15\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 555,\n    columnNumber: 5\n  }, this);\n};\n_s(MedicalBackground, \"2aA941ORuCE5kLTbIvvzk3KKwFo=\", false, function () {\n  return [useTheme];\n});\n_c = MedicalBackground;\nexport default MedicalBackground;\nvar _c;\n$RefreshReg$(_c, \"MedicalBackground\");","map":{"version":3,"names":["React","useEffect","useRef","useTheme","jsxDEV","_jsxDEV","MedicalBackground","variant","_s","canvasRef","darkMode","variants","default","particleCount","connectionDistance","speed","size","colors","light","dark","symbols","drawSpecial","drawNeuralNetwork","dna","drawDNAHelix","cells","drawCellDivision","network","drawPulseEffect","canvas","current","ctx","getContext","animationFrameId","particles","time","handleResize","width","window","innerWidth","height","innerHeight","addEventListener","variantConfig","i","push","x","Math","random","y","vx","vy","radius","color","floor","length","symbol","rotation","PI","rotationSpeed","pulsePhase","scale","animate","clearRect","forEach","particle","beginPath","arc","fillStyle","fill","save","translate","rotate","font","fillText","restore","drawDNAEffect","drawConnections","requestAnimationFrame","config","other","dx","dy","distance","sqrt","moveTo","lineTo","strokeStyle","toString","padStart","lineWidth","stroke","wavelength","amplitude","wave1","sin","wave2","centerX","centerY","min","neuronCount","neurons","angle","cos","j","pulsePos","gradientDistance","pow","gradient","createLinearGradient","addColorStop","max","depth","points","leftStrand","rightStrand","t","leftX","leftY","rightX","rightY","baseA","baseB","divisionPhase","constrictionWidth","ellipse","chromosomeCount","x1","y1","x2","y2","lineHeight","startX","endX","heartbeatSpeed","progress","segment1End","pWaveStart","pWaveEnd","quadraticCurveTo","preQRSEnd","qrsStart","qPeak","rPeak","sPeak","qrsEnd","tWaveStart","tWaveEnd","pulseProgress","pulseRadius","removeEventListener","cancelAnimationFrame","ref","className","style","opacity","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/kouss/Desktop/Cursor/Segmentation/pipeline/webapp/static/src/components/MedicalBackground.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\n\r\n// Medical Background Component that adds animated visualizations\r\nconst MedicalBackground = ({ variant = 'default' }) => {\r\n  const canvasRef = useRef(null);\r\n  const { darkMode } = useTheme();\r\n  \r\n  // Different animation variants\r\n  const variants = {\r\n    default: {\r\n      particleCount: 40,\r\n      connectionDistance: 150,\r\n      speed: 0.5,\r\n      size: 3,\r\n      colors: {\r\n        light: ['#3b82f6', '#60a5fa', '#93c5fd', '#1e40af'],\r\n        dark: ['#1e40af', '#3b82f6', '#60a5fa', '#93c5fd'],\r\n      },\r\n      symbols: ['●', '▲', '■'], // Basic shapes\r\n      drawSpecial: drawNeuralNetwork\r\n    },\r\n    dna: {\r\n      particleCount: 60,\r\n      connectionDistance: 100,\r\n      speed: 0.3,\r\n      size: 2,\r\n      colors: {\r\n        light: ['#8b5cf6', '#a78bfa', '#c4b5fd', '#7c3aed'],\r\n        dark: ['#7c3aed', '#8b5cf6', '#a78bfa', '#c4b5fd'],\r\n      },\r\n      symbols: ['A', 'T', 'G', 'C'], // DNA nucleotides\r\n      drawSpecial: drawDNAHelix\r\n    },\r\n    cells: {\r\n      particleCount: 30,\r\n      connectionDistance: 200,\r\n      speed: 0.7,\r\n      size: 4,\r\n      colors: {\r\n        light: ['#10b981', '#34d399', '#6ee7b7', '#059669'],\r\n        dark: ['#059669', '#10b981', '#34d399', '#6ee7b7'],\r\n      },\r\n      symbols: ['⬤', '⚕', '+', '◉'],  // Cell & medical symbols\r\n      drawSpecial: drawCellDivision\r\n    },\r\n    network: {\r\n      particleCount: 80,\r\n      connectionDistance: 120,\r\n      speed: 0.4,\r\n      size: 2,\r\n      colors: {\r\n        light: ['#ef4444', '#f87171', '#fca5a5', '#dc2626'],\r\n        dark: ['#dc2626', '#ef4444', '#f87171', '#fca5a5'],\r\n      },\r\n      symbols: ['❤', '🫁', '🧠'], // Organ symbols\r\n      drawSpecial: drawPulseEffect\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    let animationFrameId;\r\n    let particles = [];\r\n    let time = 0;\r\n    \r\n    // Set canvas dimensions\r\n    const handleResize = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    handleResize();\r\n    \r\n    // Initialize particles\r\n    const variantConfig = variants[variant] || variants.default;\r\n    const colors = darkMode ? variantConfig.colors.dark : variantConfig.colors.light;\r\n    \r\n    for (let i = 0; i < variantConfig.particleCount; i++) {\r\n      particles.push({\r\n        x: Math.random() * canvas.width,\r\n        y: Math.random() * canvas.height,\r\n        vx: (Math.random() - 0.5) * variantConfig.speed,\r\n        vy: (Math.random() - 0.5) * variantConfig.speed,\r\n        radius: Math.random() * variantConfig.size + 1,\r\n        color: colors[Math.floor(Math.random() * colors.length)],\r\n        symbol: variantConfig.symbols[Math.floor(Math.random() * variantConfig.symbols.length)],\r\n        rotation: Math.random() * Math.PI * 2,\r\n        rotationSpeed: (Math.random() - 0.5) * 0.02,\r\n        pulsePhase: Math.random() * Math.PI * 2,\r\n        scale: 1 + Math.random() * 0.5\r\n      });\r\n    }\r\n    \r\n    // Animation function\r\n    const animate = () => {\r\n      time += 0.01;\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      // Call special drawing effect if specified\r\n      if (variantConfig.drawSpecial) {\r\n        variantConfig.drawSpecial(ctx, canvas, time, colors, darkMode);\r\n      }\r\n      \r\n      // Draw and update particles\r\n      particles.forEach(particle => {\r\n        // Move particle\r\n        particle.x += particle.vx;\r\n        particle.y += particle.vy;\r\n        particle.rotation += particle.rotationSpeed;\r\n        \r\n        // Boundary check\r\n        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;\r\n        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;\r\n        \r\n        // Draw particle - either as circle or symbol\r\n        if (Math.random() > 0.7) {\r\n          // Draw as circle\r\n          ctx.beginPath();\r\n          ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n          ctx.fillStyle = particle.color;\r\n          ctx.fill();\r\n        } else {\r\n          // Draw as symbol\r\n          ctx.save();\r\n          ctx.translate(particle.x, particle.y);\r\n          ctx.rotate(particle.rotation);\r\n          ctx.font = `${particle.radius * 4 * particle.scale}px Arial`;\r\n          ctx.fillStyle = particle.color;\r\n          ctx.fillText(particle.symbol, 0, 0);\r\n          ctx.restore();\r\n        }\r\n        \r\n        // Connect particles within range\r\n        if (variant === 'dna') {\r\n          drawDNAEffect(particle, particles, ctx, variantConfig, time);\r\n        } else {\r\n          drawConnections(particle, particles, ctx, variantConfig);\r\n        }\r\n      });\r\n      \r\n      animationFrameId = requestAnimationFrame(animate);\r\n    };\r\n    \r\n    // Draw connections between nearby particles\r\n    const drawConnections = (particle, particles, ctx, config) => {\r\n      particles.forEach(other => {\r\n        if (particle === other) return;\r\n        \r\n        const dx = particle.x - other.x;\r\n        const dy = particle.y - other.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        \r\n        if (distance < config.connectionDistance) {\r\n          ctx.beginPath();\r\n          ctx.moveTo(particle.x, particle.y);\r\n          ctx.lineTo(other.x, other.y);\r\n          ctx.strokeStyle = `${particle.color}${Math.floor((1 - distance / config.connectionDistance) * 255).toString(16).padStart(2, '0')}`;\r\n          ctx.lineWidth = 0.5;\r\n          ctx.stroke();\r\n        }\r\n      });\r\n    };\r\n    \r\n    // Special DNA-like effect\r\n    const drawDNAEffect = (particle, particles, ctx, config, time) => {\r\n      const wavelength = 200;\r\n      const amplitude = 50;\r\n      \r\n      particles.forEach(other => {\r\n        if (particle === other) return;\r\n        \r\n        const dx = particle.x - other.x;\r\n        const dy = particle.y - other.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        \r\n        if (distance < config.connectionDistance) {\r\n          const wave1 = Math.sin((particle.x + time * 100) / wavelength) * amplitude;\r\n          const wave2 = Math.sin((other.x + time * 100) / wavelength) * amplitude;\r\n          \r\n          ctx.beginPath();\r\n          ctx.moveTo(particle.x, particle.y + wave1);\r\n          ctx.lineTo(other.x, other.y + wave2);\r\n          ctx.strokeStyle = `${particle.color}${Math.floor((1 - distance / config.connectionDistance) * 255).toString(16).padStart(2, '0')}`;\r\n          ctx.lineWidth = 0.5;\r\n          ctx.stroke();\r\n        }\r\n      });\r\n    };\r\n\r\n    // Special effect: Neural Network\r\n    function drawNeuralNetwork(ctx, canvas, time, colors) {\r\n      const centerX = canvas.width / 2;\r\n      const centerY = canvas.height / 2;\r\n      const radius = Math.min(canvas.width, canvas.height) * 0.3;\r\n      \r\n      // Draw faint circular path\r\n      ctx.beginPath();\r\n      ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\r\n      ctx.strokeStyle = `${colors[0]}20`;\r\n      ctx.lineWidth = 1;\r\n      ctx.stroke();\r\n      \r\n      // Draw neurons along the path\r\n      const neuronCount = 10;\r\n      const neurons = [];\r\n      \r\n      for (let i = 0; i < neuronCount; i++) {\r\n        const angle = (i / neuronCount) * Math.PI * 2 + time;\r\n        const x = centerX + Math.cos(angle) * radius;\r\n        const y = centerY + Math.sin(angle) * radius;\r\n        neurons.push({x, y});\r\n        \r\n        // Draw neuron\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, 3, 0, Math.PI * 2);\r\n        ctx.fillStyle = colors[i % colors.length];\r\n        ctx.fill();\r\n      }\r\n      \r\n      // Draw connections between neurons\r\n      for (let i = 0; i < neurons.length; i++) {\r\n        for (let j = i + 1; j < neurons.length; j++) {\r\n          ctx.beginPath();\r\n          ctx.moveTo(neurons[i].x, neurons[i].y);\r\n          ctx.lineTo(neurons[j].x, neurons[j].y);\r\n          \r\n          // Pulse effect along connections\r\n          const pulsePos = (time * 2) % 1;\r\n          const gradientDistance = Math.sqrt(\r\n            Math.pow(neurons[i].x - neurons[j].x, 2) + \r\n            Math.pow(neurons[i].y - neurons[j].y, 2)\r\n          );\r\n          \r\n          const gradient = ctx.createLinearGradient(\r\n            neurons[i].x, neurons[i].y, \r\n            neurons[j].x, neurons[j].y\r\n          );\r\n          \r\n          gradient.addColorStop(Math.max(0, pulsePos - 0.1), `${colors[0]}10`);\r\n          gradient.addColorStop(pulsePos, `${colors[0]}80`);\r\n          gradient.addColorStop(Math.min(1, pulsePos + 0.1), `${colors[0]}10`);\r\n          \r\n          ctx.strokeStyle = gradient;\r\n          ctx.lineWidth = 0.5;\r\n          ctx.stroke();\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Special effect: DNA Helix\r\n    function drawDNAHelix(ctx, canvas, time, colors) {\r\n      const centerX = canvas.width / 2;\r\n      const centerY = canvas.height / 2;\r\n      \r\n      const width = Math.min(canvas.width, canvas.height) * 0.6;\r\n      const height = width * 0.4;\r\n      const depth = width * 0.1;\r\n      \r\n      // Draw the double helix\r\n      const points = 20;\r\n      const leftStrand = [];\r\n      const rightStrand = [];\r\n      \r\n      for (let i = 0; i < points; i++) {\r\n        const t = i / points;\r\n        const angle = t * Math.PI * 4 + time;\r\n        \r\n        // Left strand\r\n        const leftX = centerX + Math.cos(angle) * width / 2;\r\n        const leftY = centerY + t * height - height / 2;\r\n        leftStrand.push({x: leftX, y: leftY});\r\n        \r\n        // Right strand (opposite phase)\r\n        const rightX = centerX - Math.cos(angle) * width / 2;\r\n        const rightY = centerY + t * height - height / 2;\r\n        rightStrand.push({x: rightX, y: rightY});\r\n        \r\n        // Draw connections between strands (base pairs)\r\n        if (i % 2 === 0) {\r\n          ctx.beginPath();\r\n          ctx.moveTo(leftX, leftY);\r\n          ctx.lineTo(rightX, rightY);\r\n          ctx.strokeStyle = `${colors[i % colors.length]}40`;\r\n          ctx.lineWidth = 1;\r\n          ctx.stroke();\r\n          \r\n          // Draw nucleotides at each end\r\n          ctx.font = '8px Arial';\r\n          ctx.fillStyle = colors[i % colors.length];\r\n          \r\n          const baseA = i % 4 === 0 ? 'A' : i % 4 === 1 ? 'T' : i % 4 === 2 ? 'G' : 'C';\r\n          const baseB = baseA === 'A' ? 'T' : baseA === 'T' ? 'A' : baseA === 'G' ? 'C' : 'G';\r\n          \r\n          ctx.fillText(baseA, leftX - 4, leftY + 4);\r\n          ctx.fillText(baseB, rightX - 4, rightY + 4);\r\n        }\r\n      }\r\n      \r\n      // Draw the strands\r\n      ctx.beginPath();\r\n      ctx.moveTo(leftStrand[0].x, leftStrand[0].y);\r\n      for (let i = 1; i < leftStrand.length; i++) {\r\n        ctx.lineTo(leftStrand[i].x, leftStrand[i].y);\r\n      }\r\n      ctx.strokeStyle = `${colors[0]}80`;\r\n      ctx.lineWidth = 2;\r\n      ctx.stroke();\r\n      \r\n      ctx.beginPath();\r\n      ctx.moveTo(rightStrand[0].x, rightStrand[0].y);\r\n      for (let i = 1; i < rightStrand.length; i++) {\r\n        ctx.lineTo(rightStrand[i].x, rightStrand[i].y);\r\n      }\r\n      ctx.strokeStyle = `${colors[1]}80`;\r\n      ctx.lineWidth = 2;\r\n      ctx.stroke();\r\n    }\r\n    \r\n    // Special effect: Cell Division\r\n    function drawCellDivision(ctx, canvas, time, colors) {\r\n      const centerX = canvas.width / 2;\r\n      const centerY = canvas.height / 2;\r\n      const radius = Math.min(canvas.width, canvas.height) * 0.15;\r\n      \r\n      // Draw main cell\r\n      ctx.beginPath();\r\n      ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\r\n      ctx.fillStyle = `${colors[0]}20`;\r\n      ctx.fill();\r\n      ctx.strokeStyle = `${colors[0]}60`;\r\n      ctx.lineWidth = 1;\r\n      ctx.stroke();\r\n      \r\n      // Draw dividing cell effect\r\n      const divisionPhase = (Math.sin(time) + 1) / 2; // 0 to 1\r\n      \r\n      if (divisionPhase > 0.3) {\r\n        // Draw constriction in the middle\r\n        const constrictionWidth = radius * (1 - (divisionPhase - 0.3) / 0.7 * 0.8);\r\n        \r\n        ctx.beginPath();\r\n        ctx.ellipse(\r\n          centerX, \r\n          centerY, \r\n          constrictionWidth, \r\n          radius, \r\n          0, \r\n          0, \r\n          Math.PI * 2\r\n        );\r\n        ctx.strokeStyle = `${colors[1]}70`;\r\n        ctx.lineWidth = 2;\r\n        ctx.stroke();\r\n        \r\n        // Draw chromosomes\r\n        if (divisionPhase < 0.6) {\r\n          const chromosomeCount = 5;\r\n          for (let i = 0; i < chromosomeCount; i++) {\r\n            const angle = (i / chromosomeCount) * Math.PI * 2;\r\n            const distance = radius * 0.5;\r\n            const x = centerX + Math.cos(angle) * distance;\r\n            const y = centerY + Math.sin(angle) * distance;\r\n            \r\n            ctx.beginPath();\r\n            ctx.moveTo(x - 5, y - 5);\r\n            ctx.lineTo(x + 5, y + 5);\r\n            ctx.moveTo(x - 5, y + 5);\r\n            ctx.lineTo(x + 5, y - 5);\r\n            ctx.strokeStyle = `${colors[2]}90`;\r\n            ctx.lineWidth = 2;\r\n            ctx.stroke();\r\n          }\r\n        } else {\r\n          // Draw two sets of chromosomes\r\n          const chromosomeCount = 5;\r\n          for (let i = 0; i < chromosomeCount; i++) {\r\n            const angle = (i / chromosomeCount) * Math.PI * 2;\r\n            const distance = radius * 0.3;\r\n            \r\n            // Left cell chromosomes\r\n            const x1 = centerX - radius * 0.5 + Math.cos(angle) * distance;\r\n            const y1 = centerY + Math.sin(angle) * distance;\r\n            \r\n            ctx.beginPath();\r\n            ctx.moveTo(x1 - 3, y1 - 3);\r\n            ctx.lineTo(x1 + 3, y1 + 3);\r\n            ctx.moveTo(x1 - 3, y1 + 3);\r\n            ctx.lineTo(x1 + 3, y1 - 3);\r\n            ctx.strokeStyle = `${colors[2]}90`;\r\n            ctx.lineWidth = 1;\r\n            ctx.stroke();\r\n            \r\n            // Right cell chromosomes\r\n            const x2 = centerX + radius * 0.5 + Math.cos(angle) * distance;\r\n            const y2 = centerY + Math.sin(angle) * distance;\r\n            \r\n            ctx.beginPath();\r\n            ctx.moveTo(x2 - 3, y2 - 3);\r\n            ctx.lineTo(x2 + 3, y2 + 3);\r\n            ctx.moveTo(x2 - 3, y2 + 3);\r\n            ctx.lineTo(x2 + 3, y2 - 3);\r\n            ctx.strokeStyle = `${colors[2]}90`;\r\n            ctx.lineWidth = 1;\r\n            ctx.stroke();\r\n          }\r\n        }\r\n      } else {\r\n        // Draw nucleus\r\n        ctx.beginPath();\r\n        ctx.arc(centerX, centerY, radius * 0.5, 0, Math.PI * 2);\r\n        ctx.strokeStyle = `${colors[1]}40`;\r\n        ctx.fillStyle = `${colors[1]}20`;\r\n        ctx.fill();\r\n        ctx.lineWidth = 1;\r\n        ctx.stroke();\r\n      }\r\n    }\r\n    \r\n    // Special effect: Pulse/Heartbeat\r\n    function drawPulseEffect(ctx, canvas, time, colors) {\r\n      const centerX = canvas.width / 2;\r\n      const centerY = canvas.height / 2;\r\n      \r\n      // Draw ECG line\r\n      const lineWidth = Math.min(canvas.width, canvas.height) * 0.6;\r\n      const lineHeight = Math.min(canvas.width, canvas.height) * 0.1;\r\n      \r\n      const startX = centerX - lineWidth / 2;\r\n      const endX = centerX + lineWidth / 2;\r\n      \r\n      // Draw the baseline\r\n      ctx.beginPath();\r\n      ctx.moveTo(startX, centerY);\r\n      ctx.lineTo(endX, centerY);\r\n      ctx.strokeStyle = `${colors[0]}30`;\r\n      ctx.lineWidth = 1;\r\n      ctx.stroke();\r\n      \r\n      // Draw animated heartbeat\r\n      const heartbeatSpeed = 2;\r\n      const t = (time * heartbeatSpeed) % 1; \r\n      \r\n      if (t < 0.7) {\r\n        // Draw ECG pattern\r\n        const progress = t / 0.7; // 0 to 1 during active phase\r\n        \r\n        ctx.beginPath();\r\n        ctx.moveTo(startX, centerY);\r\n        \r\n        // First segment - flat line\r\n        const segment1End = startX + lineWidth * 0.3;\r\n        ctx.lineTo(Math.min(segment1End, startX + progress * lineWidth), centerY);\r\n        \r\n        if (progress > 0.3) {\r\n          // P wave\r\n          const pWaveStart = startX + lineWidth * 0.3;\r\n          const pWaveEnd = startX + lineWidth * 0.4;\r\n          \r\n          ctx.quadraticCurveTo(\r\n            pWaveStart + (pWaveEnd - pWaveStart) / 2, \r\n            centerY - lineHeight * 0.2,\r\n            Math.min(pWaveEnd, startX + progress * lineWidth), \r\n            centerY\r\n          );\r\n        }\r\n        \r\n        if (progress > 0.4) {\r\n          // Flat before QRS\r\n          const preQRSEnd = startX + lineWidth * 0.5;\r\n          ctx.lineTo(Math.min(preQRSEnd, startX + progress * lineWidth), centerY);\r\n        }\r\n        \r\n        if (progress > 0.5) {\r\n          // QRS complex\r\n          const qrsStart = startX + lineWidth * 0.5;\r\n          const qPeak = startX + lineWidth * 0.52;\r\n          const rPeak = startX + lineWidth * 0.55;\r\n          const sPeak = startX + lineWidth * 0.58;\r\n          const qrsEnd = startX + lineWidth * 0.6;\r\n          \r\n          // Q dip\r\n          if (progress > 0.52) {\r\n            ctx.lineTo(qPeak, centerY + lineHeight * 0.2);\r\n          }\r\n          \r\n          // R peak\r\n          if (progress > 0.55) {\r\n            ctx.lineTo(rPeak, centerY - lineHeight * 0.8);\r\n          }\r\n          \r\n          // S dip\r\n          if (progress > 0.58) {\r\n            ctx.lineTo(sPeak, centerY + lineHeight * 0.4);\r\n          }\r\n          \r\n          // End of QRS\r\n          if (progress > 0.6) {\r\n            ctx.lineTo(Math.min(qrsEnd, startX + progress * lineWidth), centerY);\r\n          }\r\n        }\r\n        \r\n        if (progress > 0.6) {\r\n          // T wave\r\n          const tWaveStart = startX + lineWidth * 0.65;\r\n          const tWaveEnd = startX + lineWidth * 0.75;\r\n          \r\n          if (progress > 0.65) {\r\n            ctx.lineTo(tWaveStart, centerY);\r\n            \r\n            if (progress > 0.75) {\r\n              ctx.quadraticCurveTo(\r\n                tWaveStart + (tWaveEnd - tWaveStart) / 2, \r\n                centerY - lineHeight * 0.3,\r\n                Math.min(tWaveEnd, startX + progress * lineWidth), \r\n                centerY\r\n              );\r\n            }\r\n          }\r\n        }\r\n        \r\n        if (progress > 0.75) {\r\n          // Final flat line\r\n          ctx.lineTo(startX + progress * lineWidth, centerY);\r\n        }\r\n        \r\n        ctx.strokeStyle = colors[0];\r\n        ctx.lineWidth = 2;\r\n        ctx.stroke();\r\n        \r\n        // Animate a pulse ring at QRS peak\r\n        if (progress > 0.55 && progress < 0.9) {\r\n          const pulseProgress = (progress - 0.55) / 0.35; // 0 to 1\r\n          const pulseRadius = pulseProgress * lineHeight * 2;\r\n          \r\n          ctx.beginPath();\r\n          ctx.arc(startX + lineWidth * 0.55, centerY - lineHeight * 0.8, pulseRadius, 0, Math.PI * 2);\r\n          ctx.fillStyle = `${colors[0]}${Math.floor((1 - pulseProgress) * 40).toString(16).padStart(2, '0')}`;\r\n          ctx.fill();\r\n        }\r\n      }\r\n    }\r\n    \r\n    animate();\r\n    \r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [variant, darkMode]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      className=\"fixed top-0 left-0 w-full h-full -z-10 pointer-events-none\"\r\n      style={{ opacity: 0.15 }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MedicalBackground; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}