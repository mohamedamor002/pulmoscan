{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kouss\\\\Desktop\\\\Cursor\\\\Segmentation\\\\pipeline\\\\webapp\\\\static\\\\src\\\\components\\\\MedicalBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { useTheme } from '../contexts/ThemeContext';\n\n// Medical Background Component that adds animated visualizations\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MedicalBackground = ({\n  variant = 'default'\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const {\n    darkMode\n  } = useTheme();\n\n  // Different animation variants\n  const variants = {\n    default: {\n      particleCount: 40,\n      connectionDistance: 150,\n      speed: 0.5,\n      size: 3,\n      colors: {\n        light: ['#3b82f6', '#60a5fa', '#93c5fd', '#1e40af'],\n        dark: ['#1e40af', '#3b82f6', '#60a5fa', '#93c5fd']\n      }\n    },\n    dna: {\n      particleCount: 60,\n      connectionDistance: 100,\n      speed: 0.3,\n      size: 2,\n      colors: {\n        light: ['#8b5cf6', '#a78bfa', '#c4b5fd', '#7c3aed'],\n        dark: ['#7c3aed', '#8b5cf6', '#a78bfa', '#c4b5fd']\n      }\n    },\n    cells: {\n      particleCount: 30,\n      connectionDistance: 200,\n      speed: 0.7,\n      size: 4,\n      colors: {\n        light: ['#10b981', '#34d399', '#6ee7b7', '#059669'],\n        dark: ['#059669', '#10b981', '#34d399', '#6ee7b7']\n      }\n    },\n    network: {\n      particleCount: 80,\n      connectionDistance: 120,\n      speed: 0.4,\n      size: 2,\n      colors: {\n        light: ['#ef4444', '#f87171', '#fca5a5', '#dc2626'],\n        dark: ['#dc2626', '#ef4444', '#f87171', '#fca5a5']\n      }\n    }\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let animationFrameId;\n    let particles = [];\n\n    // Set canvas dimensions\n    const handleResize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    window.addEventListener('resize', handleResize);\n    handleResize();\n\n    // Initialize particles\n    const variantConfig = variants[variant] || variants.default;\n    const colors = darkMode ? variantConfig.colors.dark : variantConfig.colors.light;\n    for (let i = 0; i < variantConfig.particleCount; i++) {\n      particles.push({\n        x: Math.random() * canvas.width,\n        y: Math.random() * canvas.height,\n        vx: (Math.random() - 0.5) * variantConfig.speed,\n        vy: (Math.random() - 0.5) * variantConfig.speed,\n        radius: Math.random() * variantConfig.size + 1,\n        color: colors[Math.floor(Math.random() * colors.length)]\n      });\n    }\n\n    // Animation function\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw and update particles\n      particles.forEach(particle => {\n        // Move particle\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n\n        // Boundary check\n        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;\n        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;\n\n        // Draw particle\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\n        ctx.fillStyle = particle.color;\n        ctx.fill();\n\n        // Connect particles within range\n        if (variant === 'dna') {\n          drawDNAEffect(particle, particles, ctx, variantConfig);\n        } else {\n          drawConnections(particle, particles, ctx, variantConfig);\n        }\n      });\n      animationFrameId = requestAnimationFrame(animate);\n    };\n\n    // Draw connections between nearby particles\n    const drawConnections = (particle, particles, ctx, config) => {\n      particles.forEach(other => {\n        if (particle === other) return;\n        const dx = particle.x - other.x;\n        const dy = particle.y - other.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < config.connectionDistance) {\n          ctx.beginPath();\n          ctx.moveTo(particle.x, particle.y);\n          ctx.lineTo(other.x, other.y);\n          ctx.strokeStyle = `${particle.color}${Math.floor((1 - distance / config.connectionDistance) * 255).toString(16).padStart(2, '0')}`;\n          ctx.lineWidth = 0.5;\n          ctx.stroke();\n        }\n      });\n    };\n\n    // Special DNA-like effect\n    const drawDNAEffect = (particle, particles, ctx, config) => {\n      const time = Date.now() * 0.001;\n      const amplitude = 50;\n      const wavelength = 200;\n      particles.forEach(other => {\n        if (particle === other) return;\n        const dx = particle.x - other.x;\n        const dy = particle.y - other.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < config.connectionDistance) {\n          const wave1 = Math.sin((particle.x + time * 100) / wavelength) * amplitude;\n          const wave2 = Math.sin((other.x + time * 100) / wavelength) * amplitude;\n          ctx.beginPath();\n          ctx.moveTo(particle.x, particle.y + wave1);\n          ctx.lineTo(other.x, other.y + wave2);\n          ctx.strokeStyle = `${particle.color}${Math.floor((1 - distance / config.connectionDistance) * 255).toString(16).padStart(2, '0')}`;\n          ctx.lineWidth = 0.5;\n          ctx.stroke();\n        }\n      });\n    };\n    animate();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [variant, darkMode]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"fixed top-0 left-0 w-full h-full -z-10 pointer-events-none\",\n    style: {\n      opacity: 0.15\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(MedicalBackground, \"2aA941ORuCE5kLTbIvvzk3KKwFo=\", false, function () {\n  return [useTheme];\n});\n_c = MedicalBackground;\nexport default MedicalBackground;\nvar _c;\n$RefreshReg$(_c, \"MedicalBackground\");","map":{"version":3,"names":["React","useEffect","useRef","useTheme","jsxDEV","_jsxDEV","MedicalBackground","variant","_s","canvasRef","darkMode","variants","default","particleCount","connectionDistance","speed","size","colors","light","dark","dna","cells","network","canvas","current","ctx","getContext","animationFrameId","particles","handleResize","width","window","innerWidth","height","innerHeight","addEventListener","variantConfig","i","push","x","Math","random","y","vx","vy","radius","color","floor","length","animate","clearRect","forEach","particle","beginPath","arc","PI","fillStyle","fill","drawDNAEffect","drawConnections","requestAnimationFrame","config","other","dx","dy","distance","sqrt","moveTo","lineTo","strokeStyle","toString","padStart","lineWidth","stroke","time","Date","now","amplitude","wavelength","wave1","sin","wave2","removeEventListener","cancelAnimationFrame","ref","className","style","opacity","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/kouss/Desktop/Cursor/Segmentation/pipeline/webapp/static/src/components/MedicalBackground.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\n\r\n// Medical Background Component that adds animated visualizations\r\nconst MedicalBackground = ({ variant = 'default' }) => {\r\n  const canvasRef = useRef(null);\r\n  const { darkMode } = useTheme();\r\n  \r\n  // Different animation variants\r\n  const variants = {\r\n    default: {\r\n      particleCount: 40,\r\n      connectionDistance: 150,\r\n      speed: 0.5,\r\n      size: 3,\r\n      colors: {\r\n        light: ['#3b82f6', '#60a5fa', '#93c5fd', '#1e40af'],\r\n        dark: ['#1e40af', '#3b82f6', '#60a5fa', '#93c5fd'],\r\n      }\r\n    },\r\n    dna: {\r\n      particleCount: 60,\r\n      connectionDistance: 100,\r\n      speed: 0.3,\r\n      size: 2,\r\n      colors: {\r\n        light: ['#8b5cf6', '#a78bfa', '#c4b5fd', '#7c3aed'],\r\n        dark: ['#7c3aed', '#8b5cf6', '#a78bfa', '#c4b5fd'],\r\n      }\r\n    },\r\n    cells: {\r\n      particleCount: 30,\r\n      connectionDistance: 200,\r\n      speed: 0.7,\r\n      size: 4,\r\n      colors: {\r\n        light: ['#10b981', '#34d399', '#6ee7b7', '#059669'],\r\n        dark: ['#059669', '#10b981', '#34d399', '#6ee7b7'],\r\n      }\r\n    },\r\n    network: {\r\n      particleCount: 80,\r\n      connectionDistance: 120,\r\n      speed: 0.4,\r\n      size: 2,\r\n      colors: {\r\n        light: ['#ef4444', '#f87171', '#fca5a5', '#dc2626'],\r\n        dark: ['#dc2626', '#ef4444', '#f87171', '#fca5a5'],\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    let animationFrameId;\r\n    let particles = [];\r\n    \r\n    // Set canvas dimensions\r\n    const handleResize = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    handleResize();\r\n    \r\n    // Initialize particles\r\n    const variantConfig = variants[variant] || variants.default;\r\n    const colors = darkMode ? variantConfig.colors.dark : variantConfig.colors.light;\r\n    \r\n    for (let i = 0; i < variantConfig.particleCount; i++) {\r\n      particles.push({\r\n        x: Math.random() * canvas.width,\r\n        y: Math.random() * canvas.height,\r\n        vx: (Math.random() - 0.5) * variantConfig.speed,\r\n        vy: (Math.random() - 0.5) * variantConfig.speed,\r\n        radius: Math.random() * variantConfig.size + 1,\r\n        color: colors[Math.floor(Math.random() * colors.length)]\r\n      });\r\n    }\r\n    \r\n    // Animation function\r\n    const animate = () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      // Draw and update particles\r\n      particles.forEach(particle => {\r\n        // Move particle\r\n        particle.x += particle.vx;\r\n        particle.y += particle.vy;\r\n        \r\n        // Boundary check\r\n        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;\r\n        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;\r\n        \r\n        // Draw particle\r\n        ctx.beginPath();\r\n        ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n        ctx.fillStyle = particle.color;\r\n        ctx.fill();\r\n        \r\n        // Connect particles within range\r\n        if (variant === 'dna') {\r\n          drawDNAEffect(particle, particles, ctx, variantConfig);\r\n        } else {\r\n          drawConnections(particle, particles, ctx, variantConfig);\r\n        }\r\n      });\r\n      \r\n      animationFrameId = requestAnimationFrame(animate);\r\n    };\r\n    \r\n    // Draw connections between nearby particles\r\n    const drawConnections = (particle, particles, ctx, config) => {\r\n      particles.forEach(other => {\r\n        if (particle === other) return;\r\n        \r\n        const dx = particle.x - other.x;\r\n        const dy = particle.y - other.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        \r\n        if (distance < config.connectionDistance) {\r\n          ctx.beginPath();\r\n          ctx.moveTo(particle.x, particle.y);\r\n          ctx.lineTo(other.x, other.y);\r\n          ctx.strokeStyle = `${particle.color}${Math.floor((1 - distance / config.connectionDistance) * 255).toString(16).padStart(2, '0')}`;\r\n          ctx.lineWidth = 0.5;\r\n          ctx.stroke();\r\n        }\r\n      });\r\n    };\r\n    \r\n    // Special DNA-like effect\r\n    const drawDNAEffect = (particle, particles, ctx, config) => {\r\n      const time = Date.now() * 0.001;\r\n      const amplitude = 50;\r\n      const wavelength = 200;\r\n      \r\n      particles.forEach(other => {\r\n        if (particle === other) return;\r\n        \r\n        const dx = particle.x - other.x;\r\n        const dy = particle.y - other.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        \r\n        if (distance < config.connectionDistance) {\r\n          const wave1 = Math.sin((particle.x + time * 100) / wavelength) * amplitude;\r\n          const wave2 = Math.sin((other.x + time * 100) / wavelength) * amplitude;\r\n          \r\n          ctx.beginPath();\r\n          ctx.moveTo(particle.x, particle.y + wave1);\r\n          ctx.lineTo(other.x, other.y + wave2);\r\n          ctx.strokeStyle = `${particle.color}${Math.floor((1 - distance / config.connectionDistance) * 255).toString(16).padStart(2, '0')}`;\r\n          ctx.lineWidth = 0.5;\r\n          ctx.stroke();\r\n        }\r\n      });\r\n    };\r\n    \r\n    animate();\r\n    \r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [variant, darkMode]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      className=\"fixed top-0 left-0 w-full h-full -z-10 pointer-events-none\"\r\n      style={{ opacity: 0.15 }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MedicalBackground; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,QAAQ,QAAQ,0BAA0B;;AAEnD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,OAAO,GAAG;AAAU,CAAC,KAAK;EAAAC,EAAA;EACrD,MAAMC,SAAS,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM;IAAEQ;EAAS,CAAC,GAAGP,QAAQ,CAAC,CAAC;;EAE/B;EACA,MAAMQ,QAAQ,GAAG;IACfC,OAAO,EAAE;MACPC,aAAa,EAAE,EAAE;MACjBC,kBAAkB,EAAE,GAAG;MACvBC,KAAK,EAAE,GAAG;MACVC,IAAI,EAAE,CAAC;MACPC,MAAM,EAAE;QACNC,KAAK,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QACnDC,IAAI,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS;MACnD;IACF,CAAC;IACDC,GAAG,EAAE;MACHP,aAAa,EAAE,EAAE;MACjBC,kBAAkB,EAAE,GAAG;MACvBC,KAAK,EAAE,GAAG;MACVC,IAAI,EAAE,CAAC;MACPC,MAAM,EAAE;QACNC,KAAK,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QACnDC,IAAI,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS;MACnD;IACF,CAAC;IACDE,KAAK,EAAE;MACLR,aAAa,EAAE,EAAE;MACjBC,kBAAkB,EAAE,GAAG;MACvBC,KAAK,EAAE,GAAG;MACVC,IAAI,EAAE,CAAC;MACPC,MAAM,EAAE;QACNC,KAAK,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QACnDC,IAAI,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS;MACnD;IACF,CAAC;IACDG,OAAO,EAAE;MACPT,aAAa,EAAE,EAAE;MACjBC,kBAAkB,EAAE,GAAG;MACvBC,KAAK,EAAE,GAAG;MACVC,IAAI,EAAE,CAAC;MACPC,MAAM,EAAE;QACNC,KAAK,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QACnDC,IAAI,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS;MACnD;IACF;EACF,CAAC;EAEDlB,SAAS,CAAC,MAAM;IACd,MAAMsB,MAAM,GAAGd,SAAS,CAACe,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,IAAIC,gBAAgB;IACpB,IAAIC,SAAS,GAAG,EAAE;;IAElB;IACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;MACzBN,MAAM,CAACO,KAAK,GAAGC,MAAM,CAACC,UAAU;MAChCT,MAAM,CAACU,MAAM,GAAGF,MAAM,CAACG,WAAW;IACpC,CAAC;IAEDH,MAAM,CAACI,gBAAgB,CAAC,QAAQ,EAAEN,YAAY,CAAC;IAC/CA,YAAY,CAAC,CAAC;;IAEd;IACA,MAAMO,aAAa,GAAGzB,QAAQ,CAACJ,OAAO,CAAC,IAAII,QAAQ,CAACC,OAAO;IAC3D,MAAMK,MAAM,GAAGP,QAAQ,GAAG0B,aAAa,CAACnB,MAAM,CAACE,IAAI,GAAGiB,aAAa,CAACnB,MAAM,CAACC,KAAK;IAEhF,KAAK,IAAImB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,aAAa,CAACvB,aAAa,EAAEwB,CAAC,EAAE,EAAE;MACpDT,SAAS,CAACU,IAAI,CAAC;QACbC,CAAC,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGlB,MAAM,CAACO,KAAK;QAC/BY,CAAC,EAAEF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGlB,MAAM,CAACU,MAAM;QAChCU,EAAE,EAAE,CAACH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAIL,aAAa,CAACrB,KAAK;QAC/C6B,EAAE,EAAE,CAACJ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAIL,aAAa,CAACrB,KAAK;QAC/C8B,MAAM,EAAEL,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGL,aAAa,CAACpB,IAAI,GAAG,CAAC;QAC9C8B,KAAK,EAAE7B,MAAM,CAACuB,IAAI,CAACO,KAAK,CAACP,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGxB,MAAM,CAAC+B,MAAM,CAAC;MACzD,CAAC,CAAC;IACJ;;IAEA;IACA,MAAMC,OAAO,GAAGA,CAAA,KAAM;MACpBxB,GAAG,CAACyB,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE3B,MAAM,CAACO,KAAK,EAAEP,MAAM,CAACU,MAAM,CAAC;;MAEhD;MACAL,SAAS,CAACuB,OAAO,CAACC,QAAQ,IAAI;QAC5B;QACAA,QAAQ,CAACb,CAAC,IAAIa,QAAQ,CAACT,EAAE;QACzBS,QAAQ,CAACV,CAAC,IAAIU,QAAQ,CAACR,EAAE;;QAEzB;QACA,IAAIQ,QAAQ,CAACb,CAAC,GAAG,CAAC,IAAIa,QAAQ,CAACb,CAAC,GAAGhB,MAAM,CAACO,KAAK,EAAEsB,QAAQ,CAACT,EAAE,IAAI,CAAC,CAAC;QAClE,IAAIS,QAAQ,CAACV,CAAC,GAAG,CAAC,IAAIU,QAAQ,CAACV,CAAC,GAAGnB,MAAM,CAACU,MAAM,EAAEmB,QAAQ,CAACR,EAAE,IAAI,CAAC,CAAC;;QAEnE;QACAnB,GAAG,CAAC4B,SAAS,CAAC,CAAC;QACf5B,GAAG,CAAC6B,GAAG,CAACF,QAAQ,CAACb,CAAC,EAAEa,QAAQ,CAACV,CAAC,EAAEU,QAAQ,CAACP,MAAM,EAAE,CAAC,EAAEL,IAAI,CAACe,EAAE,GAAG,CAAC,CAAC;QAChE9B,GAAG,CAAC+B,SAAS,GAAGJ,QAAQ,CAACN,KAAK;QAC9BrB,GAAG,CAACgC,IAAI,CAAC,CAAC;;QAEV;QACA,IAAIlD,OAAO,KAAK,KAAK,EAAE;UACrBmD,aAAa,CAACN,QAAQ,EAAExB,SAAS,EAAEH,GAAG,EAAEW,aAAa,CAAC;QACxD,CAAC,MAAM;UACLuB,eAAe,CAACP,QAAQ,EAAExB,SAAS,EAAEH,GAAG,EAAEW,aAAa,CAAC;QAC1D;MACF,CAAC,CAAC;MAEFT,gBAAgB,GAAGiC,qBAAqB,CAACX,OAAO,CAAC;IACnD,CAAC;;IAED;IACA,MAAMU,eAAe,GAAGA,CAACP,QAAQ,EAAExB,SAAS,EAAEH,GAAG,EAAEoC,MAAM,KAAK;MAC5DjC,SAAS,CAACuB,OAAO,CAACW,KAAK,IAAI;QACzB,IAAIV,QAAQ,KAAKU,KAAK,EAAE;QAExB,MAAMC,EAAE,GAAGX,QAAQ,CAACb,CAAC,GAAGuB,KAAK,CAACvB,CAAC;QAC/B,MAAMyB,EAAE,GAAGZ,QAAQ,CAACV,CAAC,GAAGoB,KAAK,CAACpB,CAAC;QAC/B,MAAMuB,QAAQ,GAAGzB,IAAI,CAAC0B,IAAI,CAACH,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;QAE7C,IAAIC,QAAQ,GAAGJ,MAAM,CAAC/C,kBAAkB,EAAE;UACxCW,GAAG,CAAC4B,SAAS,CAAC,CAAC;UACf5B,GAAG,CAAC0C,MAAM,CAACf,QAAQ,CAACb,CAAC,EAAEa,QAAQ,CAACV,CAAC,CAAC;UAClCjB,GAAG,CAAC2C,MAAM,CAACN,KAAK,CAACvB,CAAC,EAAEuB,KAAK,CAACpB,CAAC,CAAC;UAC5BjB,GAAG,CAAC4C,WAAW,GAAG,GAAGjB,QAAQ,CAACN,KAAK,GAAGN,IAAI,CAACO,KAAK,CAAC,CAAC,CAAC,GAAGkB,QAAQ,GAAGJ,MAAM,CAAC/C,kBAAkB,IAAI,GAAG,CAAC,CAACwD,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;UAClI9C,GAAG,CAAC+C,SAAS,GAAG,GAAG;UACnB/C,GAAG,CAACgD,MAAM,CAAC,CAAC;QACd;MACF,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAMf,aAAa,GAAGA,CAACN,QAAQ,EAAExB,SAAS,EAAEH,GAAG,EAAEoC,MAAM,KAAK;MAC1D,MAAMa,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,KAAK;MAC/B,MAAMC,SAAS,GAAG,EAAE;MACpB,MAAMC,UAAU,GAAG,GAAG;MAEtBlD,SAAS,CAACuB,OAAO,CAACW,KAAK,IAAI;QACzB,IAAIV,QAAQ,KAAKU,KAAK,EAAE;QAExB,MAAMC,EAAE,GAAGX,QAAQ,CAACb,CAAC,GAAGuB,KAAK,CAACvB,CAAC;QAC/B,MAAMyB,EAAE,GAAGZ,QAAQ,CAACV,CAAC,GAAGoB,KAAK,CAACpB,CAAC;QAC/B,MAAMuB,QAAQ,GAAGzB,IAAI,CAAC0B,IAAI,CAACH,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;QAE7C,IAAIC,QAAQ,GAAGJ,MAAM,CAAC/C,kBAAkB,EAAE;UACxC,MAAMiE,KAAK,GAAGvC,IAAI,CAACwC,GAAG,CAAC,CAAC5B,QAAQ,CAACb,CAAC,GAAGmC,IAAI,GAAG,GAAG,IAAII,UAAU,CAAC,GAAGD,SAAS;UAC1E,MAAMI,KAAK,GAAGzC,IAAI,CAACwC,GAAG,CAAC,CAAClB,KAAK,CAACvB,CAAC,GAAGmC,IAAI,GAAG,GAAG,IAAII,UAAU,CAAC,GAAGD,SAAS;UAEvEpD,GAAG,CAAC4B,SAAS,CAAC,CAAC;UACf5B,GAAG,CAAC0C,MAAM,CAACf,QAAQ,CAACb,CAAC,EAAEa,QAAQ,CAACV,CAAC,GAAGqC,KAAK,CAAC;UAC1CtD,GAAG,CAAC2C,MAAM,CAACN,KAAK,CAACvB,CAAC,EAAEuB,KAAK,CAACpB,CAAC,GAAGuC,KAAK,CAAC;UACpCxD,GAAG,CAAC4C,WAAW,GAAG,GAAGjB,QAAQ,CAACN,KAAK,GAAGN,IAAI,CAACO,KAAK,CAAC,CAAC,CAAC,GAAGkB,QAAQ,GAAGJ,MAAM,CAAC/C,kBAAkB,IAAI,GAAG,CAAC,CAACwD,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;UAClI9C,GAAG,CAAC+C,SAAS,GAAG,GAAG;UACnB/C,GAAG,CAACgD,MAAM,CAAC,CAAC;QACd;MACF,CAAC,CAAC;IACJ,CAAC;IAEDxB,OAAO,CAAC,CAAC;IAET,OAAO,MAAM;MACXlB,MAAM,CAACmD,mBAAmB,CAAC,QAAQ,EAAErD,YAAY,CAAC;MAClDsD,oBAAoB,CAACxD,gBAAgB,CAAC;IACxC,CAAC;EACH,CAAC,EAAE,CAACpB,OAAO,EAAEG,QAAQ,CAAC,CAAC;EAEvB,oBACEL,OAAA;IACE+E,GAAG,EAAE3E,SAAU;IACf4E,SAAS,EAAC,4DAA4D;IACtEC,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAK;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEN,CAAC;AAACnF,EAAA,CA3KIF,iBAAiB;EAAA,QAEAH,QAAQ;AAAA;AAAAyF,EAAA,GAFzBtF,iBAAiB;AA6KvB,eAAeA,iBAAiB;AAAC,IAAAsF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}