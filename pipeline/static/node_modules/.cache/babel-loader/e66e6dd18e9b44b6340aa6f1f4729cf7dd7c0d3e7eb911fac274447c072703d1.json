{"ast":null,"code":"var _jsxFileName = \"D:\\\\Segmentation\\\\pipeline\\\\webapp\\\\static\\\\src\\\\components\\\\InteractiveViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { ArrowPathIcon, ExclamationCircleIcon } from '@heroicons/react/24/outline';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst InteractiveViewer = ({\n  caseId,\n  selectedNoduleId,\n  resultsPageView = false\n}) => {\n  _s();\n  const [volumeInfo, setVolumeInfo] = useState(null);\n  const [currentAxis, setCurrentAxis] = useState('axial');\n  const [currentSlice, setCurrentSlice] = useState(0);\n  const [sliceImage, setSliceImage] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [nodulesInSlice, setNodulesInSlice] = useState([]);\n  const imageRef = useRef(null);\n  const containerRef = useRef(null);\n  const {\n    darkMode\n  } = useTheme();\n\n  // Function to go to a specific nodule slice\n  const goToNoduleSlice = noduleId => {\n    if (!volumeInfo || !volumeInfo.nodules) return;\n\n    // Find the nodule by ID\n    const nodule = volumeInfo.nodules.find(n => n.id === noduleId);\n    if (!nodule) return;\n\n    // Set the axis to axial (z)\n    setCurrentAxis('axial');\n\n    // Set the slice to the nodule's z-coordinate\n    setCurrentSlice(Math.round(nodule.z));\n  };\n\n  // Navigate to selected nodule when selectedNoduleId or volumeInfo changes\n  useEffect(() => {\n    if (selectedNoduleId && volumeInfo && volumeInfo.nodules) {\n      goToNoduleSlice(selectedNoduleId);\n    }\n  }, [selectedNoduleId, volumeInfo]);\n\n  // Fetch volume metadata\n  useEffect(() => {\n    const fetchVolumeInfo = async () => {\n      try {\n        setIsLoading(true);\n        const response = await axios.get(`/api/results/${caseId}/slices`);\n        setVolumeInfo(response.data.volume_info);\n\n        // Check if we're using placeholder data\n        const usingPlaceholder = response.data.using_placeholder || false;\n        if (usingPlaceholder) {\n          console.warn('Using placeholder data for volume');\n        }\n\n        // Set initial slice to middle of volume\n        const initialSlice = Math.floor(response.data.volume_info.dimensions.depth / 2);\n        setCurrentSlice(initialSlice);\n\n        // If we're in a simplified view for the results page and there are nodules,\n        // try to show a slice with a nodule if possible\n        if (resultsPageView && response.data.volume_info.nodules && response.data.volume_info.nodules.length > 0) {\n          // Find the slice with the most confident nodule\n          const mainNodule = response.data.volume_info.nodules.reduce((prev, current) => current.confidence > prev.confidence ? current : prev, response.data.volume_info.nodules[0]);\n          // Ensure we're setting a valid number, not NaN\n          const noduleZ = Math.round(mainNodule.z);\n          if (!isNaN(noduleZ) && noduleZ >= 0 && noduleZ < response.data.volume_info.dimensions.depth) {\n            setCurrentSlice(noduleZ);\n          }\n        }\n        setIsLoading(false);\n      } catch (error) {\n        var _error$response, _error$response$data;\n        console.error('Error fetching volume info:', error);\n        setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to load volume data');\n        setIsLoading(false);\n      }\n    };\n    fetchVolumeInfo();\n  }, [caseId, resultsPageView]);\n\n  // Fetch slice when axis or slice index changes\n  useEffect(() => {\n    const fetchSlice = async () => {\n      if (!volumeInfo) return;\n      try {\n        setIsLoading(true);\n        const response = await axios.get(`/api/results/${caseId}/slices/${currentAxis}/${currentSlice}`);\n\n        // Check if we received a placeholder image\n        const isPlaceholder = response.data.is_placeholder || false;\n\n        // Get the slice data, handling whether it includes the data:image prefix or not\n        let imageData = response.data.slice_data;\n        if (!imageData.startsWith('data:image')) {\n          imageData = `data:image/png;base64,${imageData}`;\n        }\n        setSliceImage({\n          data: imageData,\n          isPlaceholder: isPlaceholder\n        });\n        setIsLoading(false);\n      } catch (error) {\n        var _error$response2, _error$response2$data;\n        console.error('Error fetching slice:', error);\n        setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to load slice');\n        setIsLoading(false);\n      }\n    };\n    fetchSlice();\n  }, [caseId, currentAxis, currentSlice, volumeInfo]);\n\n  // Find nodules in the current slice\n  useEffect(() => {\n    if (!volumeInfo || !volumeInfo.nodules) return;\n\n    // Determine which nodules are visible in this slice\n    const sliceNodules = volumeInfo.nodules.filter(nodule => {\n      // Check if this nodule is visible in the current slice\n      if (currentAxis === 'axial') {\n        // Check if the nodule's z-coordinate is close to this slice\n        return Math.abs(nodule.z - currentSlice) <= nodule.radius;\n      } else if (currentAxis === 'coronal') {\n        // Check if the nodule's y-coordinate is close to this slice\n        return Math.abs(nodule.y - currentSlice) <= nodule.radius;\n      } else {\n        // sagittal\n        // Check if the nodule's x-coordinate is close to this slice\n        return Math.abs(nodule.x - currentSlice) <= nodule.radius;\n      }\n    });\n    setNodulesInSlice(sliceNodules);\n  }, [volumeInfo, currentAxis, currentSlice]);\n\n  // Draw nodule circles and center points when image loads or nodulesInSlice changes\n  useEffect(() => {\n    if (!sliceImage || !imageRef.current || nodulesInSlice.length === 0) return;\n    const drawNodules = () => {\n      const img = imageRef.current;\n      if (!img.complete) {\n        // Wait for image to load before drawing\n        img.onload = drawNodulesOnImage;\n        return;\n      }\n      drawNodulesOnImage();\n    };\n    const drawNodulesOnImage = () => {\n      const img = imageRef.current;\n      const container = containerRef.current;\n\n      // Clear any existing overlay elements\n      const existingOverlay = container.querySelector('.nodule-overlay');\n      if (existingOverlay) {\n        container.removeChild(existingOverlay);\n      }\n\n      // Create overlay div that will contain the SVG with nodule circles\n      const overlay = document.createElement('div');\n      overlay.className = 'nodule-overlay';\n      overlay.style.position = 'absolute';\n      overlay.style.top = '0';\n      overlay.style.left = '0';\n      overlay.style.width = '100%';\n      overlay.style.height = '100%';\n      overlay.style.pointerEvents = 'none';\n\n      // Calculate image display dimensions and position\n      const imgRect = img.getBoundingClientRect();\n      const containerRect = container.getBoundingClientRect();\n\n      // Calculate aspect ratio for the current view\n      let aspectRatio = 1.0;\n      if (volumeInfo && volumeInfo.spacing) {\n        if (currentAxis === 'axial') {\n          // Y/X aspect ratio for axial view\n          aspectRatio = volumeInfo.spacing[1] / volumeInfo.spacing[0];\n        } else if (currentAxis === 'coronal') {\n          // Z/X aspect ratio for coronal view\n          aspectRatio = volumeInfo.spacing[2] / volumeInfo.spacing[0];\n        } else {\n          // sagittal\n          // Z/Y aspect ratio for sagittal view\n          aspectRatio = volumeInfo.spacing[2] / volumeInfo.spacing[1];\n        }\n      }\n\n      // Create SVG element for drawing\n      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n      svg.setAttribute('width', '100%');\n      svg.setAttribute('height', '100%');\n      svg.style.position = 'absolute';\n      svg.style.top = '0';\n      svg.style.left = '0';\n\n      // Get display dimensions for scaling\n      const displayWidth = imgRect.width;\n      const displayHeight = imgRect.height;\n\n      // Draw each nodule\n      nodulesInSlice.forEach(nodule => {\n        let x, y, slicePos;\n\n        // Calculate 2D coordinates based on the current viewing axis\n        if (currentAxis === 'axial') {\n          x = nodule.x;\n          y = nodule.y;\n          slicePos = currentSlice;\n        } else if (currentAxis === 'coronal') {\n          x = nodule.x;\n          y = nodule.z;\n          slicePos = currentSlice;\n        } else {\n          // sagittal\n          x = nodule.y;\n          y = nodule.z;\n          slicePos = currentSlice;\n        }\n\n        // Calculate the position in normalized coordinates (0-1 range)\n        let xNorm, yNorm;\n        if (currentAxis === 'axial') {\n          xNorm = x / volumeInfo.dimensions.width;\n          yNorm = y / volumeInfo.dimensions.height;\n        } else if (currentAxis === 'coronal') {\n          xNorm = x / volumeInfo.dimensions.width;\n          yNorm = y / volumeInfo.dimensions.depth;\n        } else {\n          // sagittal\n          xNorm = y / volumeInfo.dimensions.height;\n          yNorm = nodule.z / volumeInfo.dimensions.depth;\n        }\n\n        // Apply proper scaling for the current view resolution\n        // Convert from normalized coordinates to display pixels\n        const xPx = xNorm * displayWidth;\n\n        // Apply aspect ratio correction to y-coordinate\n        // This ensures that the nodule appears at the right vertical position\n        // regardless of how the image is stretched or squeezed\n        const yPx = yNorm * displayHeight;\n\n        // Calculate radius in pixels based on the nodule's radius in mm\n        // Scale according to the current display size\n        let radiusMm = nodule.radius || 5; // Default to 5mm if not specified\n        let pixelsPerMm;\n\n        // Calculate pixels per mm based on the current view's spacing\n        if (currentAxis === 'axial') {\n          // Use the minimum of width and height spacing for consistent sizing\n          const spacingX = volumeInfo.spacing ? volumeInfo.spacing[0] : 1;\n          const spacingY = volumeInfo.spacing ? volumeInfo.spacing[1] : 1;\n          const mmPerPixel = Math.min(spacingX, spacingY);\n          // Calculate how many display pixels correspond to one mm in the CT scan\n          const widthInMm = volumeInfo.dimensions.width * spacingX;\n          pixelsPerMm = displayWidth / widthInMm;\n        } else if (currentAxis === 'coronal') {\n          const spacingX = volumeInfo.spacing ? volumeInfo.spacing[0] : 1;\n          const spacingZ = volumeInfo.spacing ? volumeInfo.spacing[2] : 1;\n          const mmPerPixel = Math.min(spacingX, spacingZ);\n          // Calculate how many display pixels correspond to one mm in the CT scan\n          const widthInMm = volumeInfo.dimensions.width * spacingX;\n          pixelsPerMm = displayWidth / widthInMm;\n        } else {\n          // sagittal\n          const spacingY = volumeInfo.spacing ? volumeInfo.spacing[1] : 1;\n          const spacingZ = volumeInfo.spacing ? volumeInfo.spacing[2] : 1;\n          const mmPerPixel = Math.min(spacingY, spacingZ);\n          // Calculate how many display pixels correspond to one mm in the CT scan\n          const heightInMm = volumeInfo.dimensions.height * spacingY;\n          pixelsPerMm = displayHeight / heightInMm;\n        }\n\n        // Calculate the radius in display pixels\n        let radiusPixels = radiusMm * pixelsPerMm;\n\n        // Make circles more appropriately sized for visualization\n        radiusPixels = Math.max(5, radiusPixels * 0.5); // Minimum 5px radius for visibility\n\n        // Adjust the radius based on how far the nodule is from the current slice\n        let distanceFromSlice;\n        if (currentAxis === 'axial') {\n          distanceFromSlice = Math.abs(nodule.z - slicePos);\n        } else if (currentAxis === 'coronal') {\n          distanceFromSlice = Math.abs(nodule.y - slicePos);\n        } else {\n          // sagittal\n          distanceFromSlice = Math.abs(nodule.x - slicePos);\n        }\n\n        // Calculate the nodule color based on confidence\n        const color = getNoduleColor(nodule.confidence);\n\n        // Create circle element for nodule outline\n        const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        circle.setAttribute('cx', xPx);\n        circle.setAttribute('cy', yPx);\n        circle.setAttribute('r', radiusPixels);\n        circle.setAttribute('fill', 'none');\n        circle.setAttribute('stroke', color);\n        circle.setAttribute('stroke-width', '2');\n\n        // Create dot element for center point\n        const centerDot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        centerDot.setAttribute('cx', xPx);\n        centerDot.setAttribute('cy', yPx);\n        centerDot.setAttribute('r', '3');\n        centerDot.setAttribute('fill', color);\n\n        // Highlight selected nodule with a thicker stroke\n        if (selectedNoduleId === nodule.id) {\n          circle.setAttribute('stroke-width', '3');\n          circle.setAttribute('stroke-dasharray', '5,3');\n        }\n        svg.appendChild(circle);\n        svg.appendChild(centerDot);\n      });\n      overlay.appendChild(svg);\n      container.appendChild(overlay);\n    };\n    drawNodules();\n\n    // Cleanup function\n    return () => {\n      const container = containerRef.current;\n      if (container) {\n        const overlay = container.querySelector('.nodule-overlay');\n        if (overlay) {\n          container.removeChild(overlay);\n        }\n      }\n    };\n  }, [sliceImage, nodulesInSlice, currentAxis, selectedNoduleId, volumeInfo]);\n\n  // Get max slice index for current axis\n  const getMaxSliceIndex = () => {\n    if (!volumeInfo) return 0;\n    if (currentAxis === 'axial') {\n      return volumeInfo.dimensions.depth - 1;\n    } else if (currentAxis === 'coronal') {\n      return volumeInfo.dimensions.height - 1;\n    } else {\n      // sagittal\n      return volumeInfo.dimensions.width - 1;\n    }\n  };\n  const handleAxisChange = axis => {\n    setCurrentAxis(axis);\n    // Reset to middle slice when changing axis\n    if (!volumeInfo) return;\n    let middle;\n    if (axis === 'axial') {\n      middle = Math.floor(volumeInfo.dimensions.depth / 2);\n    } else if (axis === 'coronal') {\n      middle = Math.floor(volumeInfo.dimensions.height / 2);\n    } else {\n      // sagittal\n      middle = Math.floor(volumeInfo.dimensions.width / 2);\n    }\n\n    // Ensure we're setting a valid number, not NaN\n    if (!isNaN(middle) && middle >= 0) {\n      setCurrentSlice(middle);\n    }\n  };\n  const handleSliceChange = e => {\n    const value = parseInt(e.target.value, 10);\n    // Validate before setting\n    if (!isNaN(value) && value >= 0 && value <= getMaxSliceIndex()) {\n      setCurrentSlice(value);\n    }\n  };\n\n  // Track which slices have nodules to highlight them on the slider\n  const slicesWithNodules = () => {\n    if (!volumeInfo || !volumeInfo.nodules) return [];\n    const noduleSlices = new Set();\n    volumeInfo.nodules.forEach(nodule => {\n      if (currentAxis === 'axial') {\n        // Mark all slices within the nodule's radius\n        const start = Math.max(0, Math.floor(nodule.z - nodule.radius));\n        const end = Math.min(volumeInfo.dimensions.depth - 1, Math.ceil(nodule.z + nodule.radius));\n        for (let i = start; i <= end; i++) {\n          noduleSlices.add(i);\n        }\n      } else if (currentAxis === 'coronal') {\n        const start = Math.max(0, Math.floor(nodule.y - nodule.radius));\n        const end = Math.min(volumeInfo.dimensions.height - 1, Math.ceil(nodule.y + nodule.radius));\n        for (let i = start; i <= end; i++) {\n          noduleSlices.add(i);\n        }\n      } else {\n        // sagittal\n        const start = Math.max(0, Math.floor(nodule.x - nodule.radius));\n        const end = Math.min(volumeInfo.dimensions.width - 1, Math.ceil(nodule.x + nodule.radius));\n        for (let i = start; i <= end; i++) {\n          noduleSlices.add(i);\n        }\n      }\n    });\n    return Array.from(noduleSlices);\n  };\n\n  // Nodule colors for different confidence levels\n  const getNoduleColor = confidence => {\n    if (confidence >= 0.8) return 'rgba(220, 38, 38, 0.8)'; // Red for high confidence\n    if (confidence >= 0.6) return 'rgba(234, 88, 12, 0.8)'; // Orange for medium confidence\n    return 'rgba(234, 179, 8, 0.8)'; // Yellow for lower confidence\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative w-full h-full\",\n    ref: containerRef,\n    children: resultsPageView ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-center w-full h-full bg-gray-200\",\n        children: /*#__PURE__*/_jsxDEV(ArrowPathIcon, {\n          className: \"h-8 w-8 animate-spin text-gray-400\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 13\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-center w-full h-full bg-gray-200\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center p-4\",\n          children: [/*#__PURE__*/_jsxDEV(ExclamationCircleIcon, {\n            className: \"h-8 w-8 mx-auto mb-2 text-red-500\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-600\",\n            children: \"Error loading scan\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 13\n      }, this) : sliceImage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full h-full overflow-hidden relative\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          ref: imageRef,\n          src: sliceImage.data,\n          alt: `Axial view of scan ${caseId}`,\n          className: \"object-cover w-full h-full\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 15\n        }, this), sliceImage.isPlaceholder && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute bottom-0 left-0 right-0 bg-red-500 bg-opacity-70 text-white text-center py-1 text-sm\",\n          children: \"Placeholder Image - Scan Data Unavailable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-center w-full h-full bg-gray-200\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-500\",\n          children: \"No image available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 13\n      }, this)\n    }, void 0, false) :\n    /*#__PURE__*/\n    // Original interactive viewer with all controls for the detail page\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `absolute top-2 left-2 z-10 rounded-lg shadow-md ${darkMode ? 'bg-gray-800' : 'bg-white'}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex p-1 space-x-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAxisChange('axial'),\n            className: `px-3 py-1.5 text-xs font-medium rounded-md ${currentAxis === 'axial' ? darkMode ? 'bg-indigo-600 text-white' : 'bg-indigo-100 text-indigo-700' : darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'}`,\n            children: \"Axial\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAxisChange('coronal'),\n            className: `px-3 py-1.5 text-xs font-medium rounded-md ${currentAxis === 'coronal' ? darkMode ? 'bg-indigo-600 text-white' : 'bg-indigo-100 text-indigo-700' : darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'}`,\n            children: \"Coronal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAxisChange('sagittal'),\n            className: `px-3 py-1.5 text-xs font-medium rounded-md ${currentAxis === 'sagittal' ? darkMode ? 'bg-indigo-600 text-white' : 'bg-indigo-100 text-indigo-700' : darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'}`,\n            children: \"Sagittal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `absolute bottom-2 left-1/2 transform -translate-x-1/2 z-10 p-2 rounded-lg shadow-md ${darkMode ? 'bg-gray-800' : 'bg-white'}`,\n        style: {\n          width: '90%',\n          maxWidth: '400px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: getMaxSliceIndex(),\n          value: currentSlice,\n          onChange: handleSliceChange,\n          className: \"w-full h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between text-xs mt-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: darkMode ? 'text-gray-400' : 'text-gray-500',\n            children: [\"Slice: \", currentSlice + 1, \"/\", getMaxSliceIndex() + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: darkMode ? 'text-gray-400' : 'text-gray-500',\n            children: [slicesWithNodules().includes(currentSlice) ? '🔴 Nodule present' : '', sliceImage && sliceImage.isPlaceholder ? '⚠️ Placeholder' : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full h-full relative\",\n        children: sliceImage ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative w-full h-full\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            ref: imageRef,\n            src: sliceImage.data,\n            alt: `${currentAxis.charAt(0).toUpperCase() + currentAxis.slice(1)} slice of CT scan`,\n            className: \"w-full h-full object-contain\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 17\n          }, this), sliceImage.isPlaceholder && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute bottom-0 left-0 right-0 bg-red-500 bg-opacity-70 text-white text-center py-1 text-sm\",\n            children: \"Placeholder Image - Scan Data Unavailable\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-center w-full h-full bg-gray-200\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500\",\n            children: \"No image available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 421,\n    columnNumber: 5\n  }, this);\n};\n_s(InteractiveViewer, \"pAHi5wIvULDSVn08OhTsDk/TEzA=\", false, function () {\n  return [useTheme];\n});\n_c = InteractiveViewer;\nexport default InteractiveViewer;\nvar _c;\n$RefreshReg$(_c, \"InteractiveViewer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","ArrowPathIcon","ExclamationCircleIcon","useTheme","jsxDEV","_jsxDEV","Fragment","_Fragment","InteractiveViewer","caseId","selectedNoduleId","resultsPageView","_s","volumeInfo","setVolumeInfo","currentAxis","setCurrentAxis","currentSlice","setCurrentSlice","sliceImage","setSliceImage","isLoading","setIsLoading","error","setError","nodulesInSlice","setNodulesInSlice","imageRef","containerRef","darkMode","goToNoduleSlice","noduleId","nodules","nodule","find","n","id","Math","round","z","fetchVolumeInfo","response","get","data","volume_info","usingPlaceholder","using_placeholder","console","warn","initialSlice","floor","dimensions","depth","length","mainNodule","reduce","prev","current","confidence","noduleZ","isNaN","_error$response","_error$response$data","message","fetchSlice","isPlaceholder","is_placeholder","imageData","slice_data","startsWith","_error$response2","_error$response2$data","sliceNodules","filter","abs","radius","y","x","drawNodules","img","complete","onload","drawNodulesOnImage","container","existingOverlay","querySelector","removeChild","overlay","document","createElement","className","style","position","top","left","width","height","pointerEvents","imgRect","getBoundingClientRect","containerRect","aspectRatio","spacing","svg","createElementNS","setAttribute","displayWidth","displayHeight","forEach","slicePos","xNorm","yNorm","xPx","yPx","radiusMm","pixelsPerMm","spacingX","spacingY","mmPerPixel","min","widthInMm","spacingZ","heightInMm","radiusPixels","max","distanceFromSlice","color","getNoduleColor","circle","centerDot","appendChild","getMaxSliceIndex","handleAxisChange","axis","middle","handleSliceChange","e","value","parseInt","target","slicesWithNodules","noduleSlices","Set","start","end","ceil","i","add","Array","from","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onClick","maxWidth","type","onChange","includes","charAt","toUpperCase","slice","_c","$RefreshReg$"],"sources":["D:/Segmentation/pipeline/webapp/static/src/components/InteractiveViewer.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { ArrowPathIcon, ExclamationCircleIcon } from '@heroicons/react/24/outline';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\n\r\nconst InteractiveViewer = ({ caseId, selectedNoduleId, resultsPageView = false }) => {\r\n  const [volumeInfo, setVolumeInfo] = useState(null);\r\n  const [currentAxis, setCurrentAxis] = useState('axial');\r\n  const [currentSlice, setCurrentSlice] = useState(0);\r\n  const [sliceImage, setSliceImage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [nodulesInSlice, setNodulesInSlice] = useState([]);\r\n  const imageRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n  const { darkMode } = useTheme();\r\n\r\n  // Function to go to a specific nodule slice\r\n  const goToNoduleSlice = (noduleId) => {\r\n    if (!volumeInfo || !volumeInfo.nodules) return;\r\n    \r\n    // Find the nodule by ID\r\n    const nodule = volumeInfo.nodules.find(n => n.id === noduleId);\r\n    if (!nodule) return;\r\n    \r\n    // Set the axis to axial (z)\r\n    setCurrentAxis('axial');\r\n    \r\n    // Set the slice to the nodule's z-coordinate\r\n    setCurrentSlice(Math.round(nodule.z));\r\n  };\r\n\r\n  // Navigate to selected nodule when selectedNoduleId or volumeInfo changes\r\n  useEffect(() => {\r\n    if (selectedNoduleId && volumeInfo && volumeInfo.nodules) {\r\n      goToNoduleSlice(selectedNoduleId);\r\n    }\r\n  }, [selectedNoduleId, volumeInfo]);\r\n\r\n  // Fetch volume metadata\r\n  useEffect(() => {\r\n    const fetchVolumeInfo = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const response = await axios.get(`/api/results/${caseId}/slices`);\r\n        setVolumeInfo(response.data.volume_info);\r\n        \r\n        // Check if we're using placeholder data\r\n        const usingPlaceholder = response.data.using_placeholder || false;\r\n        if (usingPlaceholder) {\r\n          console.warn('Using placeholder data for volume');\r\n        }\r\n        \r\n        // Set initial slice to middle of volume\r\n        const initialSlice = Math.floor(response.data.volume_info.dimensions.depth / 2);\r\n        setCurrentSlice(initialSlice);\r\n\r\n        // If we're in a simplified view for the results page and there are nodules,\r\n        // try to show a slice with a nodule if possible\r\n        if (resultsPageView && response.data.volume_info.nodules && response.data.volume_info.nodules.length > 0) {\r\n          // Find the slice with the most confident nodule\r\n          const mainNodule = response.data.volume_info.nodules.reduce(\r\n            (prev, current) => (current.confidence > prev.confidence) ? current : prev,\r\n            response.data.volume_info.nodules[0]\r\n          );\r\n          // Ensure we're setting a valid number, not NaN\r\n          const noduleZ = Math.round(mainNodule.z);\r\n          if (!isNaN(noduleZ) && noduleZ >= 0 && noduleZ < response.data.volume_info.dimensions.depth) {\r\n            setCurrentSlice(noduleZ);\r\n          }\r\n        }\r\n        \r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching volume info:', error);\r\n        setError(error.response?.data?.message || 'Failed to load volume data');\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchVolumeInfo();\r\n  }, [caseId, resultsPageView]);\r\n\r\n  // Fetch slice when axis or slice index changes\r\n  useEffect(() => {\r\n    const fetchSlice = async () => {\r\n      if (!volumeInfo) return;\r\n      \r\n      try {\r\n        setIsLoading(true);\r\n        const response = await axios.get(`/api/results/${caseId}/slices/${currentAxis}/${currentSlice}`);\r\n        \r\n        // Check if we received a placeholder image\r\n        const isPlaceholder = response.data.is_placeholder || false;\r\n        \r\n        // Get the slice data, handling whether it includes the data:image prefix or not\r\n        let imageData = response.data.slice_data;\r\n        if (!imageData.startsWith('data:image')) {\r\n          imageData = `data:image/png;base64,${imageData}`;\r\n        }\r\n        \r\n        setSliceImage({\r\n          data: imageData,\r\n          isPlaceholder: isPlaceholder\r\n        });\r\n        \r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching slice:', error);\r\n        setError(error.response?.data?.message || 'Failed to load slice');\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchSlice();\r\n  }, [caseId, currentAxis, currentSlice, volumeInfo]);\r\n\r\n  // Find nodules in the current slice\r\n  useEffect(() => {\r\n    if (!volumeInfo || !volumeInfo.nodules) return;\r\n    \r\n    // Determine which nodules are visible in this slice\r\n    const sliceNodules = volumeInfo.nodules.filter(nodule => {\r\n      // Check if this nodule is visible in the current slice\r\n      if (currentAxis === 'axial') {\r\n        // Check if the nodule's z-coordinate is close to this slice\r\n        return Math.abs(nodule.z - currentSlice) <= nodule.radius;\r\n      } else if (currentAxis === 'coronal') {\r\n        // Check if the nodule's y-coordinate is close to this slice\r\n        return Math.abs(nodule.y - currentSlice) <= nodule.radius;\r\n      } else { // sagittal\r\n        // Check if the nodule's x-coordinate is close to this slice\r\n        return Math.abs(nodule.x - currentSlice) <= nodule.radius;\r\n      }\r\n    });\r\n    \r\n    setNodulesInSlice(sliceNodules);\r\n  }, [volumeInfo, currentAxis, currentSlice]);\r\n\r\n  // Draw nodule circles and center points when image loads or nodulesInSlice changes\r\n  useEffect(() => {\r\n    if (!sliceImage || !imageRef.current || nodulesInSlice.length === 0) return;\r\n\r\n    const drawNodules = () => {\r\n      const img = imageRef.current;\r\n      if (!img.complete) {\r\n        // Wait for image to load before drawing\r\n        img.onload = drawNodulesOnImage;\r\n        return;\r\n      }\r\n      \r\n      drawNodulesOnImage();\r\n    };\r\n\r\n    const drawNodulesOnImage = () => {\r\n      const img = imageRef.current;\r\n      const container = containerRef.current;\r\n      \r\n      // Clear any existing overlay elements\r\n      const existingOverlay = container.querySelector('.nodule-overlay');\r\n      if (existingOverlay) {\r\n        container.removeChild(existingOverlay);\r\n      }\r\n      \r\n      // Create overlay div that will contain the SVG with nodule circles\r\n      const overlay = document.createElement('div');\r\n      overlay.className = 'nodule-overlay';\r\n      overlay.style.position = 'absolute';\r\n      overlay.style.top = '0';\r\n      overlay.style.left = '0';\r\n      overlay.style.width = '100%';\r\n      overlay.style.height = '100%';\r\n      overlay.style.pointerEvents = 'none';\r\n      \r\n      // Calculate image display dimensions and position\r\n      const imgRect = img.getBoundingClientRect();\r\n      const containerRect = container.getBoundingClientRect();\r\n      \r\n      // Calculate aspect ratio for the current view\r\n      let aspectRatio = 1.0;\r\n      if (volumeInfo && volumeInfo.spacing) {\r\n        if (currentAxis === 'axial') {\r\n          // Y/X aspect ratio for axial view\r\n          aspectRatio = volumeInfo.spacing[1] / volumeInfo.spacing[0];\r\n        } else if (currentAxis === 'coronal') {\r\n          // Z/X aspect ratio for coronal view\r\n          aspectRatio = volumeInfo.spacing[2] / volumeInfo.spacing[0];\r\n        } else { // sagittal\r\n          // Z/Y aspect ratio for sagittal view\r\n          aspectRatio = volumeInfo.spacing[2] / volumeInfo.spacing[1];\r\n        }\r\n      }\r\n      \r\n      // Create SVG element for drawing\r\n      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\r\n      svg.setAttribute('width', '100%');\r\n      svg.setAttribute('height', '100%');\r\n      svg.style.position = 'absolute';\r\n      svg.style.top = '0';\r\n      svg.style.left = '0';\r\n      \r\n      // Get display dimensions for scaling\r\n      const displayWidth = imgRect.width;\r\n      const displayHeight = imgRect.height;\r\n      \r\n      // Draw each nodule\r\n      nodulesInSlice.forEach(nodule => {\r\n        let x, y, slicePos;\r\n        \r\n        // Calculate 2D coordinates based on the current viewing axis\r\n        if (currentAxis === 'axial') {\r\n          x = nodule.x;\r\n          y = nodule.y;\r\n          slicePos = currentSlice;\r\n        } else if (currentAxis === 'coronal') {\r\n          x = nodule.x;\r\n          y = nodule.z;\r\n          slicePos = currentSlice;\r\n        } else { // sagittal\r\n          x = nodule.y;\r\n          y = nodule.z;\r\n          slicePos = currentSlice;\r\n        }\r\n        \r\n        // Calculate the position in normalized coordinates (0-1 range)\r\n        let xNorm, yNorm;\r\n        \r\n        if (currentAxis === 'axial') {\r\n          xNorm = x / volumeInfo.dimensions.width;\r\n          yNorm = y / volumeInfo.dimensions.height;\r\n        } else if (currentAxis === 'coronal') {\r\n          xNorm = x / volumeInfo.dimensions.width;\r\n          yNorm = y / volumeInfo.dimensions.depth;\r\n        } else { // sagittal\r\n          xNorm = y / volumeInfo.dimensions.height;\r\n          yNorm = nodule.z / volumeInfo.dimensions.depth;\r\n        }\r\n        \r\n        // Apply proper scaling for the current view resolution\r\n        // Convert from normalized coordinates to display pixels\r\n        const xPx = xNorm * displayWidth;\r\n        \r\n        // Apply aspect ratio correction to y-coordinate\r\n        // This ensures that the nodule appears at the right vertical position\r\n        // regardless of how the image is stretched or squeezed\r\n        const yPx = yNorm * displayHeight;\r\n        \r\n        // Calculate radius in pixels based on the nodule's radius in mm\r\n        // Scale according to the current display size\r\n        let radiusMm = nodule.radius || 5; // Default to 5mm if not specified\r\n        let pixelsPerMm;\r\n        \r\n        // Calculate pixels per mm based on the current view's spacing\r\n        if (currentAxis === 'axial') {\r\n          // Use the minimum of width and height spacing for consistent sizing\r\n          const spacingX = volumeInfo.spacing ? volumeInfo.spacing[0] : 1;\r\n          const spacingY = volumeInfo.spacing ? volumeInfo.spacing[1] : 1;\r\n          const mmPerPixel = Math.min(spacingX, spacingY);\r\n          // Calculate how many display pixels correspond to one mm in the CT scan\r\n          const widthInMm = volumeInfo.dimensions.width * spacingX;\r\n          pixelsPerMm = displayWidth / widthInMm;\r\n        } else if (currentAxis === 'coronal') {\r\n          const spacingX = volumeInfo.spacing ? volumeInfo.spacing[0] : 1;\r\n          const spacingZ = volumeInfo.spacing ? volumeInfo.spacing[2] : 1;\r\n          const mmPerPixel = Math.min(spacingX, spacingZ);\r\n          // Calculate how many display pixels correspond to one mm in the CT scan\r\n          const widthInMm = volumeInfo.dimensions.width * spacingX;\r\n          pixelsPerMm = displayWidth / widthInMm;\r\n        } else { // sagittal\r\n          const spacingY = volumeInfo.spacing ? volumeInfo.spacing[1] : 1;\r\n          const spacingZ = volumeInfo.spacing ? volumeInfo.spacing[2] : 1;\r\n          const mmPerPixel = Math.min(spacingY, spacingZ);\r\n          // Calculate how many display pixels correspond to one mm in the CT scan\r\n          const heightInMm = volumeInfo.dimensions.height * spacingY;\r\n          pixelsPerMm = displayHeight / heightInMm;\r\n        }\r\n        \r\n        // Calculate the radius in display pixels\r\n        let radiusPixels = radiusMm * pixelsPerMm;\r\n        \r\n        // Make circles more appropriately sized for visualization\r\n        radiusPixels = Math.max(5, radiusPixels * 0.5); // Minimum 5px radius for visibility\r\n        \r\n        // Adjust the radius based on how far the nodule is from the current slice\r\n        let distanceFromSlice;\r\n        if (currentAxis === 'axial') {\r\n          distanceFromSlice = Math.abs(nodule.z - slicePos);\r\n        } else if (currentAxis === 'coronal') {\r\n          distanceFromSlice = Math.abs(nodule.y - slicePos);\r\n        } else { // sagittal\r\n          distanceFromSlice = Math.abs(nodule.x - slicePos);\r\n        }\r\n        \r\n        // Calculate the nodule color based on confidence\r\n        const color = getNoduleColor(nodule.confidence);\r\n        \r\n        // Create circle element for nodule outline\r\n        const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n        circle.setAttribute('cx', xPx);\r\n        circle.setAttribute('cy', yPx);\r\n        circle.setAttribute('r', radiusPixels);\r\n        circle.setAttribute('fill', 'none');\r\n        circle.setAttribute('stroke', color);\r\n        circle.setAttribute('stroke-width', '2');\r\n        \r\n        // Create dot element for center point\r\n        const centerDot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n        centerDot.setAttribute('cx', xPx);\r\n        centerDot.setAttribute('cy', yPx);\r\n        centerDot.setAttribute('r', '3');\r\n        centerDot.setAttribute('fill', color);\r\n        \r\n        // Highlight selected nodule with a thicker stroke\r\n        if (selectedNoduleId === nodule.id) {\r\n          circle.setAttribute('stroke-width', '3');\r\n          circle.setAttribute('stroke-dasharray', '5,3');\r\n        }\r\n        \r\n        svg.appendChild(circle);\r\n        svg.appendChild(centerDot);\r\n      });\r\n      \r\n      overlay.appendChild(svg);\r\n      container.appendChild(overlay);\r\n    };\r\n\r\n    drawNodules();\r\n    \r\n    // Cleanup function\r\n    return () => {\r\n      const container = containerRef.current;\r\n      if (container) {\r\n        const overlay = container.querySelector('.nodule-overlay');\r\n        if (overlay) {\r\n          container.removeChild(overlay);\r\n        }\r\n      }\r\n    };\r\n  }, [sliceImage, nodulesInSlice, currentAxis, selectedNoduleId, volumeInfo]);\r\n\r\n  // Get max slice index for current axis\r\n  const getMaxSliceIndex = () => {\r\n    if (!volumeInfo) return 0;\r\n    \r\n    if (currentAxis === 'axial') {\r\n      return volumeInfo.dimensions.depth - 1;\r\n    } else if (currentAxis === 'coronal') {\r\n      return volumeInfo.dimensions.height - 1;\r\n    } else { // sagittal\r\n      return volumeInfo.dimensions.width - 1;\r\n    }\r\n  };\r\n\r\n  const handleAxisChange = (axis) => {\r\n    setCurrentAxis(axis);\r\n    // Reset to middle slice when changing axis\r\n    if (!volumeInfo) return;\r\n    \r\n    let middle;\r\n    if (axis === 'axial') {\r\n      middle = Math.floor(volumeInfo.dimensions.depth / 2);\r\n    } else if (axis === 'coronal') {\r\n      middle = Math.floor(volumeInfo.dimensions.height / 2);\r\n    } else { // sagittal\r\n      middle = Math.floor(volumeInfo.dimensions.width / 2);\r\n    }\r\n    \r\n    // Ensure we're setting a valid number, not NaN\r\n    if (!isNaN(middle) && middle >= 0) {\r\n      setCurrentSlice(middle);\r\n    }\r\n  };\r\n\r\n  const handleSliceChange = (e) => {\r\n    const value = parseInt(e.target.value, 10);\r\n    // Validate before setting\r\n    if (!isNaN(value) && value >= 0 && value <= getMaxSliceIndex()) {\r\n      setCurrentSlice(value);\r\n    }\r\n  };\r\n\r\n  // Track which slices have nodules to highlight them on the slider\r\n  const slicesWithNodules = () => {\r\n    if (!volumeInfo || !volumeInfo.nodules) return [];\r\n    \r\n    const noduleSlices = new Set();\r\n    volumeInfo.nodules.forEach(nodule => {\r\n      if (currentAxis === 'axial') {\r\n        // Mark all slices within the nodule's radius\r\n        const start = Math.max(0, Math.floor(nodule.z - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.depth - 1, Math.ceil(nodule.z + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      } else if (currentAxis === 'coronal') {\r\n        const start = Math.max(0, Math.floor(nodule.y - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.height - 1, Math.ceil(nodule.y + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      } else { // sagittal\r\n        const start = Math.max(0, Math.floor(nodule.x - nodule.radius));\r\n        const end = Math.min(volumeInfo.dimensions.width - 1, Math.ceil(nodule.x + nodule.radius));\r\n        for (let i = start; i <= end; i++) {\r\n          noduleSlices.add(i);\r\n        }\r\n      }\r\n    });\r\n    \r\n    return Array.from(noduleSlices);\r\n  };\r\n\r\n  // Nodule colors for different confidence levels\r\n  const getNoduleColor = (confidence) => {\r\n    if (confidence >= 0.8) return 'rgba(220, 38, 38, 0.8)';  // Red for high confidence\r\n    if (confidence >= 0.6) return 'rgba(234, 88, 12, 0.8)';  // Orange for medium confidence\r\n    return 'rgba(234, 179, 8, 0.8)';  // Yellow for lower confidence\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative w-full h-full\" ref={containerRef}>\r\n      {/* If in results page mode, only show the image without controls */}\r\n      {resultsPageView ? (\r\n        <>\r\n          {isLoading ? (\r\n            <div className=\"flex items-center justify-center w-full h-full bg-gray-200\">\r\n              <ArrowPathIcon className=\"h-8 w-8 animate-spin text-gray-400\" />\r\n            </div>\r\n          ) : error ? (\r\n            <div className=\"flex items-center justify-center w-full h-full bg-gray-200\">\r\n              <div className=\"text-center p-4\">\r\n                <ExclamationCircleIcon className=\"h-8 w-8 mx-auto mb-2 text-red-500\" />\r\n                <p className=\"text-sm text-gray-600\">Error loading scan</p>\r\n              </div>\r\n            </div>\r\n          ) : sliceImage ? (\r\n            <div className=\"w-full h-full overflow-hidden relative\">\r\n              <img \r\n                ref={imageRef}\r\n                src={sliceImage.data} \r\n                alt={`Axial view of scan ${caseId}`}\r\n                className=\"object-cover w-full h-full\"\r\n              />\r\n              {sliceImage.isPlaceholder && (\r\n                <div className=\"absolute bottom-0 left-0 right-0 bg-red-500 bg-opacity-70 text-white text-center py-1 text-sm\">\r\n                  Placeholder Image - Scan Data Unavailable\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className=\"flex items-center justify-center w-full h-full bg-gray-200\">\r\n              <p className=\"text-sm text-gray-500\">No image available</p>\r\n            </div>\r\n          )}\r\n        </>\r\n      ) : (\r\n        // Original interactive viewer with all controls for the detail page\r\n        <>\r\n          {/* Axis selection */}\r\n          <div className={`absolute top-2 left-2 z-10 rounded-lg shadow-md ${darkMode ? 'bg-gray-800' : 'bg-white'}`}>\r\n            <div className=\"flex p-1 space-x-1\">\r\n              <button\r\n                onClick={() => handleAxisChange('axial')}\r\n                className={`px-3 py-1.5 text-xs font-medium rounded-md ${\r\n                  currentAxis === 'axial' \r\n                    ? darkMode\r\n                      ? 'bg-indigo-600 text-white'\r\n                      : 'bg-indigo-100 text-indigo-700'\r\n                    : darkMode\r\n                      ? 'text-gray-300 hover:bg-gray-700'\r\n                      : 'text-gray-700 hover:bg-gray-100'\r\n                }`}\r\n              >\r\n                Axial\r\n              </button>\r\n              <button\r\n                onClick={() => handleAxisChange('coronal')}\r\n                className={`px-3 py-1.5 text-xs font-medium rounded-md ${\r\n                  currentAxis === 'coronal' \r\n                    ? darkMode\r\n                      ? 'bg-indigo-600 text-white'\r\n                      : 'bg-indigo-100 text-indigo-700'\r\n                    : darkMode\r\n                      ? 'text-gray-300 hover:bg-gray-700'\r\n                      : 'text-gray-700 hover:bg-gray-100'\r\n                }`}\r\n              >\r\n                Coronal\r\n              </button>\r\n              <button\r\n                onClick={() => handleAxisChange('sagittal')}\r\n                className={`px-3 py-1.5 text-xs font-medium rounded-md ${\r\n                  currentAxis === 'sagittal' \r\n                    ? darkMode\r\n                      ? 'bg-indigo-600 text-white'\r\n                      : 'bg-indigo-100 text-indigo-700'\r\n                    : darkMode\r\n                      ? 'text-gray-300 hover:bg-gray-700'\r\n                      : 'text-gray-700 hover:bg-gray-100'\r\n                }`}\r\n              >\r\n                Sagittal\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Slice slider */}\r\n          <div className={`absolute bottom-2 left-1/2 transform -translate-x-1/2 z-10 p-2 rounded-lg shadow-md ${darkMode ? 'bg-gray-800' : 'bg-white'}`} style={{ width: '90%', maxWidth: '400px' }}>\r\n            <input \r\n              type=\"range\"\r\n              min=\"0\"\r\n              max={getMaxSliceIndex()}\r\n              value={currentSlice}\r\n              onChange={handleSliceChange}\r\n              className=\"w-full h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"\r\n            />\r\n            <div className=\"flex justify-between text-xs mt-1\">\r\n              <span className={darkMode ? 'text-gray-400' : 'text-gray-500'}>Slice: {currentSlice + 1}/{getMaxSliceIndex() + 1}</span>\r\n              <span className={darkMode ? 'text-gray-400' : 'text-gray-500'}>\r\n                {slicesWithNodules().includes(currentSlice) ? '🔴 Nodule present' : ''}\r\n                {sliceImage && sliceImage.isPlaceholder ? '⚠️ Placeholder' : ''}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Main image display */}\r\n          <div className=\"w-full h-full relative\">\r\n            {sliceImage ? (\r\n              <div className=\"relative w-full h-full\">\r\n                <img \r\n                  ref={imageRef}\r\n                  src={sliceImage.data} \r\n                  alt={`${currentAxis.charAt(0).toUpperCase() + currentAxis.slice(1)} slice of CT scan`}\r\n                  className=\"w-full h-full object-contain\"\r\n                />\r\n                {sliceImage.isPlaceholder && (\r\n                  <div className=\"absolute bottom-0 left-0 right-0 bg-red-500 bg-opacity-70 text-white text-center py-1 text-sm\">\r\n                    Placeholder Image - Scan Data Unavailable\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <div className=\"flex items-center justify-center w-full h-full bg-gray-200\">\r\n                <p className=\"text-sm text-gray-500\">No image available</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InteractiveViewer; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,qBAAqB,QAAQ,6BAA6B;AAClF,SAASC,QAAQ,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,MAAM;EAAEC,gBAAgB;EAAEC,eAAe,GAAG;AAAM,CAAC,KAAK;EAAAC,EAAA;EACnF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,OAAO,CAAC;EACvD,MAAM,CAACoB,YAAY,EAAEC,eAAe,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACsB,UAAU,EAAEC,aAAa,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC0B,KAAK,EAAEC,QAAQ,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAAC4B,cAAc,EAAEC,iBAAiB,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM8B,QAAQ,GAAG5B,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM6B,YAAY,GAAG7B,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM;IAAE8B;EAAS,CAAC,GAAG1B,QAAQ,CAAC,CAAC;;EAE/B;EACA,MAAM2B,eAAe,GAAIC,QAAQ,IAAK;IACpC,IAAI,CAAClB,UAAU,IAAI,CAACA,UAAU,CAACmB,OAAO,EAAE;;IAExC;IACA,MAAMC,MAAM,GAAGpB,UAAU,CAACmB,OAAO,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKL,QAAQ,CAAC;IAC9D,IAAI,CAACE,MAAM,EAAE;;IAEb;IACAjB,cAAc,CAAC,OAAO,CAAC;;IAEvB;IACAE,eAAe,CAACmB,IAAI,CAACC,KAAK,CAACL,MAAM,CAACM,CAAC,CAAC,CAAC;EACvC,CAAC;;EAED;EACAzC,SAAS,CAAC,MAAM;IACd,IAAIY,gBAAgB,IAAIG,UAAU,IAAIA,UAAU,CAACmB,OAAO,EAAE;MACxDF,eAAe,CAACpB,gBAAgB,CAAC;IACnC;EACF,CAAC,EAAE,CAACA,gBAAgB,EAAEG,UAAU,CAAC,CAAC;;EAElC;EACAf,SAAS,CAAC,MAAM;IACd,MAAM0C,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACFlB,YAAY,CAAC,IAAI,CAAC;QAClB,MAAMmB,QAAQ,GAAG,MAAMzC,KAAK,CAAC0C,GAAG,CAAC,gBAAgBjC,MAAM,SAAS,CAAC;QACjEK,aAAa,CAAC2B,QAAQ,CAACE,IAAI,CAACC,WAAW,CAAC;;QAExC;QACA,MAAMC,gBAAgB,GAAGJ,QAAQ,CAACE,IAAI,CAACG,iBAAiB,IAAI,KAAK;QACjE,IAAID,gBAAgB,EAAE;UACpBE,OAAO,CAACC,IAAI,CAAC,mCAAmC,CAAC;QACnD;;QAEA;QACA,MAAMC,YAAY,GAAGZ,IAAI,CAACa,KAAK,CAACT,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACO,UAAU,CAACC,KAAK,GAAG,CAAC,CAAC;QAC/ElC,eAAe,CAAC+B,YAAY,CAAC;;QAE7B;QACA;QACA,IAAItC,eAAe,IAAI8B,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACZ,OAAO,IAAIS,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACZ,OAAO,CAACqB,MAAM,GAAG,CAAC,EAAE;UACxG;UACA,MAAMC,UAAU,GAAGb,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACZ,OAAO,CAACuB,MAAM,CACzD,CAACC,IAAI,EAAEC,OAAO,KAAMA,OAAO,CAACC,UAAU,GAAGF,IAAI,CAACE,UAAU,GAAID,OAAO,GAAGD,IAAI,EAC1Ef,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACZ,OAAO,CAAC,CAAC,CACrC,CAAC;UACD;UACA,MAAM2B,OAAO,GAAGtB,IAAI,CAACC,KAAK,CAACgB,UAAU,CAACf,CAAC,CAAC;UACxC,IAAI,CAACqB,KAAK,CAACD,OAAO,CAAC,IAAIA,OAAO,IAAI,CAAC,IAAIA,OAAO,GAAGlB,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACO,UAAU,CAACC,KAAK,EAAE;YAC3FlC,eAAe,CAACyC,OAAO,CAAC;UAC1B;QACF;QAEArC,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;QAAA,IAAAsC,eAAA,EAAAC,oBAAA;QACdf,OAAO,CAACxB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnDC,QAAQ,CAAC,EAAAqC,eAAA,GAAAtC,KAAK,CAACkB,QAAQ,cAAAoB,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBlB,IAAI,cAAAmB,oBAAA,uBAApBA,oBAAA,CAAsBC,OAAO,KAAI,4BAA4B,CAAC;QACvEzC,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDkB,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAAC/B,MAAM,EAAEE,eAAe,CAAC,CAAC;;EAE7B;EACAb,SAAS,CAAC,MAAM;IACd,MAAMkE,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI,CAACnD,UAAU,EAAE;MAEjB,IAAI;QACFS,YAAY,CAAC,IAAI,CAAC;QAClB,MAAMmB,QAAQ,GAAG,MAAMzC,KAAK,CAAC0C,GAAG,CAAC,gBAAgBjC,MAAM,WAAWM,WAAW,IAAIE,YAAY,EAAE,CAAC;;QAEhG;QACA,MAAMgD,aAAa,GAAGxB,QAAQ,CAACE,IAAI,CAACuB,cAAc,IAAI,KAAK;;QAE3D;QACA,IAAIC,SAAS,GAAG1B,QAAQ,CAACE,IAAI,CAACyB,UAAU;QACxC,IAAI,CAACD,SAAS,CAACE,UAAU,CAAC,YAAY,CAAC,EAAE;UACvCF,SAAS,GAAG,yBAAyBA,SAAS,EAAE;QAClD;QAEA/C,aAAa,CAAC;UACZuB,IAAI,EAAEwB,SAAS;UACfF,aAAa,EAAEA;QACjB,CAAC,CAAC;QAEF3C,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;QAAA,IAAA+C,gBAAA,EAAAC,qBAAA;QACdxB,OAAO,CAACxB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7CC,QAAQ,CAAC,EAAA8C,gBAAA,GAAA/C,KAAK,CAACkB,QAAQ,cAAA6B,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB3B,IAAI,cAAA4B,qBAAA,uBAApBA,qBAAA,CAAsBR,OAAO,KAAI,sBAAsB,CAAC;QACjEzC,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAED0C,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACvD,MAAM,EAAEM,WAAW,EAAEE,YAAY,EAAEJ,UAAU,CAAC,CAAC;;EAEnD;EACAf,SAAS,CAAC,MAAM;IACd,IAAI,CAACe,UAAU,IAAI,CAACA,UAAU,CAACmB,OAAO,EAAE;;IAExC;IACA,MAAMwC,YAAY,GAAG3D,UAAU,CAACmB,OAAO,CAACyC,MAAM,CAACxC,MAAM,IAAI;MACvD;MACA,IAAIlB,WAAW,KAAK,OAAO,EAAE;QAC3B;QACA,OAAOsB,IAAI,CAACqC,GAAG,CAACzC,MAAM,CAACM,CAAC,GAAGtB,YAAY,CAAC,IAAIgB,MAAM,CAAC0C,MAAM;MAC3D,CAAC,MAAM,IAAI5D,WAAW,KAAK,SAAS,EAAE;QACpC;QACA,OAAOsB,IAAI,CAACqC,GAAG,CAACzC,MAAM,CAAC2C,CAAC,GAAG3D,YAAY,CAAC,IAAIgB,MAAM,CAAC0C,MAAM;MAC3D,CAAC,MAAM;QAAE;QACP;QACA,OAAOtC,IAAI,CAACqC,GAAG,CAACzC,MAAM,CAAC4C,CAAC,GAAG5D,YAAY,CAAC,IAAIgB,MAAM,CAAC0C,MAAM;MAC3D;IACF,CAAC,CAAC;IAEFjD,iBAAiB,CAAC8C,YAAY,CAAC;EACjC,CAAC,EAAE,CAAC3D,UAAU,EAAEE,WAAW,EAAEE,YAAY,CAAC,CAAC;;EAE3C;EACAnB,SAAS,CAAC,MAAM;IACd,IAAI,CAACqB,UAAU,IAAI,CAACQ,QAAQ,CAAC8B,OAAO,IAAIhC,cAAc,CAAC4B,MAAM,KAAK,CAAC,EAAE;IAErE,MAAMyB,WAAW,GAAGA,CAAA,KAAM;MACxB,MAAMC,GAAG,GAAGpD,QAAQ,CAAC8B,OAAO;MAC5B,IAAI,CAACsB,GAAG,CAACC,QAAQ,EAAE;QACjB;QACAD,GAAG,CAACE,MAAM,GAAGC,kBAAkB;QAC/B;MACF;MAEAA,kBAAkB,CAAC,CAAC;IACtB,CAAC;IAED,MAAMA,kBAAkB,GAAGA,CAAA,KAAM;MAC/B,MAAMH,GAAG,GAAGpD,QAAQ,CAAC8B,OAAO;MAC5B,MAAM0B,SAAS,GAAGvD,YAAY,CAAC6B,OAAO;;MAEtC;MACA,MAAM2B,eAAe,GAAGD,SAAS,CAACE,aAAa,CAAC,iBAAiB,CAAC;MAClE,IAAID,eAAe,EAAE;QACnBD,SAAS,CAACG,WAAW,CAACF,eAAe,CAAC;MACxC;;MAEA;MACA,MAAMG,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MAC7CF,OAAO,CAACG,SAAS,GAAG,gBAAgB;MACpCH,OAAO,CAACI,KAAK,CAACC,QAAQ,GAAG,UAAU;MACnCL,OAAO,CAACI,KAAK,CAACE,GAAG,GAAG,GAAG;MACvBN,OAAO,CAACI,KAAK,CAACG,IAAI,GAAG,GAAG;MACxBP,OAAO,CAACI,KAAK,CAACI,KAAK,GAAG,MAAM;MAC5BR,OAAO,CAACI,KAAK,CAACK,MAAM,GAAG,MAAM;MAC7BT,OAAO,CAACI,KAAK,CAACM,aAAa,GAAG,MAAM;;MAEpC;MACA,MAAMC,OAAO,GAAGnB,GAAG,CAACoB,qBAAqB,CAAC,CAAC;MAC3C,MAAMC,aAAa,GAAGjB,SAAS,CAACgB,qBAAqB,CAAC,CAAC;;MAEvD;MACA,IAAIE,WAAW,GAAG,GAAG;MACrB,IAAIxF,UAAU,IAAIA,UAAU,CAACyF,OAAO,EAAE;QACpC,IAAIvF,WAAW,KAAK,OAAO,EAAE;UAC3B;UACAsF,WAAW,GAAGxF,UAAU,CAACyF,OAAO,CAAC,CAAC,CAAC,GAAGzF,UAAU,CAACyF,OAAO,CAAC,CAAC,CAAC;QAC7D,CAAC,MAAM,IAAIvF,WAAW,KAAK,SAAS,EAAE;UACpC;UACAsF,WAAW,GAAGxF,UAAU,CAACyF,OAAO,CAAC,CAAC,CAAC,GAAGzF,UAAU,CAACyF,OAAO,CAAC,CAAC,CAAC;QAC7D,CAAC,MAAM;UAAE;UACP;UACAD,WAAW,GAAGxF,UAAU,CAACyF,OAAO,CAAC,CAAC,CAAC,GAAGzF,UAAU,CAACyF,OAAO,CAAC,CAAC,CAAC;QAC7D;MACF;;MAEA;MACA,MAAMC,GAAG,GAAGf,QAAQ,CAACgB,eAAe,CAAC,4BAA4B,EAAE,KAAK,CAAC;MACzED,GAAG,CAACE,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC;MACjCF,GAAG,CAACE,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC;MAClCF,GAAG,CAACZ,KAAK,CAACC,QAAQ,GAAG,UAAU;MAC/BW,GAAG,CAACZ,KAAK,CAACE,GAAG,GAAG,GAAG;MACnBU,GAAG,CAACZ,KAAK,CAACG,IAAI,GAAG,GAAG;;MAEpB;MACA,MAAMY,YAAY,GAAGR,OAAO,CAACH,KAAK;MAClC,MAAMY,aAAa,GAAGT,OAAO,CAACF,MAAM;;MAEpC;MACAvE,cAAc,CAACmF,OAAO,CAAC3E,MAAM,IAAI;QAC/B,IAAI4C,CAAC,EAAED,CAAC,EAAEiC,QAAQ;;QAElB;QACA,IAAI9F,WAAW,KAAK,OAAO,EAAE;UAC3B8D,CAAC,GAAG5C,MAAM,CAAC4C,CAAC;UACZD,CAAC,GAAG3C,MAAM,CAAC2C,CAAC;UACZiC,QAAQ,GAAG5F,YAAY;QACzB,CAAC,MAAM,IAAIF,WAAW,KAAK,SAAS,EAAE;UACpC8D,CAAC,GAAG5C,MAAM,CAAC4C,CAAC;UACZD,CAAC,GAAG3C,MAAM,CAACM,CAAC;UACZsE,QAAQ,GAAG5F,YAAY;QACzB,CAAC,MAAM;UAAE;UACP4D,CAAC,GAAG5C,MAAM,CAAC2C,CAAC;UACZA,CAAC,GAAG3C,MAAM,CAACM,CAAC;UACZsE,QAAQ,GAAG5F,YAAY;QACzB;;QAEA;QACA,IAAI6F,KAAK,EAAEC,KAAK;QAEhB,IAAIhG,WAAW,KAAK,OAAO,EAAE;UAC3B+F,KAAK,GAAGjC,CAAC,GAAGhE,UAAU,CAACsC,UAAU,CAAC4C,KAAK;UACvCgB,KAAK,GAAGnC,CAAC,GAAG/D,UAAU,CAACsC,UAAU,CAAC6C,MAAM;QAC1C,CAAC,MAAM,IAAIjF,WAAW,KAAK,SAAS,EAAE;UACpC+F,KAAK,GAAGjC,CAAC,GAAGhE,UAAU,CAACsC,UAAU,CAAC4C,KAAK;UACvCgB,KAAK,GAAGnC,CAAC,GAAG/D,UAAU,CAACsC,UAAU,CAACC,KAAK;QACzC,CAAC,MAAM;UAAE;UACP0D,KAAK,GAAGlC,CAAC,GAAG/D,UAAU,CAACsC,UAAU,CAAC6C,MAAM;UACxCe,KAAK,GAAG9E,MAAM,CAACM,CAAC,GAAG1B,UAAU,CAACsC,UAAU,CAACC,KAAK;QAChD;;QAEA;QACA;QACA,MAAM4D,GAAG,GAAGF,KAAK,GAAGJ,YAAY;;QAEhC;QACA;QACA;QACA,MAAMO,GAAG,GAAGF,KAAK,GAAGJ,aAAa;;QAEjC;QACA;QACA,IAAIO,QAAQ,GAAGjF,MAAM,CAAC0C,MAAM,IAAI,CAAC,CAAC,CAAC;QACnC,IAAIwC,WAAW;;QAEf;QACA,IAAIpG,WAAW,KAAK,OAAO,EAAE;UAC3B;UACA,MAAMqG,QAAQ,GAAGvG,UAAU,CAACyF,OAAO,GAAGzF,UAAU,CAACyF,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;UAC/D,MAAMe,QAAQ,GAAGxG,UAAU,CAACyF,OAAO,GAAGzF,UAAU,CAACyF,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;UAC/D,MAAMgB,UAAU,GAAGjF,IAAI,CAACkF,GAAG,CAACH,QAAQ,EAAEC,QAAQ,CAAC;UAC/C;UACA,MAAMG,SAAS,GAAG3G,UAAU,CAACsC,UAAU,CAAC4C,KAAK,GAAGqB,QAAQ;UACxDD,WAAW,GAAGT,YAAY,GAAGc,SAAS;QACxC,CAAC,MAAM,IAAIzG,WAAW,KAAK,SAAS,EAAE;UACpC,MAAMqG,QAAQ,GAAGvG,UAAU,CAACyF,OAAO,GAAGzF,UAAU,CAACyF,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;UAC/D,MAAMmB,QAAQ,GAAG5G,UAAU,CAACyF,OAAO,GAAGzF,UAAU,CAACyF,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;UAC/D,MAAMgB,UAAU,GAAGjF,IAAI,CAACkF,GAAG,CAACH,QAAQ,EAAEK,QAAQ,CAAC;UAC/C;UACA,MAAMD,SAAS,GAAG3G,UAAU,CAACsC,UAAU,CAAC4C,KAAK,GAAGqB,QAAQ;UACxDD,WAAW,GAAGT,YAAY,GAAGc,SAAS;QACxC,CAAC,MAAM;UAAE;UACP,MAAMH,QAAQ,GAAGxG,UAAU,CAACyF,OAAO,GAAGzF,UAAU,CAACyF,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;UAC/D,MAAMmB,QAAQ,GAAG5G,UAAU,CAACyF,OAAO,GAAGzF,UAAU,CAACyF,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;UAC/D,MAAMgB,UAAU,GAAGjF,IAAI,CAACkF,GAAG,CAACF,QAAQ,EAAEI,QAAQ,CAAC;UAC/C;UACA,MAAMC,UAAU,GAAG7G,UAAU,CAACsC,UAAU,CAAC6C,MAAM,GAAGqB,QAAQ;UAC1DF,WAAW,GAAGR,aAAa,GAAGe,UAAU;QAC1C;;QAEA;QACA,IAAIC,YAAY,GAAGT,QAAQ,GAAGC,WAAW;;QAEzC;QACAQ,YAAY,GAAGtF,IAAI,CAACuF,GAAG,CAAC,CAAC,EAAED,YAAY,GAAG,GAAG,CAAC,CAAC,CAAC;;QAEhD;QACA,IAAIE,iBAAiB;QACrB,IAAI9G,WAAW,KAAK,OAAO,EAAE;UAC3B8G,iBAAiB,GAAGxF,IAAI,CAACqC,GAAG,CAACzC,MAAM,CAACM,CAAC,GAAGsE,QAAQ,CAAC;QACnD,CAAC,MAAM,IAAI9F,WAAW,KAAK,SAAS,EAAE;UACpC8G,iBAAiB,GAAGxF,IAAI,CAACqC,GAAG,CAACzC,MAAM,CAAC2C,CAAC,GAAGiC,QAAQ,CAAC;QACnD,CAAC,MAAM;UAAE;UACPgB,iBAAiB,GAAGxF,IAAI,CAACqC,GAAG,CAACzC,MAAM,CAAC4C,CAAC,GAAGgC,QAAQ,CAAC;QACnD;;QAEA;QACA,MAAMiB,KAAK,GAAGC,cAAc,CAAC9F,MAAM,CAACyB,UAAU,CAAC;;QAE/C;QACA,MAAMsE,MAAM,GAAGxC,QAAQ,CAACgB,eAAe,CAAC,4BAA4B,EAAE,QAAQ,CAAC;QAC/EwB,MAAM,CAACvB,YAAY,CAAC,IAAI,EAAEO,GAAG,CAAC;QAC9BgB,MAAM,CAACvB,YAAY,CAAC,IAAI,EAAEQ,GAAG,CAAC;QAC9Be,MAAM,CAACvB,YAAY,CAAC,GAAG,EAAEkB,YAAY,CAAC;QACtCK,MAAM,CAACvB,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;QACnCuB,MAAM,CAACvB,YAAY,CAAC,QAAQ,EAAEqB,KAAK,CAAC;QACpCE,MAAM,CAACvB,YAAY,CAAC,cAAc,EAAE,GAAG,CAAC;;QAExC;QACA,MAAMwB,SAAS,GAAGzC,QAAQ,CAACgB,eAAe,CAAC,4BAA4B,EAAE,QAAQ,CAAC;QAClFyB,SAAS,CAACxB,YAAY,CAAC,IAAI,EAAEO,GAAG,CAAC;QACjCiB,SAAS,CAACxB,YAAY,CAAC,IAAI,EAAEQ,GAAG,CAAC;QACjCgB,SAAS,CAACxB,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC;QAChCwB,SAAS,CAACxB,YAAY,CAAC,MAAM,EAAEqB,KAAK,CAAC;;QAErC;QACA,IAAIpH,gBAAgB,KAAKuB,MAAM,CAACG,EAAE,EAAE;UAClC4F,MAAM,CAACvB,YAAY,CAAC,cAAc,EAAE,GAAG,CAAC;UACxCuB,MAAM,CAACvB,YAAY,CAAC,kBAAkB,EAAE,KAAK,CAAC;QAChD;QAEAF,GAAG,CAAC2B,WAAW,CAACF,MAAM,CAAC;QACvBzB,GAAG,CAAC2B,WAAW,CAACD,SAAS,CAAC;MAC5B,CAAC,CAAC;MAEF1C,OAAO,CAAC2C,WAAW,CAAC3B,GAAG,CAAC;MACxBpB,SAAS,CAAC+C,WAAW,CAAC3C,OAAO,CAAC;IAChC,CAAC;IAEDT,WAAW,CAAC,CAAC;;IAEb;IACA,OAAO,MAAM;MACX,MAAMK,SAAS,GAAGvD,YAAY,CAAC6B,OAAO;MACtC,IAAI0B,SAAS,EAAE;QACb,MAAMI,OAAO,GAAGJ,SAAS,CAACE,aAAa,CAAC,iBAAiB,CAAC;QAC1D,IAAIE,OAAO,EAAE;UACXJ,SAAS,CAACG,WAAW,CAACC,OAAO,CAAC;QAChC;MACF;IACF,CAAC;EACH,CAAC,EAAE,CAACpE,UAAU,EAAEM,cAAc,EAAEV,WAAW,EAAEL,gBAAgB,EAAEG,UAAU,CAAC,CAAC;;EAE3E;EACA,MAAMsH,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAI,CAACtH,UAAU,EAAE,OAAO,CAAC;IAEzB,IAAIE,WAAW,KAAK,OAAO,EAAE;MAC3B,OAAOF,UAAU,CAACsC,UAAU,CAACC,KAAK,GAAG,CAAC;IACxC,CAAC,MAAM,IAAIrC,WAAW,KAAK,SAAS,EAAE;MACpC,OAAOF,UAAU,CAACsC,UAAU,CAAC6C,MAAM,GAAG,CAAC;IACzC,CAAC,MAAM;MAAE;MACP,OAAOnF,UAAU,CAACsC,UAAU,CAAC4C,KAAK,GAAG,CAAC;IACxC;EACF,CAAC;EAED,MAAMqC,gBAAgB,GAAIC,IAAI,IAAK;IACjCrH,cAAc,CAACqH,IAAI,CAAC;IACpB;IACA,IAAI,CAACxH,UAAU,EAAE;IAEjB,IAAIyH,MAAM;IACV,IAAID,IAAI,KAAK,OAAO,EAAE;MACpBC,MAAM,GAAGjG,IAAI,CAACa,KAAK,CAACrC,UAAU,CAACsC,UAAU,CAACC,KAAK,GAAG,CAAC,CAAC;IACtD,CAAC,MAAM,IAAIiF,IAAI,KAAK,SAAS,EAAE;MAC7BC,MAAM,GAAGjG,IAAI,CAACa,KAAK,CAACrC,UAAU,CAACsC,UAAU,CAAC6C,MAAM,GAAG,CAAC,CAAC;IACvD,CAAC,MAAM;MAAE;MACPsC,MAAM,GAAGjG,IAAI,CAACa,KAAK,CAACrC,UAAU,CAACsC,UAAU,CAAC4C,KAAK,GAAG,CAAC,CAAC;IACtD;;IAEA;IACA,IAAI,CAACnC,KAAK,CAAC0E,MAAM,CAAC,IAAIA,MAAM,IAAI,CAAC,EAAE;MACjCpH,eAAe,CAACoH,MAAM,CAAC;IACzB;EACF,CAAC;EAED,MAAMC,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAMC,KAAK,GAAGC,QAAQ,CAACF,CAAC,CAACG,MAAM,CAACF,KAAK,EAAE,EAAE,CAAC;IAC1C;IACA,IAAI,CAAC7E,KAAK,CAAC6E,KAAK,CAAC,IAAIA,KAAK,IAAI,CAAC,IAAIA,KAAK,IAAIN,gBAAgB,CAAC,CAAC,EAAE;MAC9DjH,eAAe,CAACuH,KAAK,CAAC;IACxB;EACF,CAAC;;EAED;EACA,MAAMG,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAI,CAAC/H,UAAU,IAAI,CAACA,UAAU,CAACmB,OAAO,EAAE,OAAO,EAAE;IAEjD,MAAM6G,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC9BjI,UAAU,CAACmB,OAAO,CAAC4E,OAAO,CAAC3E,MAAM,IAAI;MACnC,IAAIlB,WAAW,KAAK,OAAO,EAAE;QAC3B;QACA,MAAMgI,KAAK,GAAG1G,IAAI,CAACuF,GAAG,CAAC,CAAC,EAAEvF,IAAI,CAACa,KAAK,CAACjB,MAAM,CAACM,CAAC,GAAGN,MAAM,CAAC0C,MAAM,CAAC,CAAC;QAC/D,MAAMqE,GAAG,GAAG3G,IAAI,CAACkF,GAAG,CAAC1G,UAAU,CAACsC,UAAU,CAACC,KAAK,GAAG,CAAC,EAAEf,IAAI,CAAC4G,IAAI,CAAChH,MAAM,CAACM,CAAC,GAAGN,MAAM,CAAC0C,MAAM,CAAC,CAAC;QAC1F,KAAK,IAAIuE,CAAC,GAAGH,KAAK,EAAEG,CAAC,IAAIF,GAAG,EAAEE,CAAC,EAAE,EAAE;UACjCL,YAAY,CAACM,GAAG,CAACD,CAAC,CAAC;QACrB;MACF,CAAC,MAAM,IAAInI,WAAW,KAAK,SAAS,EAAE;QACpC,MAAMgI,KAAK,GAAG1G,IAAI,CAACuF,GAAG,CAAC,CAAC,EAAEvF,IAAI,CAACa,KAAK,CAACjB,MAAM,CAAC2C,CAAC,GAAG3C,MAAM,CAAC0C,MAAM,CAAC,CAAC;QAC/D,MAAMqE,GAAG,GAAG3G,IAAI,CAACkF,GAAG,CAAC1G,UAAU,CAACsC,UAAU,CAAC6C,MAAM,GAAG,CAAC,EAAE3D,IAAI,CAAC4G,IAAI,CAAChH,MAAM,CAAC2C,CAAC,GAAG3C,MAAM,CAAC0C,MAAM,CAAC,CAAC;QAC3F,KAAK,IAAIuE,CAAC,GAAGH,KAAK,EAAEG,CAAC,IAAIF,GAAG,EAAEE,CAAC,EAAE,EAAE;UACjCL,YAAY,CAACM,GAAG,CAACD,CAAC,CAAC;QACrB;MACF,CAAC,MAAM;QAAE;QACP,MAAMH,KAAK,GAAG1G,IAAI,CAACuF,GAAG,CAAC,CAAC,EAAEvF,IAAI,CAACa,KAAK,CAACjB,MAAM,CAAC4C,CAAC,GAAG5C,MAAM,CAAC0C,MAAM,CAAC,CAAC;QAC/D,MAAMqE,GAAG,GAAG3G,IAAI,CAACkF,GAAG,CAAC1G,UAAU,CAACsC,UAAU,CAAC4C,KAAK,GAAG,CAAC,EAAE1D,IAAI,CAAC4G,IAAI,CAAChH,MAAM,CAAC4C,CAAC,GAAG5C,MAAM,CAAC0C,MAAM,CAAC,CAAC;QAC1F,KAAK,IAAIuE,CAAC,GAAGH,KAAK,EAAEG,CAAC,IAAIF,GAAG,EAAEE,CAAC,EAAE,EAAE;UACjCL,YAAY,CAACM,GAAG,CAACD,CAAC,CAAC;QACrB;MACF;IACF,CAAC,CAAC;IAEF,OAAOE,KAAK,CAACC,IAAI,CAACR,YAAY,CAAC;EACjC,CAAC;;EAED;EACA,MAAMd,cAAc,GAAIrE,UAAU,IAAK;IACrC,IAAIA,UAAU,IAAI,GAAG,EAAE,OAAO,wBAAwB,CAAC,CAAE;IACzD,IAAIA,UAAU,IAAI,GAAG,EAAE,OAAO,wBAAwB,CAAC,CAAE;IACzD,OAAO,wBAAwB,CAAC,CAAE;EACpC,CAAC;EAED,oBACErD,OAAA;IAAKqF,SAAS,EAAC,wBAAwB;IAAC4D,GAAG,EAAE1H,YAAa;IAAA2H,QAAA,EAEvD5I,eAAe,gBACdN,OAAA,CAAAE,SAAA;MAAAgJ,QAAA,EACGlI,SAAS,gBACRhB,OAAA;QAAKqF,SAAS,EAAC,4DAA4D;QAAA6D,QAAA,eACzElJ,OAAA,CAACJ,aAAa;UAACyF,SAAS,EAAC;QAAoC;UAAA8D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7D,CAAC,GACJpI,KAAK,gBACPlB,OAAA;QAAKqF,SAAS,EAAC,4DAA4D;QAAA6D,QAAA,eACzElJ,OAAA;UAAKqF,SAAS,EAAC,iBAAiB;UAAA6D,QAAA,gBAC9BlJ,OAAA,CAACH,qBAAqB;YAACwF,SAAS,EAAC;UAAmC;YAAA8D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACvEtJ,OAAA;YAAGqF,SAAS,EAAC,uBAAuB;YAAA6D,QAAA,EAAC;UAAkB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,GACJxI,UAAU,gBACZd,OAAA;QAAKqF,SAAS,EAAC,wCAAwC;QAAA6D,QAAA,gBACrDlJ,OAAA;UACEiJ,GAAG,EAAE3H,QAAS;UACdiI,GAAG,EAAEzI,UAAU,CAACwB,IAAK;UACrBkH,GAAG,EAAE,sBAAsBpJ,MAAM,EAAG;UACpCiF,SAAS,EAAC;QAA4B;UAAA8D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvC,CAAC,EACDxI,UAAU,CAAC8C,aAAa,iBACvB5D,OAAA;UAAKqF,SAAS,EAAC,+FAA+F;UAAA6D,QAAA,EAAC;QAE/G;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,gBAENtJ,OAAA;QAAKqF,SAAS,EAAC,4DAA4D;QAAA6D,QAAA,eACzElJ,OAAA;UAAGqF,SAAS,EAAC,uBAAuB;UAAA6D,QAAA,EAAC;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxD;IACN,gBACD,CAAC;IAAA;IAEH;IACAtJ,OAAA,CAAAE,SAAA;MAAAgJ,QAAA,gBAEElJ,OAAA;QAAKqF,SAAS,EAAE,mDAAmD7D,QAAQ,GAAG,aAAa,GAAG,UAAU,EAAG;QAAA0H,QAAA,eACzGlJ,OAAA;UAAKqF,SAAS,EAAC,oBAAoB;UAAA6D,QAAA,gBACjClJ,OAAA;YACEyJ,OAAO,EAAEA,CAAA,KAAM1B,gBAAgB,CAAC,OAAO,CAAE;YACzC1C,SAAS,EAAE,8CACT3E,WAAW,KAAK,OAAO,GACnBc,QAAQ,GACN,0BAA0B,GAC1B,+BAA+B,GACjCA,QAAQ,GACN,iCAAiC,GACjC,iCAAiC,EACtC;YAAA0H,QAAA,EACJ;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTtJ,OAAA;YACEyJ,OAAO,EAAEA,CAAA,KAAM1B,gBAAgB,CAAC,SAAS,CAAE;YAC3C1C,SAAS,EAAE,8CACT3E,WAAW,KAAK,SAAS,GACrBc,QAAQ,GACN,0BAA0B,GAC1B,+BAA+B,GACjCA,QAAQ,GACN,iCAAiC,GACjC,iCAAiC,EACtC;YAAA0H,QAAA,EACJ;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTtJ,OAAA;YACEyJ,OAAO,EAAEA,CAAA,KAAM1B,gBAAgB,CAAC,UAAU,CAAE;YAC5C1C,SAAS,EAAE,8CACT3E,WAAW,KAAK,UAAU,GACtBc,QAAQ,GACN,0BAA0B,GAC1B,+BAA+B,GACjCA,QAAQ,GACN,iCAAiC,GACjC,iCAAiC,EACtC;YAAA0H,QAAA,EACJ;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAGNtJ,OAAA;QAAKqF,SAAS,EAAE,uFAAuF7D,QAAQ,GAAG,aAAa,GAAG,UAAU,EAAG;QAAC8D,KAAK,EAAE;UAAEI,KAAK,EAAE,KAAK;UAAEgE,QAAQ,EAAE;QAAQ,CAAE;QAAAR,QAAA,gBACzLlJ,OAAA;UACE2J,IAAI,EAAC,OAAO;UACZzC,GAAG,EAAC,GAAG;UACPK,GAAG,EAAEO,gBAAgB,CAAC,CAAE;UACxBM,KAAK,EAAExH,YAAa;UACpBgJ,QAAQ,EAAE1B,iBAAkB;UAC5B7C,SAAS,EAAC;QAAmF;UAAA8D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9F,CAAC,eACFtJ,OAAA;UAAKqF,SAAS,EAAC,mCAAmC;UAAA6D,QAAA,gBAChDlJ,OAAA;YAAMqF,SAAS,EAAE7D,QAAQ,GAAG,eAAe,GAAG,eAAgB;YAAA0H,QAAA,GAAC,SAAO,EAACtI,YAAY,GAAG,CAAC,EAAC,GAAC,EAACkH,gBAAgB,CAAC,CAAC,GAAG,CAAC;UAAA;YAAAqB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACxHtJ,OAAA;YAAMqF,SAAS,EAAE7D,QAAQ,GAAG,eAAe,GAAG,eAAgB;YAAA0H,QAAA,GAC3DX,iBAAiB,CAAC,CAAC,CAACsB,QAAQ,CAACjJ,YAAY,CAAC,GAAG,mBAAmB,GAAG,EAAE,EACrEE,UAAU,IAAIA,UAAU,CAAC8C,aAAa,GAAG,gBAAgB,GAAG,EAAE;UAAA;YAAAuF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3D,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAGNtJ,OAAA;QAAKqF,SAAS,EAAC,wBAAwB;QAAA6D,QAAA,EACpCpI,UAAU,gBACTd,OAAA;UAAKqF,SAAS,EAAC,wBAAwB;UAAA6D,QAAA,gBACrClJ,OAAA;YACEiJ,GAAG,EAAE3H,QAAS;YACdiI,GAAG,EAAEzI,UAAU,CAACwB,IAAK;YACrBkH,GAAG,EAAE,GAAG9I,WAAW,CAACoJ,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGrJ,WAAW,CAACsJ,KAAK,CAAC,CAAC,CAAC,mBAAoB;YACtF3E,SAAS,EAAC;UAA8B;YAAA8D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzC,CAAC,EACDxI,UAAU,CAAC8C,aAAa,iBACvB5D,OAAA;YAAKqF,SAAS,EAAC,+FAA+F;YAAA6D,QAAA,EAAC;UAE/G;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CACN;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,gBAENtJ,OAAA;UAAKqF,SAAS,EAAC,4DAA4D;UAAA6D,QAAA,eACzElJ,OAAA;YAAGqF,SAAS,EAAC,uBAAuB;YAAA6D,QAAA,EAAC;UAAkB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxD;MACN;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA,eACN;EACH;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC/I,EAAA,CAliBIJ,iBAAiB;EAAA,QAUAL,QAAQ;AAAA;AAAAmK,EAAA,GAVzB9J,iBAAiB;AAoiBvB,eAAeA,iBAAiB;AAAC,IAAA8J,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}